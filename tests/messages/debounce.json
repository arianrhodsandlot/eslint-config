[
  {
    "ruleId": "jsdoc/tag-lines",
    "severity": 1,
    "message": "Expected only 0 line after block description",
    "line": 27,
    "column": 1,
    "nodeType": "Block",
    "endLine": 27,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */"
    }
  },
  {
    "ruleId": "jsdoc/check-tag-names",
    "severity": 1,
    "message": "Invalid JSDoc tag name \"category\".",
    "line": 30,
    "column": 1,
    "nodeType": "Block",
    "endLine": 30,
    "endColumn": 1
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 32,
    "column": 1,
    "nodeType": "Block",
    "endLine": 32,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */"
    }
  },
  {
    "ruleId": "jsdoc/check-types",
    "severity": 1,
    "message": "Invalid JSDoc @param \"options\" type \"Object\"; prefer: \"object\".",
    "line": 35,
    "column": 1,
    "nodeType": "Block",
    "endLine": 35,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */"
    }
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 35,
    "column": 1,
    "nodeType": "Block",
    "endLine": 35,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */"
    }
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 36,
    "column": 1,
    "nodeType": "Block",
    "endLine": 36,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options] The options object.\n * @param {boolean} [options.leading]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */"
    }
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 40,
    "column": 1,
    "nodeType": "Block",
    "endLine": 40,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options] The options object.\n * @param {boolean} [options.leading]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Number(wait)` instead.",
    "line": 83,
    "column": 10,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 83,
    "endColumn": 15,
    "suggestions": [
      {
        "messageId": "useRecommendation",
        "data": {
          "recommendation": "Number(wait)"
        },
        "fix": {
          "range": [
            3335,
            3340
          ],
          "text": "Number(wait)"
        },
        "desc": "Use `Number(wait)` instead."
      }
    ]
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Boolean(options.leading)` instead.",
    "line": 85,
    "column": 15,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 85,
    "endColumn": 32,
    "fix": {
      "range": [
        3387,
        3404
      ],
      "text": "Boolean(options.leading)"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Number(options.maxWait)` instead.",
    "line": 87,
    "column": 33,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 87,
    "endColumn": 49,
    "suggestions": [
      {
        "messageId": "useRecommendation",
        "data": {
          "recommendation": "Number(options.maxWait)"
        },
        "fix": {
          "range": [
            3471,
            3487
          ],
          "text": "Number(options.maxWait)"
        },
        "desc": "Use `Number(options.maxWait)` instead."
      }
    ]
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Boolean(options.trailing)` instead.",
    "line": 88,
    "column": 40,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 88,
    "endColumn": 58,
    "fix": {
      "range": [
        3549,
        3567
      ],
      "text": "Boolean(options.trailing)"
    }
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 95,
    "column": 16,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 95,
    "endColumn": 36
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 167,
    "column": 16,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 167,
    "endColumn": 36
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 176,
    "column": 16,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 176,
    "endColumn": 61
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 176,
    "column": 31,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 176,
    "endColumn": 61
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 176,
    "column": 42,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 176,
    "endColumn": 61
  },
  {
    "ruleId": "unicorn/no-this-assignment",
    "severity": 2,
    "message": "Do not assign `this` to `lastThis`.",
    "line": 192,
    "column": 5,
    "nodeType": "AssignmentExpression",
    "messageId": "no-this-assignment",
    "endLine": 192,
    "endColumn": 20
  },
  {
    "ruleId": "@typescript-eslint/no-this-alias",
    "severity": 2,
    "message": "Unexpected aliasing of 'this' to local variable.",
    "line": 192,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "thisAssignment",
    "endLine": 192,
    "endColumn": 13
  },
  {
    "ruleId": "no-invalid-this",
    "severity": 2,
    "message": "Unexpected 'this'.",
    "line": 192,
    "column": 16,
    "nodeType": "ThisExpression",
    "messageId": "unexpectedThis",
    "endLine": 192,
    "endColumn": 20
  }
]