[
  {
    "ruleId": "import-x/no-duplicates",
    "severity": 2,
    "message": "'@typescript-eslint/utils' imported multiple times.",
    "line": 1,
    "column": 41,
    "nodeType": "Literal",
    "messageId": "duplicate",
    "endLine": 1,
    "endColumn": 67,
    "fix": {
      "range": [
        7,
        138
      ],
      "text": "{ type TSESLint, type TSESTree, AST_NODE_TYPES, ESLintUtils  } from '@typescript-eslint/utils'\n"
    }
  },
  {
    "ruleId": "n/no-extraneous-import",
    "severity": 2,
    "message": "\"@typescript-eslint/utils\" is extraneous.",
    "line": 1,
    "column": 41,
    "nodeType": "Literal",
    "messageId": "extraneous",
    "endLine": 1,
    "endColumn": 67
  },
  {
    "ruleId": "import-x/order",
    "severity": 2,
    "message": "There should be no empty line between import groups",
    "line": 2,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "noLineBetweenGroups",
    "endLine": 2,
    "endColumn": 71,
    "fix": {
      "range": [
        138,
        139
      ],
      "text": ""
    }
  },
  {
    "ruleId": "import-x/no-duplicates",
    "severity": 2,
    "message": "'@typescript-eslint/utils' imported multiple times.",
    "line": 2,
    "column": 45,
    "nodeType": "Literal",
    "messageId": "duplicate",
    "endLine": 2,
    "endColumn": 71
  },
  {
    "ruleId": "n/no-extraneous-import",
    "severity": 2,
    "message": "\"@typescript-eslint/utils\" is extraneous.",
    "line": 2,
    "column": 45,
    "nodeType": "Literal",
    "messageId": "extraneous",
    "endLine": 2,
    "endColumn": 71
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Boolean(node.id.typeAnnotation)` instead.",
    "line": 17,
    "column": 61,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 17,
    "endColumn": 85,
    "fix": {
      "range": [
        709,
        733
      ],
      "text": "Boolean(node.id.typeAnnotation)"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Boolean(node.typeAnnotation)` instead.",
    "line": 27,
    "column": 61,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 27,
    "endColumn": 82,
    "fix": {
      "range": [
        1014,
        1035
      ],
      "text": "Boolean(node.typeAnnotation)"
    }
  },
  {
    "ruleId": "prefer-destructuring",
    "severity": 2,
    "message": "Use object destructuring.",
    "line": 95,
    "column": 9,
    "nodeType": "VariableDeclarator",
    "messageId": "preferDestructuring",
    "endLine": 95,
    "endColumn": 35,
    "fix": {
      "range": [
        2827,
        2853
      ],
      "text": "{parent} = objectExpr"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use `Boolean(statement.argument)` instead.",
    "line": 117,
    "column": 62,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 117,
    "endColumn": 82,
    "fix": {
      "range": [
        3571,
        3591
      ],
      "text": "Boolean(statement.argument)"
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \"allowHigherOrderFunctions\" to come before \"allowTypedFunctionExpressions\".",
    "line": 151,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 151,
    "endColumn": 38,
    "fix": {
      "range": [
        4420,
        4580
      ],
      "text": "allowDirectConstAssertionInArrowFunctions?: boolean\n  allowExpressions?: boolean\n  allowHigherOrderFunctions?: boolean\n  allowTypedFunctionExpressions?: boolean"
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \"allowDirectConstAssertionInArrowFunctions\" to come before \"allowHigherOrderFunctions\".",
    "line": 152,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 152,
    "endColumn": 54,
    "fix": {
      "range": [
        4420,
        4580
      ],
      "text": "allowDirectConstAssertionInArrowFunctions?: boolean\n  allowExpressions?: boolean\n  allowHigherOrderFunctions?: boolean\n  allowTypedFunctionExpressions?: boolean"
    }
  },
  {
    "ruleId": "max-params",
    "severity": 2,
    "message": "Function 'checkFunctionReturnType' has too many parameters (4). Maximum allowed is 3.",
    "line": 210,
    "column": 1,
    "nodeType": "FunctionDeclaration",
    "messageId": "exceed",
    "endLine": 210,
    "endColumn": 33
  },
  {
    "ruleId": "max-params",
    "severity": 2,
    "message": "Function 'checkFunctionExpressionReturnType' has too many parameters (4). Maximum allowed is 3.",
    "line": 226,
    "column": 1,
    "nodeType": "FunctionDeclaration",
    "messageId": "exceed",
    "endLine": 226,
    "endColumn": 43
  },
  {
    "ruleId": "sonarjs/cognitive-complexity",
    "severity": 2,
    "message": "Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.",
    "line": 242,
    "column": 10,
    "nodeType": null,
    "messageId": "refactorFunction",
    "endLine": 242,
    "endColumn": 31
  },
  {
    "ruleId": "perfectionist/sort-switch-case",
    "severity": 2,
    "message": "Expected \"AST_NODE_TYPES.FunctionDeclaration\" to come before \"AST_NODE_TYPES.FunctionExpression\".",
    "line": 261,
    "column": 12,
    "nodeType": "MemberExpression",
    "messageId": "unexpectedSwitchCaseOrder",
    "endLine": 261,
    "endColumn": 46,
    "fix": {
      "range": [
        7872,
        7952
      ],
      "text": "AST_NODE_TYPES.FunctionDeclaration:\n      case AST_NODE_TYPES.FunctionExpression"
    }
  },
  {
    "ruleId": "perfectionist/sort-switch-case",
    "severity": 2,
    "message": "Expected \"AST_NODE_TYPES.PropertyDefinition\" to come before \"AST_NODE_TYPES.VariableDeclarator\".",
    "line": 274,
    "column": 7,
    "nodeType": "SwitchCase",
    "messageId": "unexpectedSwitchCaseOrder",
    "endLine": 278,
    "endColumn": 14
  },
  {
    "ruleId": "perfectionist/sort-named-exports",
    "severity": 2,
    "message": "Expected \"ancestorHasReturnType\" to come before \"isValidFunctionExpressionReturnType\".",
    "line": 295,
    "column": 3,
    "nodeType": "ExportSpecifier",
    "messageId": "unexpectedNamedExportsOrder",
    "endLine": 295,
    "endColumn": 24,
    "fix": {
      "range": [
        8475,
        8709
      ],
      "text": "ancestorHasReturnType,\n  checkFunctionExpressionReturnType,\n  checkFunctionReturnType,\n  doesImmediatelyReturnFunctionExpression,\n  FunctionExpression,\n  FunctionNode,\n  isTypedFunctionExpression,\n  isValidFunctionExpressionReturnType"
    }
  }
]