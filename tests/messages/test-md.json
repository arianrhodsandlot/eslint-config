[
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 192,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 192,
    "endColumn": 14,
    "fix": {
      "range": [
        11583,
        11622
      ],
      "text": "interface AppProps {\n  message: string;\n}"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 197,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 197,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 197,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 197,
    "endColumn": 60
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 200,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 200,
    "endColumn": 10
  },
  {
    "ruleId": "@typescript-eslint/no-redeclare",
    "severity": 2,
    "message": "'App' is already defined.",
    "line": 200,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "redeclared",
    "endLine": 200,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 200,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 200,
    "endColumn": 79
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 203,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 203,
    "endColumn": 10
  },
  {
    "ruleId": "@typescript-eslint/no-redeclare",
    "severity": 2,
    "message": "'App' is already defined.",
    "line": 203,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "redeclared",
    "endLine": 203,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 203,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 203,
    "endColumn": 71
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 207,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 207,
    "endColumn": 56
  },
  {
    "ruleId": "@typescript-eslint/no-redeclare",
    "severity": 2,
    "message": "'App' is already defined.",
    "line": 207,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "redeclared",
    "endLine": 207,
    "endColumn": 56
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 207,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 209,
    "endColumn": 2
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 221,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 221,
    "endColumn": 56
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 221,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 223,
    "endColumn": 2
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 240,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 240,
    "endColumn": 56
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 240,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 243,
    "endColumn": 42
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: ')' expected.",
    "line": 264,
    "column": 12
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 304,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 307,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 304,
    "column": 27,
    "nodeType": "Identifier",
    "endLine": 304,
    "endColumn": 35
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 314,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 318,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 314,
    "column": 25,
    "nodeType": "Identifier",
    "endLine": 314,
    "endColumn": 33
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"null\" to come before \"User\".",
    "line": 314,
    "column": 41,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 314,
    "endColumn": 45,
    "fix": {
      "range": [
        16937,
        16948
      ],
      "text": "null | User"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 323,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 327,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 323,
    "column": 25,
    "nodeType": "Identifier",
    "endLine": 323,
    "endColumn": 33
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Expression expected.",
    "line": 341,
    "column": 6
  },
  {
    "ruleId": "@typescript-eslint/no-unsafe-function-type",
    "severity": 2,
    "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
    "line": 362,
    "column": 32,
    "nodeType": "Identifier",
    "messageId": "bannedFunctionType",
    "endLine": 362,
    "endColumn": 40
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useCallback\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 369,
    "column": 1,
    "nodeType": "Identifier",
    "endLine": 369,
    "endColumn": 12
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 369,
    "column": 20,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 369,
    "endColumn": 22
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useCallback\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 371,
    "column": 1,
    "nodeType": "Identifier",
    "endLine": 371,
    "endColumn": 12
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 371,
    "column": 25,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 371,
    "endColumn": 27
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"payload\" to come before \"type\".",
    "line": 384,
    "column": 26,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 384,
    "endColumn": 41,
    "fix": {
      "range": [
        18864,
        18898
      ],
      "text": "payload: number; type: \"increment\";"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"{ type: \"decrement\"; payload: string }\" to come before \"{ type: \"increment\"; payload: number }\".",
    "line": 385,
    "column": 5,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 385,
    "endColumn": 43,
    "fix": {
      "range": [
        18862,
        18943
      ],
      "text": "{ type: \"decrement\"; payload: string }\n  | { type: \"increment\"; payload: number }"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"payload\" to come before \"type\".",
    "line": 385,
    "column": 26,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 385,
    "endColumn": 41,
    "fix": {
      "range": [
        18907,
        18941
      ],
      "text": "payload: string; type: \"decrement\";"
    }
  },
  {
    "ruleId": "perfectionist/sort-switch-case",
    "severity": 2,
    "message": "Expected \"decrement\" to come before \"increment\".",
    "line": 391,
    "column": 5,
    "nodeType": "SwitchCase",
    "messageId": "unexpectedSwitchCaseOrder",
    "endLine": 392,
    "endColumn": 62,
    "fix": {
      "range": [
        19042,
        19197
      ],
      "text": "case \"decrement\":\n      return { count: state.count - Number(action.payload) };\n    case \"increment\":\n      return { count: state.count + action.payload };"
    }
  },
  {
    "ruleId": "unicorn/error-message",
    "severity": 2,
    "message": "Pass a message to the `Error` constructor.",
    "line": 394,
    "column": 13,
    "nodeType": "NewExpression",
    "messageId": "missing-message",
    "endLine": 394,
    "endColumn": 24
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 398,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 398,
    "endColumn": 17
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 403,
    "column": 7,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 405,
    "endColumn": 16
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"payload\" to come before \"type\".",
    "line": 403,
    "column": 60,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 403,
    "endColumn": 72,
    "fix": {
      "range": [
        19412,
        19443
      ],
      "text": "payload: \"5\", type: \"decrement\""
    }
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 406,
    "column": 7,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 408,
    "endColumn": 16
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"payload\" to come before \"type\".",
    "line": 406,
    "column": 60,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 406,
    "endColumn": 70,
    "fix": {
      "range": [
        19515,
        19544
      ],
      "text": "payload: 5, type: \"increment\""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '(' expected.",
    "line": 427,
    "column": 23
  },
  {
    "ruleId": "@eslint-react/web-api/no-leaked-timeout",
    "severity": 1,
    "message": "A 'setTimeout' must be assigned to a variable for proper cleanup.",
    "line": 442,
    "column": 7,
    "nodeType": "CallExpression",
    "messageId": "noLeakedTimeoutNoTimeoutId",
    "endLine": 444,
    "endColumn": 18
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 457,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 468,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 457,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 457,
    "endColumn": 23
  },
  {
    "ruleId": "@eslint-react/web-api/no-leaked-timeout",
    "severity": 1,
    "message": "A 'setTimeout' must be assigned to a variable for proper cleanup.",
    "line": 461,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "noLeakedTimeoutNoTimeoutId",
    "endLine": 463,
    "endColumn": 16
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 481,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 481,
    "endColumn": 13
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 490,
    "column": 26,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 490,
    "endColumn": 64,
    "fix": {
      "range": [
        23291,
        23329
      ],
      "text": "{throw Error(\"divRef is not assigned\");}"
    }
  },
  {
    "ruleId": "unicorn/throw-new-error",
    "severity": 2,
    "message": "Use `new` when creating an error.",
    "line": 490,
    "column": 32,
    "nodeType": "CallExpression",
    "messageId": "throw-new-error",
    "endLine": 490,
    "endColumn": 63,
    "fix": {
      "range": [
        23297,
        23297
      ],
      "text": "new "
    }
  },
  {
    "ruleId": "unicorn/new-for-builtins",
    "severity": 2,
    "message": "Use `new Error()` instead of `Error()`.",
    "line": 490,
    "column": 32,
    "nodeType": "CallExpression",
    "messageId": "enforce",
    "endLine": 490,
    "endColumn": 63,
    "fix": {
      "range": [
        23297,
        23297
      ],
      "text": "new "
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 504,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 507,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useRef\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 504,
    "column": 16,
    "nodeType": "Identifier",
    "endLine": 504,
    "endColumn": 22
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Expression expected.",
    "line": 531,
    "column": 41
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 553,
    "column": 13,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 553,
    "endColumn": 28,
    "fix": {
      "range": [
        27580,
        27628
      ],
      "text": "interface CountdownHandle {\n  start: () => void;\n}"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 557,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 557,
    "endColumn": 20,
    "fix": {
      "range": [
        27630,
        27655
      ],
      "text": "interface CountdownProps {}"
    }
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
    "line": 557,
    "column": 23,
    "nodeType": "TSTypeLiteral",
    "messageId": "noEmptyObject",
    "endLine": 557,
    "endColumn": 25,
    "suggestions": [
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            163,
            165
          ],
          "text": "object"
        },
        "desc": "Replace `{}` with `object`."
      },
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            163,
            165
          ],
          "text": "unknown"
        },
        "desc": "Replace `{}` with `unknown`."
      }
    ]
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 559,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 559,
    "endColumn": 16
  },
  {
    "ruleId": "@eslint-react/no-forward-ref",
    "severity": 1,
    "message": "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.",
    "line": 559,
    "column": 19,
    "nodeType": "CallExpression",
    "messageId": "noForwardRef",
    "endLine": 568,
    "endColumn": 3,
    "fix": {
      "range": [
        27675,
        27896
      ],
      "text": "({ ref, ...props }: CountdownProps & { ref: React.RefObject<CountdownHandle> }) => {\n  useImperativeHandle(ref, () => ({\n    // start() has type inference here\n    start() {\n      alert(\"Start\");\n    },\n  }));\n\n  return <div>Countdown</div>;\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-missing-component-display-name",
    "severity": 2,
    "message": "Add missing 'displayName' for component.",
    "line": 559,
    "column": 63,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noMissingComponentDisplayName",
    "endLine": 568,
    "endColumn": 2
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \"CountdownHandle\" are only used as type.",
    "line": 574,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 574,
    "endColumn": 62,
    "fix": {
      "range": [
        27977,
        27992
      ],
      "text": "type CountdownHandle"
    }
  },
  {
    "ruleId": "import-x/extensions",
    "severity": 2,
    "message": "Unexpected use of file extension \"tsx\" for \"./Countdown.tsx\"",
    "line": 574,
    "column": 44,
    "nodeType": "Literal",
    "messageId": "unexpected",
    "endLine": 574,
    "endColumn": 61
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 576,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 576,
    "endColumn": 13
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 599,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 609,
    "endColumn": 1
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 603,
    "column": 9,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 606,
    "endColumn": 4
  },
  {
    "ruleId": "promise/prefer-await-to-then",
    "severity": 2,
    "message": "Prefer await to then()/catch()/finally().",
    "line": 605,
    "column": 21,
    "nodeType": "Identifier",
    "messageId": "preferAwaitToCallback",
    "endLine": 605,
    "endColumn": 28
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 621,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 634,
    "endColumn": 1
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 625,
    "column": 9,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 628,
    "endColumn": 4
  },
  {
    "ruleId": "promise/prefer-await-to-then",
    "severity": 2,
    "message": "Prefer await to then()/catch()/finally().",
    "line": 627,
    "column": 21,
    "nodeType": "Identifier",
    "messageId": "preferAwaitToCallback",
    "endLine": 627,
    "endColumn": 28
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 639,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 654,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 645,
    "column": 38,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 645,
    "endColumn": 40
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 651,
    "column": 38,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 651,
    "endColumn": 40
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 684,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 684,
    "endColumn": 13,
    "fix": {
      "range": [
        31755,
        31827
      ],
      "text": "interface MyProps {\n  // using `interface` is also ok\n  message: string;\n}"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 688,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 688,
    "endColumn": 13,
    "fix": {
      "range": [
        31828,
        31877
      ],
      "text": "interface MyState {\n  count: number; // like this\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 691,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 703,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 727,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 733,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 727,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 727,
    "endColumn": 13,
    "fix": {
      "range": [
        33610,
        33657
      ],
      "text": "interface MyProps {\n  readonly message: string;\n}"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 730,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 730,
    "endColumn": 13,
    "fix": {
      "range": [
        33658,
        33703
      ],
      "text": "interface MyState {\n  readonly count: number;\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 742,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 757,
    "endColumn": 2
  },
  {
    "ruleId": "jsx-a11y/click-events-have-key-events",
    "severity": 2,
    "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
    "line": 746,
    "column": 7,
    "nodeType": "JSXOpeningElement",
    "endLine": 746,
    "endColumn": 46
  },
  {
    "ruleId": "jsx-a11y/no-static-element-interactions",
    "severity": 2,
    "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
    "line": 746,
    "column": 7,
    "nodeType": "JSXOpeningElement",
    "endLine": 746,
    "endColumn": 46
  },
  {
    "ruleId": "perfectionist/sort-classes",
    "severity": 2,
    "message": "Expected \"increment\" to come before \"render\".",
    "line": 751,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "unexpectedClassesOrder",
    "endLine": 756,
    "endColumn": 5,
    "fix": {
      "range": [
        34115,
        34384
      ],
      "text": "increment = (amt: number) => {\n    // like this\n    this.setState((state) => ({\n      count: state.count + amt,\n    }));\n  };\n  render() {\n    return (\n      <div onClick={() => this.increment(1)}>\n        {this.props.message} {this.state.count}\n      </div>\n    );\n  }"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 765,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 779,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 795,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 803,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 795,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 802,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"null\" to come before \"Partial<State>\".",
    "line": 799,
    "column": 23,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 799,
    "endColumn": 27,
    "fix": {
      "range": [
        36502,
        36523
      ],
      "text": "null | Partial<State>"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 808,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 814,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 808,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 813,
    "endColumn": 2
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty static method 'getDerivedStateFromProps'.",
    "line": 812,
    "column": 49,
    "nodeType": "FunctionExpression",
    "messageId": "unexpected",
    "endLine": 812,
    "endColumn": 51
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 819,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 846,
    "endColumn": 1
  },
  {
    "ruleId": "sonarjs/redundant-type-aliases",
    "severity": 2,
    "message": "Remove this redundant type alias and replace its occurrences with \"any\".",
    "line": 819,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "redundantTypeAlias",
    "endLine": 819,
    "endColumn": 17
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"derivedState\" to come before \"savedPropA\".",
    "line": 830,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 830,
    "endColumn": 30,
    "fix": {
      "range": [
        37114,
        37193
      ],
      "text": "derivedState: props.propA,\n    savedPropA: props.propA, // save for memoization"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 833,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 845,
    "endColumn": 2
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 842,
    "column": 49,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 842,
    "endColumn": 61,
    "fix": {
      "range": [
        37515,
        37527
      ],
      "text": "{return null;}"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Expression expected.",
    "line": 868,
    "column": 43
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 874,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 874,
    "endColumn": 16,
    "fix": {
      "range": [
        39012,
        39050
      ],
      "text": "interface GreetProps {\n  age?: number;\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 878,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 883,
    "endColumn": 2
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'el' is never reassigned. Use 'const' instead.",
    "line": 885,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 885,
    "endColumn": 7,
    "fix": {
      "range": [
        39171,
        39198
      ],
      "text": "const el = <Greet age={3} />;"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 898,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 908,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 904,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 904,
    "endColumn": 12
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 904,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 906,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 907,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noDefaultProps",
    "endLine": 907,
    "endColumn": 19
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \"{ age: number;\n}\" to come before \"typeof Greet.defaultProps\".",
    "line": 915,
    "column": 47,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 917,
    "endColumn": 2,
    "fix": {
      "range": [
        40523,
        40569
      ],
      "text": "{\n  age: number;\n} & typeof Greet.defaultProps"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 919,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 924,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 920,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 922,
    "endColumn": 5
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 920,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 920,
    "endColumn": 22,
    "suggestions": [
      {
        "fix": {
          "range": [
            125,
            125
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \"readonly\" keyword"
      }
    ]
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'el' is never reassigned. Use 'const' instead.",
    "line": 927,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 927,
    "endColumn": 7,
    "fix": {
      "range": [
        40722,
        40749
      ],
      "text": "const el = <Greet age={3} />;"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 939,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 952,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 939,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 939,
    "endColumn": 16,
    "fix": {
      "range": [
        41547,
        41584
      ],
      "text": "interface GreetProps {\n  age: number;\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 943,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 945,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 944,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 944,
    "endColumn": 37
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 944,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 944,
    "endColumn": 22,
    "suggestions": [
      {
        "fix": {
          "range": [
            140,
            140
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \"readonly\" keyword"
      }
    ]
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 973,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 973,
    "endColumn": 21
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 973,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 975,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"age\" to come before \"name\".",
    "line": 973,
    "column": 33,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 973,
    "endColumn": 36,
    "fix": {
      "range": [
        42296,
        42305
      ],
      "text": "age, name"
    }
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 976,
    "column": 16,
    "nodeType": "Identifier",
    "messageId": "noDefaultProps",
    "endLine": 976,
    "endColumn": 28
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 978,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 978,
    "endColumn": 20
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 978,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 980,
    "endColumn": 2
  },
  {
    "ruleId": "jsx-a11y/heading-has-content",
    "severity": 2,
    "message": "Headings must have content and the content must be accessible by a screen reader.",
    "line": 979,
    "column": 10,
    "nodeType": "JSXOpeningElement",
    "endLine": 979,
    "endColumn": 16
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"React.Component<infer P>\" to come before \"React.ComponentType<infer P>\".",
    "line": 993,
    "column": 5,
    "nodeType": "TSTypeReference",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 993,
    "endColumn": 29,
    "fix": {
      "range": [
        42818,
        42875
      ],
      "text": "React.Component<infer P>\n  | React.ComponentType<infer P>"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 997,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 997,
    "endColumn": 20
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 997,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 999,
    "endColumn": 2
  },
  {
    "ruleId": "jsx-a11y/heading-has-content",
    "severity": 2,
    "message": "Headings must have content and the content must be accessible by a screen reader.",
    "line": 998,
    "column": 10,
    "nodeType": "JSXOpeningElement",
    "endLine": 998,
    "endColumn": 16
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \"{ /* additional props here */\n}\" to come before \"Required<typeof MyComponent.defaultProps>\".",
    "line": 1028,
    "column": 58,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 1030,
    "endColumn": 2,
    "fix": {
      "range": [
        44399,
        44476
      ],
      "text": "{\n  /* additional props here */\n} & Required<typeof MyComponent.defaultProps>"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1032,
    "column": 8,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1036,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 1033,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 1035,
    "endColumn": 5
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 1033,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 1033,
    "endColumn": 22,
    "suggestions": [
      {
        "fix": {
          "range": [
            159,
            159
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \"readonly\" keyword"
      }
    ]
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1047,
    "column": 8,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1051,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 1048,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 1050,
    "endColumn": 5
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 1048,
    "column": 17,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 1048,
    "endColumn": 29,
    "suggestions": [
      {
        "fix": {
          "range": [
            165,
            165
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \"readonly\" keyword"
      }
    ]
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1075,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1117,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 1075,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1075,
    "endColumn": 14,
    "fix": {
      "range": [
        45959,
        47680
      ],
      "text": "interface AppProps {\n  message: string;\n  count: number;\n  disabled: boolean;\n  /** array of a type! */\n  names: string[];\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n}"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"count\" to come before \"message\".",
    "line": 1077,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1077,
    "endColumn": 17,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  disabled: boolean;\n  message: string;\n  /** array of a type! */\n  names: string[];\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"\"success\"\" to come before \"\"waiting\"\".",
    "line": 1082,
    "column": 23,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1082,
    "endColumn": 32,
    "fix": {
      "range": [
        46186,
        46207
      ],
      "text": "\"success\" | \"waiting\""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"obj\" to come before \"status\".",
    "line": 1084,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1087,
    "endColumn": 5,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  disabled: boolean;\n  message: string;\n  /** array of a type! */\n  names: string[];\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"obj2\" to come before \"objArr\".",
    "line": 1094,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1094,
    "endColumn": 16,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  disabled: boolean;\n  message: string;\n  /** array of a type! */\n  names: string[];\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";"
    }
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
    "line": 1096,
    "column": 9,
    "nodeType": "TSTypeLiteral",
    "messageId": "noEmptyObject",
    "endLine": 1096,
    "endColumn": 11,
    "suggestions": [
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            707,
            709
          ],
          "text": "object"
        },
        "desc": "Replace `{}` with `object`."
      },
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            707,
            709
          ],
          "text": "unknown"
        },
        "desc": "Replace `{}` with `unknown`."
      }
    ]
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"dict1\" to come before \"obj3\".",
    "line": 1098,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1100,
    "endColumn": 5,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  disabled: boolean;\n  message: string;\n  /** array of a type! */\n  names: string[];\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-indexed-object-style",
    "severity": 2,
    "message": "A record is preferred over an index signature.",
    "line": 1098,
    "column": 10,
    "nodeType": "TSTypeLiteral",
    "messageId": "preferRecord",
    "endLine": 1100,
    "endColumn": 4,
    "fix": {
      "range": [
        46749,
        46785
      ],
      "text": "Record<string, MyTypeHere>"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"onChange\" to come before \"onClick\".",
    "line": 1105,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1105,
    "endColumn": 34,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\n  /** a dict object with any number of properties of the same type */\n  dict1: {\n    [key: string]: MyTypeHere;\n  };\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\n  disabled: boolean;\n  message: string;\n  /** array of a type! */\n  names: string[];\n  /** an object with known properties (but could have more at runtime) */\n  obj: {\n    id: string;\n    title: string;\n  };\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\n  obj2: object;\n  /** an interface with no required properties - (NOT COMMON, except for things like `React.Component<{}, State>`) */\n  obj3: {};\n  /** array of objects! (common) */\n  objArr: {\n    id: string;\n    title: string;\n  }[];\n  /** function with named prop (VERY COMMON) */\n  onChange: (id: number) => void;\n  /** function type syntax that takes an event (VERY COMMON) */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** function that doesn't take or return anything (VERY COMMON) */\n  onClick: () => void;\n  /** alternative function type syntax that takes an event (VERY COMMON) */\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n  /** any function as long as you don't invoke it (not recommended) */\n  onSomething: Function;\n  /** an optional prop (VERY COMMON!) */\n  optional?: OptionalType;\n  /** when passing down the state setter function returned by `useState` to a child component. `number` is an example, swap out with whatever the type of your state */\n  setState: React.Dispatch<React.SetStateAction<number>>;\n  /** string literals to specify exact string values, with a union type to join them together */\n  status: \"waiting\" | \"success\";"
    }
  },
  {
    "ruleId": "@typescript-eslint/method-signature-style",
    "severity": 2,
    "message": "Shorthand method signature is forbidden. Use a function property instead.",
    "line": 1109,
    "column": 3,
    "nodeType": "TSMethodSignature",
    "messageId": "errorMethod",
    "endLine": 1109,
    "endColumn": 61,
    "fix": {
      "range": [
        47229,
        47287
      ],
      "text": "onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;"
    }
  },
  {
    "ruleId": "@typescript-eslint/no-unsafe-function-type",
    "severity": 2,
    "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
    "line": 1111,
    "column": 16,
    "nodeType": "Identifier",
    "messageId": "bannedFunctionType",
    "endLine": 1111,
    "endColumn": 24
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
    "line": 1130,
    "column": 11,
    "nodeType": "Identifier",
    "messageId": "noEmptyInterface",
    "endLine": 1130,
    "endColumn": 29,
    "suggestions": [
      {
        "messageId": "replaceEmptyInterface",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            0,
            31
          ],
          "text": "type AnyNonNullishValue = object"
        },
        "desc": "Replace empty interface with `object`."
      },
      {
        "messageId": "replaceEmptyInterface",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            0,
            31
          ],
          "text": "type AnyNonNullishValue = unknown"
        },
        "desc": "Replace empty interface with `unknown`."
      }
    ]
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1151,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1160,
    "endColumn": 1
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \"onChange\" to come before \"style\".",
    "line": 1155,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 1155,
    "endColumn": 55,
    "fix": {
      "range": [
        49067,
        49675
      ],
      "text": "onChange?: React.FormEventHandler<HTMLInputElement>; // form events! the generic parameter is the type of event.target\n  //  more info: https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase/#wrappingmirroring\n  props: Props & React.ComponentPropsWithoutRef<\"button\">; // to impersonate all the props of a button element and explicitly not forwarding its ref\n  props2: Props & React.ComponentPropsWithRef<MyButtonWithForwardRef>; // to impersonate all the props of MyButtonForwardedRef and explicitly forwarding its ref\n  style?: React.CSSProperties; // to pass through style props"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 1168,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1168,
    "endColumn": 11,
    "fix": {
      "range": [
        49935,
        49982
      ],
      "text": "interface Props {\n  children?: React.ReactNode;\n}"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1172,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1172,
    "endColumn": 14
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1175,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1175,
    "endColumn": 13
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1265,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1273,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1265,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1272,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"null\" to come before \"Partial<State>\".",
    "line": 1269,
    "column": 23,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1269,
    "endColumn": 27,
    "fix": {
      "range": [
        55111,
        55132
      ],
      "text": "null | Partial<State>"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1278,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1284,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1278,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1283,
    "endColumn": 2
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty static method 'getDerivedStateFromProps'.",
    "line": 1282,
    "column": 49,
    "nodeType": "FunctionExpression",
    "messageId": "unexpected",
    "endLine": 1282,
    "endColumn": 51
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1289,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1316,
    "endColumn": 1
  },
  {
    "ruleId": "sonarjs/redundant-type-aliases",
    "severity": 2,
    "message": "Remove this redundant type alias and replace its occurrences with \"any\".",
    "line": 1289,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "redundantTypeAlias",
    "endLine": 1289,
    "endColumn": 17
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"derivedState\" to come before \"savedPropA\".",
    "line": 1300,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 1300,
    "endColumn": 30,
    "fix": {
      "range": [
        55723,
        55802
      ],
      "text": "derivedState: props.propA,\n    savedPropA: props.propA, // save for memoization"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1303,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1315,
    "endColumn": 2
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 1312,
    "column": 49,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 1312,
    "endColumn": 61,
    "fix": {
      "range": [
        56124,
        56136
      ],
      "text": "{return null;}"
    }
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 1330,
    "column": 3,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 1334,
    "endColumn": 5
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 1341,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1341,
    "endColumn": 11,
    "fix": {
      "range": [
        57712,
        57745
      ],
      "text": "interface State {\n  text: string;\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1344,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1360,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"onChange\" to come before \"value\".",
    "line": 1356,
    "column": 52,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1356,
    "endColumn": 76,
    "fix": {
      "range": [
        58037,
        58097
      ],
      "text": "onChange={this.onChange} type=\"text\" value={this.state.text}"
    }
  },
  {
    "ruleId": "sonarjs/no-labels",
    "severity": 2,
    "message": "Refactor the code to remove this label and the need for it.",
    "line": 1369,
    "column": 3,
    "nodeType": null,
    "messageId": "removeLabel",
    "endLine": 1369,
    "endColumn": 11
  },
  {
    "ruleId": "sonarjs/label-position",
    "severity": 2,
    "message": "Remove this \"onChange\" label.",
    "line": 1369,
    "column": 3,
    "nodeType": "Identifier",
    "messageId": "removeLabel",
    "endLine": 1369,
    "endColumn": 11
  },
  {
    "ruleId": "no-unused-labels",
    "severity": 2,
    "message": "'onChange:' is defined but never used.",
    "line": 1369,
    "column": 3,
    "nodeType": "Identifier",
    "messageId": "unused",
    "endLine": 1369,
    "endColumn": 11,
    "fix": {
      "range": [
        58897,
        58907
      ],
      "text": ""
    }
  },
  {
    "ruleId": "no-labels",
    "severity": 2,
    "message": "Unexpected labeled statement.",
    "line": 1369,
    "column": 3,
    "nodeType": "LabeledStatement",
    "messageId": "unexpectedLabel",
    "endLine": 1371,
    "endColumn": 4
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1369,
    "column": 3,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1372,
    "endColumn": 1
  },
  {
    "ruleId": "no-invalid-this",
    "severity": 2,
    "message": "Unexpected 'this'.",
    "line": 1370,
    "column": 5,
    "nodeType": "ThisExpression",
    "messageId": "unexpectedThis",
    "endLine": 1370,
    "endColumn": 9
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"onSubmit\" to come before \"ref\".",
    "line": 1389,
    "column": 3,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1398,
    "endColumn": 5,
    "fix": {
      "range": [
        59847,
        60183
      ],
      "text": "onSubmit={(e: React.SyntheticEvent) => {\n    e.preventDefault();\n    const target = e.target as typeof e.target & {\n      email: { value: string };\n      password: { value: string };\n    };\n    const email = target.email.value; // typechecks!\n    const password = target.password.value; // typechecks!\n    // etc...\n  }}\n  ref={formRef}"
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \"{ email: { value: string }; password: { value: string }; }\" to come before \"typeof e.target\".",
    "line": 1391,
    "column": 50,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 1394,
    "endColumn": 6,
    "fix": {
      "range": [
        59959,
        60051
      ],
      "text": "{\n      email: { value: string };\n      password: { value: string };\n    } & typeof e.target"
    }
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'email' variable.",
    "line": 1395,
    "column": 11,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1395,
    "endColumn": 16
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \"email\".",
    "line": 1395,
    "column": 11,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1395,
    "endColumn": 16
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'password' variable.",
    "line": 1396,
    "column": 11,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1396,
    "endColumn": 19
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \"password\".",
    "line": 1396,
    "column": 11,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1396,
    "endColumn": 19
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"name\" to come before \"type\".",
    "line": 1403,
    "column": 27,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1403,
    "endColumn": 39,
    "fix": {
      "range": [
        60232,
        60257
      ],
      "text": "name=\"email\" type=\"email\""
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"name\" to come before \"type\".",
    "line": 1409,
    "column": 30,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1409,
    "endColumn": 45,
    "fix": {
      "range": [
        60332,
        60363
      ],
      "text": "name=\"password\" type=\"password\""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1467,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1472,
    "endColumn": 1
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"\"dark\"\" to come before \"\"light\"\".",
    "line": 1469,
    "column": 35,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1469,
    "endColumn": 41,
    "fix": {
      "range": [
        67284,
        67300
      ],
      "text": "\"dark\" | \"light\""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1471,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1471,
    "endColumn": 19
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1479,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1479,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1479,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1487,
    "endColumn": 2
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'setTheme' variable.",
    "line": 1480,
    "column": 17,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1480,
    "endColumn": 25
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \"setTheme\".",
    "line": 1480,
    "column": 17,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1480,
    "endColumn": 25
  },
  {
    "ruleId": "@eslint-react/no-context-provider",
    "severity": 1,
    "message": "In React 19, you can render '<Context>' as a provider instead of '<Context.Provider>'.",
    "line": 1483,
    "column": 5,
    "nodeType": "JSXElement",
    "messageId": "noContextProvider",
    "endLine": 1485,
    "endColumn": 29,
    "fix": {
      "range": [
        67583,
        67669
      ],
      "text": "ThemeContext value={theme}>\n      <MyComponent />\n    </ThemeContext"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1495,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1495,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1495,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1499,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1507,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1514,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1513,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1513,
    "endColumn": 25
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1517,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1517,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1517,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1527,
    "endColumn": 2
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'setCurrentUser' variable.",
    "line": 1518,
    "column": 23,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1518,
    "endColumn": 37
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \"setCurrentUser\".",
    "line": 1518,
    "column": 23,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1518,
    "endColumn": 37
  },
  {
    "ruleId": "@eslint-react/no-context-provider",
    "severity": 1,
    "message": "In React 19, you can render '<Context>' as a provider instead of '<Context.Provider>'.",
    "line": 1523,
    "column": 5,
    "nodeType": "JSXElement",
    "messageId": "noContextProvider",
    "endLine": 1525,
    "endColumn": 35,
    "fix": {
      "range": [
        68359,
        68463
      ],
      "text": "CurrentUserContext value={currentUser}>\n      <MyComponent />\n    </CurrentUserContext"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1535,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1535,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1535,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1539,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1545,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1564,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1551,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1551,
    "endColumn": 25
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1553,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1563,
    "endColumn": 2
  },
  {
    "ruleId": "sonarjs/unused-import",
    "severity": 2,
    "message": "Remove this unused import of 'useContext'.",
    "line": 1569,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "removeUnusedImport",
    "endLine": 1569,
    "endColumn": 20,
    "suggestions": [
      {
        "messageId": "suggestRemoveWholeStatement",
        "fix": {
          "range": [
            0,
            35
          ],
          "text": ""
        },
        "desc": "Remove this import statement"
      }
    ]
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1571,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1571,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1571,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1575,
    "endColumn": 2
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1585,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1585,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1585,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1589,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1595,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1598,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1595,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1595,
    "endColumn": 25
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1603,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1604,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1603,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1603,
    "endColumn": 25
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1621,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1626,
    "endColumn": 2
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \"ReactNode\" are only used as type.",
    "line": 1632,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1632,
    "endColumn": 47,
    "fix": {
      "range": [
        71334,
        71343
      ],
      "text": "type ReactNode"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"\"button\"\" to come before \"\"submit\"\".",
    "line": 1636,
    "column": 20,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1636,
    "endColumn": 28,
    "fix": {
      "range": [
        71411,
        71430
      ],
      "text": "\"button\" | \"submit\""
    }
  },
  {
    "ruleId": "@eslint-react/no-forward-ref",
    "severity": 1,
    "message": "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.",
    "line": 1640,
    "column": 28,
    "nodeType": "CallExpression",
    "messageId": "noForwardRef",
    "endLine": 1644,
    "endColumn": 3,
    "fix": {
      "range": [
        71499,
        71638
      ],
      "text": "({ ref, ...props }: Props & { ref: React.RefObject<Ref> }) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n)"
    }
  },
  {
    "ruleId": "@eslint-react/no-missing-component-display-name",
    "severity": 2,
    "message": "Add missing 'displayName' for component.",
    "line": 1640,
    "column": 51,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noMissingComponentDisplayName",
    "endLine": 1644,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"className\" to come before \"ref\".",
    "line": 1641,
    "column": 21,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1641,
    "endColumn": 44,
    "fix": {
      "range": [
        71550,
        71583
      ],
      "text": "className=\"MyClassName\" ref={ref}"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \"ReactNode\" and \"Ref\" are only used as type.",
    "line": 1653,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1653,
    "endColumn": 52,
    "fix": {
      "range": [
        72023,
        72037
      ],
      "text": "type ReactNode, type Ref"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"\"button\"\" to come before \"\"submit\"\".",
    "line": 1657,
    "column": 20,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1657,
    "endColumn": 28,
    "fix": {
      "range": [
        72105,
        72124
      ],
      "text": "\"button\" | \"submit\""
    }
  },
  {
    "ruleId": "@eslint-react/no-forward-ref",
    "severity": 1,
    "message": "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.",
    "line": 1660,
    "column": 28,
    "nodeType": "CallExpression",
    "messageId": "noForwardRef",
    "endLine": 1669,
    "endColumn": 2,
    "fix": {
      "range": [
        72156,
        72351
      ],
      "text": "(\n    { ref, ...props } // <-- here!\n  ) => (\n    <button ref={ref} className=\"MyClassName\" type={props.type}>\n      {props.children}\n    </button>\n  )"
    }
  },
  {
    "ruleId": "@eslint-react/no-missing-component-display-name",
    "severity": 2,
    "message": "Add missing 'displayName' for component.",
    "line": 1661,
    "column": 3,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noMissingComponentDisplayName",
    "endLine": 1668,
    "endColumn": 4
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"className\" to come before \"ref\".",
    "line": 1665,
    "column": 23,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1665,
    "endColumn": 46,
    "fix": {
      "range": [
        72256,
        72289
      ],
      "text": "className=\"MyClassName\" ref={ref}"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '>' expected.",
    "line": 1691,
    "column": 8
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '>' expected.",
    "line": 1726,
    "column": 8
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1757,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1775,
    "endColumn": 1
  },
  {
    "ruleId": "unicorn/prefer-query-selector",
    "severity": 2,
    "message": "Prefer `.querySelector()` over `.getElementById()`.",
    "line": 1757,
    "column": 28,
    "nodeType": "Identifier",
    "messageId": "prefer-query-selector",
    "endLine": 1757,
    "endColumn": 42,
    "fix": {
      "range": [
        74481,
        74508
      ],
      "text": "querySelector(\"#modal-root\""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1760,
    "column": 8,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1774,
    "endColumn": 2
  },
  {
    "ruleId": "unicorn/prefer-dom-node-append",
    "severity": 2,
    "message": "Prefer `Node#append()` over `Node#appendChild()`.",
    "line": 1764,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "prefer-dom-node-append",
    "endLine": 1764,
    "endColumn": 35,
    "fix": {
      "range": [
        74756,
        74767
      ],
      "text": "append"
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-remove",
    "severity": 2,
    "message": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
    "line": 1768,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "error",
    "endLine": 1768,
    "endColumn": 35,
    "fix": {
      "range": [
        74814,
        74844
      ],
      "text": "this.el.remove()"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1785,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1809,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \"ReactNode\" are only used as type.",
    "line": 1785,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1785,
    "endColumn": 54,
    "fix": {
      "range": [
        75642,
        75651
      ],
      "text": "type ReactNode"
    }
  },
  {
    "ruleId": "perfectionist/sort-named-imports",
    "severity": 2,
    "message": "Expected \"ReactNode\" to come before \"useRef\".",
    "line": 1785,
    "column": 29,
    "nodeType": "ImportSpecifier",
    "messageId": "unexpectedNamedImportsOrder",
    "endLine": 1785,
    "endColumn": 38,
    "fix": {
      "range": [
        75623,
        75651
      ],
      "text": "ReactNode, useEffect, useRef"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 1790,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1790,
    "endColumn": 16,
    "fix": {
      "range": [
        75784,
        75829
      ],
      "text": "interface ModalProps {\n  children: ReactNode;\n}"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1794,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1794,
    "endColumn": 15
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 1797,
    "column": 23,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 1797,
    "endColumn": 69,
    "fix": {
      "range": [
        75993,
        76039
      ],
      "text": "{elRef.current = document.createElement(\"div\");}"
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-append",
    "severity": 2,
    "message": "Prefer `Node#append()` over `Node#appendChild()`.",
    "line": 1801,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "prefer-dom-node-append",
    "endLine": 1801,
    "endColumn": 30,
    "fix": {
      "range": [
        76158,
        76169
      ],
      "text": "append"
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-remove",
    "severity": 2,
    "message": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
    "line": 1803,
    "column": 7,
    "nodeType": "CallExpression",
    "messageId": "error",
    "endLine": 1803,
    "endColumn": 32,
    "fix": {
      "range": [
        76200,
        76225
      ],
      "text": "el.remove()"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1820,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1820,
    "endColumn": 13
  },
  {
    "ruleId": "@eslint-react/no-comment-textnodes",
    "severity": 1,
    "message": "Possible misused comment in text node. Comments inside children section of tag should be placed inside braces.",
    "line": 1824,
    "column": 10,
    "nodeType": "JSXText",
    "messageId": "noCommentTextnodes",
    "endLine": 1826,
    "endColumn": 7
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"height\" to come before \"placeItems\".",
    "line": 1833,
    "column": 15,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 1833,
    "endColumn": 30,
    "fix": {
      "range": [
        78020,
        78177
      ],
      "text": "background: \"rgba(0,0,0,0.1)\",\n              display: \"grid\",\n              height: \"100vh\",\n              placeItems: \"center\",\n              width: \"100vh\""
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"background\" to come before \"width\".",
    "line": 1835,
    "column": 15,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 1835,
    "endColumn": 44,
    "fix": {
      "range": [
        78020,
        78177
      ],
      "text": "background: \"rgba(0,0,0,0.1)\",\n              display: \"grid\",\n              height: \"100vh\",\n              placeItems: \"center\",\n              width: \"100vh\""
    }
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 1840,
    "column": 13,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 1845,
    "endColumn": 22
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \"onClick\" to come before \"style\".",
    "line": 1842,
    "column": 15,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1842,
    "endColumn": 50,
    "fix": {
      "range": [
        78296,
        78381
      ],
      "text": "onClick={() => setShowModal(false)}\n              style={{ background: \"papyawhip\" }}"
    }
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 1849,
    "column": 7,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 1849,
    "endColumn": 69
  },
  {
    "ruleId": "@eslint-react/no-comment-textnodes",
    "severity": 1,
    "message": "Possible misused comment in text node. Comments inside children section of tag should be placed inside braces.",
    "line": 1849,
    "column": 69,
    "nodeType": "JSXText",
    "messageId": "noCommentTextnodes",
    "endLine": 1851,
    "endColumn": 5
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \"ErrorInfo\" and \"ReactNode\" are only used as type.",
    "line": 1880,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1880,
    "endColumn": 64,
    "fix": {
      "range": [
        79405,
        79425
      ],
      "text": "type ErrorInfo, type ReactNode"
    }
  },
  {
    "ruleId": "@typescript-eslint/class-methods-use-this",
    "severity": 2,
    "message": "Expected 'this' to be used by class method 'componentDidCatch'.",
    "line": 1900,
    "column": 3,
    "nodeType": "FunctionExpression",
    "messageId": "missingThis",
    "endLine": 1900,
    "endColumn": 27
  },
  {
    "ruleId": "vue/require-direct-export",
    "severity": 2,
    "message": "Expected the component literal to be directly exported.",
    "line": 1913,
    "column": 1,
    "nodeType": "ExportDefaultDeclaration",
    "messageId": "expectedDirectExport",
    "endLine": 1913,
    "endColumn": 30
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1946,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1963,
    "endColumn": 2
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
    "line": 1947,
    "column": 3,
    "nodeType": "TSTypeLiteral",
    "messageId": "noEmptyObject",
    "endLine": 1947,
    "endColumn": 5,
    "suggestions": [
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            37,
            39
          ],
          "text": "object"
        },
        "desc": "Replace `{}` with `object`."
      },
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            37,
            39
          ],
          "text": "unknown"
        },
        "desc": "Replace `{}` with `unknown`."
      }
    ]
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"null\" to come before \"number\".",
    "line": 1949,
    "column": 21,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1949,
    "endColumn": 25,
    "fix": {
      "range": [
        81401,
        81414
      ],
      "text": "null | number"
    }
  },
  {
    "ruleId": "jsx-a11y/click-events-have-key-events",
    "severity": 2,
    "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
    "line": 1956,
    "column": 12,
    "nodeType": "JSXOpeningElement",
    "endLine": 1956,
    "endColumn": 51
  },
  {
    "ruleId": "jsx-a11y/no-static-element-interactions",
    "severity": 2,
    "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
    "line": 1956,
    "column": 12,
    "nodeType": "JSXOpeningElement",
    "endLine": 1956,
    "endColumn": 51
  },
  {
    "ruleId": "perfectionist/sort-classes",
    "severity": 2,
    "message": "Expected \"increment\" to come before \"render\".",
    "line": 1958,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "unexpectedClassesOrder",
    "endLine": 1962,
    "endColumn": 5,
    "fix": {
      "range": [
        81473,
        81681
      ],
      "text": "increment = (amt: number) => {\n    this.setState((state) => ({\n      count: (state.count || 0) + amt,\n    }));\n  };\n  render() {\n    return <div onClick={() => this.increment(1)}>{this.state.count}</div>;\n  }"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 2005,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 2012,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2026,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2027,
    "endColumn": 1
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \"\"bottom\"\" to come before \"\"top\"\".",
    "line": 2026,
    "column": 59,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 2026,
    "endColumn": 67,
    "fix": {
      "range": [
        85352,
        85387
      ],
      "text": "\"bottom\" | \"left\" | \"right\" | \"top\""
    }
  },
  {
    "ruleId": "no-restricted-syntax",
    "severity": 2,
    "message": "Don't declare enums",
    "line": 2032,
    "column": 8,
    "nodeType": "TSEnumDeclaration",
    "messageId": "restrictedSyntax",
    "endLine": 2036,
    "endColumn": 2
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
    "line": 2032,
    "column": 13,
    "nodeType": "Identifier",
    "messageId": "namedExport",
    "endLine": 2032,
    "endColumn": 24
  },
  {
    "ruleId": "perfectionist/sort-enums",
    "severity": 2,
    "message": "Expected \"large\" to come before \"small\".",
    "line": 2035,
    "column": 3,
    "nodeType": "TSEnumMember",
    "messageId": "unexpectedEnumsOrder",
    "endLine": 2035,
    "endColumn": 18,
    "fix": {
      "range": [
        85584,
        85618
      ],
      "text": "large = \"large\",\n  small = \"small\""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2039,
    "column": 14,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2041,
    "endColumn": 54
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 2049,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 2058,
    "endColumn": 2
  },
  {
    "ruleId": "unicorn/prefer-dom-node-remove",
    "severity": 2,
    "message": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
    "line": 2068,
    "column": 1,
    "nodeType": "CallExpression",
    "messageId": "error",
    "endLine": 2068,
    "endColumn": 41,
    "fix": {
      "range": [
        87018,
        87058
      ],
      "text": "element.remove()"
    }
  },
  {
    "ruleId": "unicorn/prefer-query-selector",
    "severity": 2,
    "message": "Prefer `.querySelector()` over `.getElementById()`.",
    "line": 2069,
    "column": 21,
    "nodeType": "Identifier",
    "messageId": "prefer-query-selector",
    "endLine": 2069,
    "endColumn": 35
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \"{ readonly brand: unique symbol }\" to come before \"string\".",
    "line": 2080,
    "column": 25,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 2080,
    "endColumn": 58,
    "fix": {
      "range": [
        87549,
        87591
      ],
      "text": "{ readonly brand: unique symbol } & string"
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \"{ readonly brand: unique symbol }\" to come before \"string\".",
    "line": 2081,
    "column": 24,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 2081,
    "endColumn": 57,
    "fix": {
      "range": [
        87607,
        87649
      ],
      "text": "{ readonly brand: unique symbol } & string"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2115,
    "column": 14,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2120,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 2119,
    "column": 10,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 2119,
    "endColumn": 53
  },
  {
    "ruleId": "@eslint-react/prefer-destructuring-assignment",
    "severity": 2,
    "message": "Use destructuring assignment for props.",
    "line": 2119,
    "column": 31,
    "nodeType": "MemberExpression",
    "messageId": "preferDestructuringAssignment",
    "endLine": 2119,
    "endColumn": 42
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '{' expected.",
    "line": 2140,
    "column": 0
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"card\" to come before \"suit\".",
    "line": 2164,
    "column": 38,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2164,
    "endColumn": 50,
    "fix": {
      "range": [
        90888,
        90914
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"card\" to come before \"suit\".",
    "line": 2165,
    "column": 47,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2165,
    "endColumn": 59,
    "fix": {
      "range": [
        90961,
        90987
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
    "message": "Type Alias name `pickCard` must match one of the following formats: PascalCase",
    "line": 2175,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "doesNotMatchFormat",
    "endLine": 2175,
    "endColumn": 14
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an `interface` instead of a `type`.",
    "line": 2175,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 2175,
    "endColumn": 14,
    "fix": {
      "range": [
        91404,
        91652
      ],
      "text": "interface pickCard {\n  (x: { suit: string; card: number }[]): number;\n  (x: number): { suit: string; card: number };\n  // no need for combined signature in this form\n  // you can also type static properties of functions here eg `pickCard.wasCalled`\n}"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"card\" to come before \"suit\".",
    "line": 2176,
    "column": 23,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2176,
    "endColumn": 35,
    "fix": {
      "range": [
        91430,
        91456
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \"card\" to come before \"suit\".",
    "line": 2177,
    "column": 32,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2177,
    "endColumn": 44,
    "fix": {
      "range": [
        91488,
        91514
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2194,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2204,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 2194,
    "column": 27,
    "nodeType": "Identifier",
    "endLine": 2194,
    "endColumn": 35
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"bar\" to come before \"foo\".",
    "line": 2196,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2196,
    "endColumn": 9,
    "fix": {
      "range": [
        92393,
        92409
      ],
      "text": "bar: 2,\n  foo: 1"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2199,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2203,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2211,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2223,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 2211,
    "column": 27,
    "nodeType": "Identifier",
    "endLine": 2211,
    "endColumn": 35
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"bar\" to come before \"foo\".",
    "line": 2213,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2213,
    "endColumn": 9,
    "fix": {
      "range": [
        92881,
        92897
      ],
      "text": "bar: 2,\n  foo: 1"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2218,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2219,
    "endColumn": 33
  },
  {
    "ruleId": "import-x/newline-after-import",
    "severity": 2,
    "message": "Expected 1 empty line after import statement not followed by another import.",
    "line": 2239,
    "column": 1,
    "nodeType": null,
    "messageId": "newline",
    "fix": {
      "range": [
        93955,
        93955
      ],
      "text": "\n"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 2242,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 2242,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2242,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2244,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2253,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2259,
    "endColumn": 1
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'baz' is never reassigned. Use 'const' instead.",
    "line": 2281,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 2281,
    "endColumn": 21,
    "fix": {
      "range": [
        95425,
        95487
      ],
      "text": "const baz: SubInstType = {\n  c: 5,\n  d: 6, // type checks ok!\n};"
    }
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'baz2' is never reassigned. Use 'const' instead.",
    "line": 2290,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 2290,
    "endColumn": 23,
    "fix": {
      "range": [
        95704,
        95768
      ],
      "text": "const baz2: SubInstType2 = {\n  c: 5,\n  d: 6, // type checks ok!\n};"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Unexpected character '/' found.",
    "line": 2312,
    "column": 1
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2358,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2363,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/hooks-extra/no-useless-custom-hooks",
    "severity": 1,
    "message": "A custom Hook 'useUntypedHook' should use at least one other hook.",
    "line": 2358,
    "column": 24,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noUselessCustomHooks",
    "endLine": 2363,
    "endColumn": 2
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Property or signature expected.",
    "line": 2371,
    "column": 32
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2385,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2406,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"classNameDark\" to come before \"element\".",
    "line": 2390,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2390,
    "endColumn": 18,
    "fix": {
      "range": [
        100008,
        100182
      ],
      "text": "classNameDark,\n    classNameLight,\n    // -> input props / config props to be exported\n    element,\n    global,\n    onChange,\n    storageKey = \"darkMode\",\n    storageProvider"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"global\" to come before \"storageProvider\".",
    "line": 2395,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2395,
    "endColumn": 11,
    "fix": {
      "range": [
        100008,
        100182
      ],
      "text": "classNameDark,\n    classNameLight,\n    // -> input props / config props to be exported\n    element,\n    global,\n    onChange,\n    storageKey = \"darkMode\",\n    storageProvider"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"enable\" to come before \"value\".",
    "line": 2402,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2402,
    "endColumn": 58,
    "fix": {
      "range": [
        100224,
        100470
      ],
      "text": "disable: useCallback(() => setState(false), [setState]),\n    enable: useCallback(() => setState(true), [setState]),\n    toggle: useCallback(() => setState((current) => !current), [setState]),\n    // -> return props to be exported\n    value: state"
    }
  },
  {
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 1,
    "message": "React Hook useCallback has an unnecessary dependency: 'setState'. Either exclude it or remove the dependency array. Outer scope values like 'setState' aren't valid dependencies because mutating them doesn't re-render the component.",
    "line": 2402,
    "column": 47,
    "nodeType": "ArrayExpression",
    "endLine": 2402,
    "endColumn": 57,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: []",
        "fix": {
          "range": [
            439,
            449
          ],
          "text": "[]"
        }
      }
    ]
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"disable\" to come before \"enable\".",
    "line": 2403,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2403,
    "endColumn": 60,
    "fix": {
      "range": [
        100224,
        100470
      ],
      "text": "disable: useCallback(() => setState(false), [setState]),\n    enable: useCallback(() => setState(true), [setState]),\n    toggle: useCallback(() => setState((current) => !current), [setState]),\n    // -> return props to be exported\n    value: state"
    }
  },
  {
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 1,
    "message": "React Hook useCallback has an unnecessary dependency: 'setState'. Either exclude it or remove the dependency array. Outer scope values like 'setState' aren't valid dependencies because mutating them doesn't re-render the component.",
    "line": 2403,
    "column": 49,
    "nodeType": "ArrayExpression",
    "endLine": 2403,
    "endColumn": 59,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: []",
        "fix": {
          "range": [
            500,
            510
          ],
          "text": "[]"
        }
      }
    ]
  },
  {
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 1,
    "message": "React Hook useCallback has an unnecessary dependency: 'setState'. Either exclude it or remove the dependency array. Outer scope values like 'setState' aren't valid dependencies because mutating them doesn't re-render the component.",
    "line": 2404,
    "column": 64,
    "nodeType": "ArrayExpression",
    "endLine": 2404,
    "endColumn": 74,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: []",
        "fix": {
          "range": [
            576,
            586
          ],
          "text": "[]"
        }
      }
    ]
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \"global\" to come before \"storageProvider\".",
    "line": 2424,
    "column": 5,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 2424,
    "endColumn": 21,
    "fix": {
      "range": [
        101102,
        101484
      ],
      "text": "global?: Window; // The global object. Default = `window`.\n    onChange?: (val?: boolean) => void; // Override the default className handler with a custom callback.\n    storageKey?: string; // Specify the `localStorage` key. Default = \"darkMode\". Set to `null` to disable persistent storage.\n    storageProvider?: WindowLocalStorage; // A storage provider. Default = `localStorage`."
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \"enable\" to come before \"value\".",
    "line": 2431,
    "column": 5,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 2431,
    "endColumn": 24,
    "fix": {
      "range": [
        101589,
        101686
      ],
      "text": "disable: () => void;\n    enable: () => void;\n    toggle: () => void;\n    readonly value: boolean;"
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \"disable\" to come before \"enable\".",
    "line": 2432,
    "column": 5,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 2432,
    "endColumn": 25,
    "fix": {
      "range": [
        101589,
        101686
      ],
      "text": "disable: () => void;\n    enable: () => void;\n    toggle: () => void;\n    readonly value: boolean;"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '}' expected.",
    "line": 2465,
    "column": 0
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: JSX element 'div' has no corresponding closing tag.",
    "line": 2487,
    "column": 3
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2625,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2637,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/method-signature-style",
    "severity": 2,
    "message": "Shorthand method signature is forbidden. Use a function property instead.",
    "line": 2627,
    "column": 5,
    "nodeType": "TSMethodSignature",
    "messageId": "errorMethod",
    "endLine": 2627,
    "endColumn": 32
  },
  {
    "ruleId": "import-x/first",
    "severity": 2,
    "message": "Import in body of module; reorder to top.",
    "line": 2632,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "order",
    "endLine": 2632,
    "endColumn": 47,
    "fix": {
      "range": [
        109983,
        110165
      ],
      "text": "// my-typings.ts\n// MyComponent.tsx\nimport { PlotlyHTMLElement } from \"plotly.js\";\n\ndeclare module \"plotly.js\" {\n  interface PlotlyHTMLElement {\n    removeAllListeners(): void;\n  }\n}"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "All imports in the declaration are only used as types. Use `import type`.",
    "line": 2632,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "typeOverValue",
    "endLine": 2632,
    "endColumn": 47,
    "fix": {
      "range": [
        110128,
        110145
      ],
      "text": "type PlotlyHTMLElement"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2634,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2636,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2643,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2644,
    "endColumn": 1
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'process' is never reassigned. Use 'const' instead.",
    "line": 2659,
    "column": 1,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 2659,
    "endColumn": 8
  },
  {
    "ruleId": "import-x/first",
    "severity": 2,
    "message": "Import in body of module; reorder to top.",
    "line": 2694,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "order",
    "endLine": 2694,
    "endColumn": 36,
    "fix": {
      "range": [
        111707,
        111890
      ],
      "text": "// declaration.d.ts\n// anywhere in your project, NOT the same name as any of your .ts/tsx files\n// importing in a tsx file\nimport * as logo from \"./logo.png\";\n\ndeclare module \"*.png\";"
    }
  },
  {
    "ruleId": "sonarjs/unused-import",
    "severity": 2,
    "message": "Remove this unused import of 'logo'.",
    "line": 2694,
    "column": 13,
    "nodeType": "Identifier",
    "messageId": "removeUnusedImport",
    "endLine": 2694,
    "endColumn": 17,
    "suggestions": [
      {
        "messageId": "suggestRemoveWholeStatement",
        "fix": {
          "range": [
            147,
            183
          ],
          "text": ""
        },
        "desc": "Remove this import statement"
      }
    ]
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Unexpected token Colon found.",
    "line": 2745,
    "column": 12
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"jest\" to come before \"node\".",
    "line": 2757,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2757,
    "endColumn": 15,
    "fix": {
      "range": [
        114551,
        114577
      ],
      "text": "jest: true,\n    node: true"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"parserOptions\" to come before \"plugins\".",
    "line": 2762,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2765,
    "endColumn": 4,
    "fix": {
      "range": [
        114658,
        114762
      ],
      "text": "parserOptions: {\n    ecmaVersion: 2017,\n    sourceType: \"module\",\n  },\n  plugins: [\"@typescript-eslint\"]"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"no-console\" to come before \"quotes\".",
    "line": 2770,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2770,
    "endColumn": 25,
    "fix": {
      "range": [
        114779,
        115269
      ],
      "text": "\"@typescript-eslint/explicit-function-return-type\": \"warn\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      { vars: \"all\", args: \"after-used\", ignoreRestSiblings: false },\n    ],\n    indent: [\"error\", 2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"no-console\": \"warn\",\n    \"no-empty\": \"warn\",\n    \"no-unused-vars\": \"off\",\n    quotes: [\"error\", \"single\"]"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"@typescript-eslint/no-unused-vars\" to come before \"no-unused-vars\".",
    "line": 2772,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2775,
    "endColumn": 6,
    "fix": {
      "range": [
        114779,
        115269
      ],
      "text": "\"@typescript-eslint/explicit-function-return-type\": \"warn\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      { vars: \"all\", args: \"after-used\", ignoreRestSiblings: false },\n    ],\n    indent: [\"error\", 2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"no-console\": \"warn\",\n    \"no-empty\": \"warn\",\n    \"no-unused-vars\": \"off\",\n    quotes: [\"error\", \"single\"]"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"args\" to come before \"vars\".",
    "line": 2774,
    "column": 22,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2774,
    "endColumn": 40,
    "fix": {
      "range": [
        114997,
        115055
      ],
      "text": "args: \"after-used\", ignoreRestSiblings: false, vars: \"all\""
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \"@typescript-eslint/explicit-function-return-type\" to come before \"@typescript-eslint/no-unused-vars\".",
    "line": 2776,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2776,
    "endColumn": 63,
    "fix": {
      "range": [
        114779,
        115269
      ],
      "text": "\"@typescript-eslint/explicit-function-return-type\": \"warn\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      { vars: \"all\", args: \"after-used\", ignoreRestSiblings: false },\n    ],\n    indent: [\"error\", 2],\n    \"linebreak-style\": [\"error\", \"unix\"],\n    \"no-console\": \"warn\",\n    \"no-empty\": \"warn\",\n    \"no-unused-vars\": \"off\",\n    quotes: [\"error\", \"single\"]"
    }
  }
]