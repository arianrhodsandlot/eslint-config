exports[`ESLint config > test-css.css 1`] = `
[
  {
    "ruleId": "css/no-invalid-properties",
    "severity": 2,
    "message": "Invalid value '1' for property 'color'. Expected <color>.",
    "line": 2,
    "column": 10,
    "nodeType": null,
    "messageId": "invalidPropertyValue",
    "endLine": 2,
    "endColumn": 11
  },
  {
    "ruleId": "css/no-invalid-at-rules",
    "severity": 2,
    "message": "Unknown at-rule '@aa' found.",
    "line": 5,
    "column": 3,
    "nodeType": null,
    "messageId": "unknownAtRule",
    "endLine": 5,
    "endColumn": 6
  },
  {
    "ruleId": "css/no-invalid-at-rules",
    "severity": 2,
    "message": "Unknown descriptor 'xx' found for at-rule '@aa'.",
    "line": 6,
    "column": 5,
    "nodeType": null,
    "messageId": "unknownDescriptor",
    "endLine": 6,
    "endColumn": 7
  }
]
`;

exports[`ESLint config > test-js.js 1`] = `
[
  {
    "ruleId": "jsdoc/tag-lines",
    "severity": 1,
    "message": "Expected only 0 line after block description",
    "line": 27,
    "column": 1,
    "nodeType": "Block",
    "endLine": 27,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\\n * Creates a debounced function that delays invoking \`func\` until after \`wait\`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked, or until the next browser frame is drawn. The debounced function\\n * comes with a \`cancel\` method to cancel delayed \`func\` invocations and a\\n * \`flush\` method to immediately invoke them. Provide \`options\` to indicate\\n * whether \`func\` should be invoked on the leading and/or trailing edge of the\\n * \`wait\` timeout. The \`func\` is invoked with the last arguments provided to the\\n * debounced function. Subsequent calls to the debounced function return the\\n * result of the last \`func\` invocation.\\n *\\n * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the \`wait\` timeout.\\n *\\n * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred\\n * until the next tick, similar to \`setTimeout\` with a timeout of \`0\`.\\n *\\n * If \`wait\` is omitted in an environment with \`requestAnimationFrame\`, \`func\`\\n * invocation will be deferred until the next frame is drawn (typically about\\n * 16ms).\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between \`debounce\` and \`throttle\`.\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait=0]\\n *  The number of milliseconds to delay; if omitted, \`requestAnimationFrame\` is\\n *  used (if available).\\n * @param {Object} [options={}] The options object.\\n * @param {boolean} [options.leading=false]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time \`func\` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\\n *\\n * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }))\\n *\\n * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.\\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\\n * const source = new EventSource('/stream')\\n * jQuery(source).on('message', debounced)\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel)\\n *\\n * // Check for pending invocations.\\n * const status = debounced.pending() ? \\"Pending...\\" : \\"Ready\\"\\n */"
    }
  },
  {
    "ruleId": "jsdoc/check-tag-names",
    "severity": 1,
    "message": "Invalid JSDoc tag name \\"category\\".",
    "line": 30,
    "column": 1,
    "nodeType": "Block",
    "endLine": 30,
    "endColumn": 1
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 32,
    "column": 1,
    "nodeType": "Block",
    "endLine": 32,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\\n * Creates a debounced function that delays invoking \`func\` until after \`wait\`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked, or until the next browser frame is drawn. The debounced function\\n * comes with a \`cancel\` method to cancel delayed \`func\` invocations and a\\n * \`flush\` method to immediately invoke them. Provide \`options\` to indicate\\n * whether \`func\` should be invoked on the leading and/or trailing edge of the\\n * \`wait\` timeout. The \`func\` is invoked with the last arguments provided to the\\n * debounced function. Subsequent calls to the debounced function return the\\n * result of the last \`func\` invocation.\\n *\\n * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the \`wait\` timeout.\\n *\\n * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred\\n * until the next tick, similar to \`setTimeout\` with a timeout of \`0\`.\\n *\\n * If \`wait\` is omitted in an environment with \`requestAnimationFrame\`, \`func\`\\n * invocation will be deferred until the next frame is drawn (typically about\\n * 16ms).\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between \`debounce\` and \`throttle\`.\\n *\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait]\\n *  The number of milliseconds to delay; if omitted, \`requestAnimationFrame\` is\\n *  used (if available).\\n * @param {Object} [options={}] The options object.\\n * @param {boolean} [options.leading=false]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time \`func\` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\\n *\\n * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }))\\n *\\n * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.\\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\\n * const source = new EventSource('/stream')\\n * jQuery(source).on('message', debounced)\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel)\\n *\\n * // Check for pending invocations.\\n * const status = debounced.pending() ? \\"Pending...\\" : \\"Ready\\"\\n */"
    }
  },
  {
    "ruleId": "jsdoc/check-types",
    "severity": 1,
    "message": "Invalid JSDoc @param \\"options\\" type \\"Object\\"; prefer: \\"object\\".",
    "line": 35,
    "column": 1,
    "nodeType": "Block",
    "endLine": 35,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\\n * Creates a debounced function that delays invoking \`func\` until after \`wait\`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked, or until the next browser frame is drawn. The debounced function\\n * comes with a \`cancel\` method to cancel delayed \`func\` invocations and a\\n * \`flush\` method to immediately invoke them. Provide \`options\` to indicate\\n * whether \`func\` should be invoked on the leading and/or trailing edge of the\\n * \`wait\` timeout. The \`func\` is invoked with the last arguments provided to the\\n * debounced function. Subsequent calls to the debounced function return the\\n * result of the last \`func\` invocation.\\n *\\n * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the \`wait\` timeout.\\n *\\n * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred\\n * until the next tick, similar to \`setTimeout\` with a timeout of \`0\`.\\n *\\n * If \`wait\` is omitted in an environment with \`requestAnimationFrame\`, \`func\`\\n * invocation will be deferred until the next frame is drawn (typically about\\n * 16ms).\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between \`debounce\` and \`throttle\`.\\n *\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait=0]\\n *  The number of milliseconds to delay; if omitted, \`requestAnimationFrame\` is\\n *  used (if available).\\n * @param {object} [options={}] The options object.\\n * @param {boolean} [options.leading=false]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time \`func\` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\\n *\\n * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }))\\n *\\n * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.\\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\\n * const source = new EventSource('/stream')\\n * jQuery(source).on('message', debounced)\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel)\\n *\\n * // Check for pending invocations.\\n * const status = debounced.pending() ? \\"Pending...\\" : \\"Ready\\"\\n */"
    }
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 35,
    "column": 1,
    "nodeType": "Block",
    "endLine": 35,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\\n * Creates a debounced function that delays invoking \`func\` until after \`wait\`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked, or until the next browser frame is drawn. The debounced function\\n * comes with a \`cancel\` method to cancel delayed \`func\` invocations and a\\n * \`flush\` method to immediately invoke them. Provide \`options\` to indicate\\n * whether \`func\` should be invoked on the leading and/or trailing edge of the\\n * \`wait\` timeout. The \`func\` is invoked with the last arguments provided to the\\n * debounced function. Subsequent calls to the debounced function return the\\n * result of the last \`func\` invocation.\\n *\\n * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the \`wait\` timeout.\\n *\\n * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred\\n * until the next tick, similar to \`setTimeout\` with a timeout of \`0\`.\\n *\\n * If \`wait\` is omitted in an environment with \`requestAnimationFrame\`, \`func\`\\n * invocation will be deferred until the next frame is drawn (typically about\\n * 16ms).\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between \`debounce\` and \`throttle\`.\\n *\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait]\\n *  The number of milliseconds to delay; if omitted, \`requestAnimationFrame\` is\\n *  used (if available).\\n * @param {Object} [options] The options object.\\n * @param {boolean} [options.leading=false]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time \`func\` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\\n *\\n * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }))\\n *\\n * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.\\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\\n * const source = new EventSource('/stream')\\n * jQuery(source).on('message', debounced)\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel)\\n *\\n * // Check for pending invocations.\\n * const status = debounced.pending() ? \\"Pending...\\" : \\"Ready\\"\\n */"
    }
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 36,
    "column": 1,
    "nodeType": "Block",
    "endLine": 36,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\\n * Creates a debounced function that delays invoking \`func\` until after \`wait\`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked, or until the next browser frame is drawn. The debounced function\\n * comes with a \`cancel\` method to cancel delayed \`func\` invocations and a\\n * \`flush\` method to immediately invoke them. Provide \`options\` to indicate\\n * whether \`func\` should be invoked on the leading and/or trailing edge of the\\n * \`wait\` timeout. The \`func\` is invoked with the last arguments provided to the\\n * debounced function. Subsequent calls to the debounced function return the\\n * result of the last \`func\` invocation.\\n *\\n * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the \`wait\` timeout.\\n *\\n * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred\\n * until the next tick, similar to \`setTimeout\` with a timeout of \`0\`.\\n *\\n * If \`wait\` is omitted in an environment with \`requestAnimationFrame\`, \`func\`\\n * invocation will be deferred until the next frame is drawn (typically about\\n * 16ms).\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between \`debounce\` and \`throttle\`.\\n *\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait]\\n *  The number of milliseconds to delay; if omitted, \`requestAnimationFrame\` is\\n *  used (if available).\\n * @param {Object} [options] The options object.\\n * @param {boolean} [options.leading]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time \`func\` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\\n *\\n * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }))\\n *\\n * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.\\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\\n * const source = new EventSource('/stream')\\n * jQuery(source).on('message', debounced)\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel)\\n *\\n * // Check for pending invocations.\\n * const status = debounced.pending() ? \\"Pending...\\" : \\"Ready\\"\\n */"
    }
  },
  {
    "ruleId": "jsdoc/no-defaults",
    "severity": 1,
    "message": "Defaults are not permitted on @param.",
    "line": 40,
    "column": 1,
    "nodeType": "Block",
    "endLine": 40,
    "endColumn": 1,
    "fix": {
      "range": [
        77,
        2858
      ],
      "text": "/**\\n * Creates a debounced function that delays invoking \`func\` until after \`wait\`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked, or until the next browser frame is drawn. The debounced function\\n * comes with a \`cancel\` method to cancel delayed \`func\` invocations and a\\n * \`flush\` method to immediately invoke them. Provide \`options\` to indicate\\n * whether \`func\` should be invoked on the leading and/or trailing edge of the\\n * \`wait\` timeout. The \`func\` is invoked with the last arguments provided to the\\n * debounced function. Subsequent calls to the debounced function return the\\n * result of the last \`func\` invocation.\\n *\\n * **Note:** If \`leading\` and \`trailing\` options are \`true\`, \`func\` is\\n * invoked on the trailing edge of the timeout only if the debounced function\\n * is invoked more than once during the \`wait\` timeout.\\n *\\n * If \`wait\` is \`0\` and \`leading\` is \`false\`, \`func\` invocation is deferred\\n * until the next tick, similar to \`setTimeout\` with a timeout of \`0\`.\\n *\\n * If \`wait\` is omitted in an environment with \`requestAnimationFrame\`, \`func\`\\n * invocation will be deferred until the next frame is drawn (typically about\\n * 16ms).\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between \`debounce\` and \`throttle\`.\\n *\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait]\\n *  The number of milliseconds to delay; if omitted, \`requestAnimationFrame\` is\\n *  used (if available).\\n * @param {Object} [options] The options object.\\n * @param {boolean} [options.leading]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time \`func\` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\\n *\\n * // Invoke \`sendMail\` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }))\\n *\\n * // Ensure \`batchLog\` is invoked once after 1 second of debounced calls.\\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\\n * const source = new EventSource('/stream')\\n * jQuery(source).on('message', debounced)\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel)\\n *\\n * // Check for pending invocations.\\n * const status = debounced.pending() ? \\"Pending...\\" : \\"Ready\\"\\n */"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Reassigning a function parameter is confusing. The parameter is declared here: Use a local variable instead. See https://biomejs.dev/linter/rules/no-parameter-assign for more explanation.",
    "line": 83,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 83,
    "endColumn": 7
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Number(wait)\` instead.",
    "line": 83,
    "column": 10,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 83,
    "endColumn": 15,
    "suggestions": [
      {
        "messageId": "useRecommendation",
        "data": {
          "recommendation": "Number(wait)"
        },
        "fix": {
          "range": [
            3335,
            3340
          ],
          "text": "Number(wait)"
        },
        "desc": "Use \`Number(wait)\` instead."
      }
    ]
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Boolean(options.leading)\` instead.",
    "line": 85,
    "column": 15,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 85,
    "endColumn": 32,
    "fix": {
      "range": [
        3387,
        3404
      ],
      "text": "Boolean(options.leading)"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Number(options.maxWait)\` instead.",
    "line": 87,
    "column": 33,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 87,
    "endColumn": 49,
    "suggestions": [
      {
        "messageId": "useRecommendation",
        "data": {
          "recommendation": "Number(options.maxWait)"
        },
        "fix": {
          "range": [
            3471,
            3487
          ],
          "text": "Number(options.maxWait)"
        },
        "desc": "Use \`Number(options.maxWait)\` instead."
      }
    ]
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Boolean(options.trailing)\` instead.",
    "line": 88,
    "column": 40,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 88,
    "endColumn": 58,
    "fix": {
      "range": [
        3549,
        3567
      ],
      "text": "Boolean(options.trailing)"
    }
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 95,
    "column": 16,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 95,
    "endColumn": 36
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 167,
    "column": 16,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 167,
    "endColumn": 36
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 176,
    "column": 16,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 176,
    "endColumn": 61
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 176,
    "column": 31,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 176,
    "endColumn": 61
  },
  {
    "ruleId": "no-multi-assign",
    "severity": 2,
    "message": "Unexpected chained assignment.",
    "line": 176,
    "column": 42,
    "nodeType": "AssignmentExpression",
    "messageId": "unexpectedChain",
    "endLine": 176,
    "endColumn": 61
  },
  {
    "ruleId": "unicorn/no-this-assignment",
    "severity": 2,
    "message": "Do not assign \`this\` to \`lastThis\`.",
    "line": 192,
    "column": 5,
    "nodeType": "AssignmentExpression",
    "messageId": "no-this-assignment",
    "endLine": 192,
    "endColumn": 20
  },
  {
    "ruleId": "@typescript-eslint/no-this-alias",
    "severity": 2,
    "message": "Unexpected aliasing of 'this' to local variable.",
    "line": 192,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "thisAssignment",
    "endLine": 192,
    "endColumn": 13
  },
  {
    "ruleId": "no-invalid-this",
    "severity": 2,
    "message": "Unexpected 'this'.",
    "line": 192,
    "column": 16,
    "nodeType": "ThisExpression",
    "messageId": "unexpectedThis",
    "endLine": 192,
    "endColumn": 20
  }
]
`;

exports[`ESLint config > test-json.json 1`] = `
[
  {
    "ruleId": "json/no-duplicate-keys",
    "severity": 2,
    "message": "Duplicate key \\"a\\" found.",
    "line": 3,
    "column": 3,
    "nodeType": null,
    "messageId": "duplicateKey",
    "endLine": 3,
    "endColumn": 6
  }
]
`;

exports[`ESLint config > test-md.md 1`] = `
[
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 192,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 192,
    "endColumn": 14,
    "fix": {
      "range": [
        11583,
        11622
      ],
      "text": "interface AppProps {\\n  message: string;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 193,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 193,
    "endColumn": 19,
    "fix": {
      "range": [
        11618,
        11619
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 194,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 194,
    "endColumn": 3,
    "fix": {
      "range": [
        11621,
        11622
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 197,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 197,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 197,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 197,
    "endColumn": 60
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 197,
    "column": 60,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 197,
    "endColumn": 61,
    "fix": {
      "range": [
        11820,
        11821
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Shouldn't redeclare 'App'. Consider to delete it or rename it. 'App' is defined here: See https://biomejs.dev/linter/rules/no-redeclare for more explanation.",
    "line": 200,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 200,
    "endColumn": 10
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 200,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 200,
    "endColumn": 10
  },
  {
    "ruleId": "@typescript-eslint/no-redeclare",
    "severity": 2,
    "message": "'App' is already defined.",
    "line": 200,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "redeclared",
    "endLine": 200,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 200,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 200,
    "endColumn": 79
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 200,
    "column": 79,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 200,
    "endColumn": 80,
    "fix": {
      "range": [
        12009,
        12010
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Shouldn't redeclare 'App'. Consider to delete it or rename it. 'App' is defined here: See https://biomejs.dev/linter/rules/no-redeclare for more explanation.",
    "line": 203,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 203,
    "endColumn": 10
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 203,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 203,
    "endColumn": 10
  },
  {
    "ruleId": "@typescript-eslint/no-redeclare",
    "severity": 2,
    "message": "'App' is already defined.",
    "line": 203,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "redeclared",
    "endLine": 203,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 203,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 203,
    "endColumn": 71
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 203,
    "column": 71,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 203,
    "endColumn": 72,
    "fix": {
      "range": [
        12182,
        12183
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Shouldn't redeclare 'App'. Consider to delete it or rename it. 'App' is defined here: See https://biomejs.dev/linter/rules/no-redeclare for more explanation.",
    "line": 207,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 207,
    "endColumn": 10
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 207,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 207,
    "endColumn": 56
  },
  {
    "ruleId": "@typescript-eslint/no-redeclare",
    "severity": 2,
    "message": "'App' is already defined.",
    "line": 207,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "redeclared",
    "endLine": 207,
    "endColumn": 56
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 207,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 209,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`(⏎··\`",
    "line": 207,
    "column": 76,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 208,
    "endColumn": 3,
    "fix": {
      "range": [
        12450,
        12454
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`);⏎\`",
    "line": 209,
    "column": 1,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 210,
    "endColumn": 1,
    "fix": {
      "range": [
        12475,
        12478
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 221,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 221,
    "endColumn": 56
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 221,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 223,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`(⏎··\`",
    "line": 221,
    "column": 76,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 222,
    "endColumn": 3,
    "fix": {
      "range": [
        13066,
        13070
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`);⏎\`",
    "line": 223,
    "column": 1,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 224,
    "endColumn": 1,
    "fix": {
      "range": [
        13091,
        13094
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 240,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 240,
    "endColumn": 56
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 240,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 243,
    "endColumn": 42
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··children,⏎··title,⏎})·=>·<div·title={title}>{children}</div>;\` with \`·children,·title·})·=>·<div·title={title}>{children}</div>\`",
    "line": 240,
    "column": 61,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 243,
    "endColumn": 43,
    "fix": {
      "range": [
        14602,
        14666
      ],
      "text": " children, title }) => <div title={title}>{children}</div>"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: ')' expected.",
    "line": 264,
    "column": 12
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 304,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 307,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useState\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 304,
    "column": 27,
    "nodeType": "Identifier",
    "endLine": 304,
    "endColumn": 35
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 304,
    "column": 42,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 304,
    "endColumn": 43,
    "fix": {
      "range": [
        16438,
        16439
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 314,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 318,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useState\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 314,
    "column": 25,
    "nodeType": "Identifier",
    "endLine": 314,
    "endColumn": 33
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"null\\" to come before \\"User\\".",
    "line": 314,
    "column": 41,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 314,
    "endColumn": 45,
    "fix": {
      "range": [
        16937,
        16948
      ],
      "text": "null | User"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 314,
    "column": 52,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 314,
    "endColumn": 53,
    "fix": {
      "range": [
        16955,
        16956
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 317,
    "column": 17,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 317,
    "endColumn": 18,
    "fix": {
      "range": [
        16986,
        16987
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 323,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 327,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useState\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 323,
    "column": 25,
    "nodeType": "Identifier",
    "endLine": 323,
    "endColumn": 33
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 323,
    "column": 51,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 323,
    "endColumn": 52,
    "fix": {
      "range": [
        17157,
        17158
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 326,
    "column": 17,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 326,
    "endColumn": 18,
    "fix": {
      "range": [
        17188,
        17189
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Expression expected.",
    "line": 341,
    "column": 6
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··callback:·T,⏎··deps:·DependencyList⏎):·T;\` with \`callback:·T,·deps:·DependencyList):·T\`",
    "line": 353,
    "column": 57,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 356,
    "endColumn": 6,
    "fix": {
      "range": [
        17992,
        18036
      ],
      "text": "callback: T, deps: DependencyList): T"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Don't use 'Function' as a type. Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs. See https://biomejs.dev/linter/rules/no-banned-types for more explanation.",
    "line": 362,
    "column": 32,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 362,
    "endColumn": 40
  },
  {
    "ruleId": "@typescript-eslint/no-unsafe-function-type",
    "severity": 2,
    "message": "The \`Function\` type accepts any function-like value.\\nPrefer explicitly defining any function parameters and return type.",
    "line": 362,
    "column": 32,
    "nodeType": "Identifier",
    "messageId": "bannedFunctionType",
    "endLine": 362,
    "endColumn": 40
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 362,
    "column": 79,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 362,
    "endColumn": 80,
    "fix": {
      "range": [
        18209,
        18210
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useCallback\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 369,
    "column": 1,
    "nodeType": "Identifier",
    "endLine": 369,
    "endColumn": 12
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 369,
    "column": 20,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 369,
    "endColumn": 22
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 369,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 369,
    "endColumn": 28,
    "fix": {
      "range": [
        18434,
        18435
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useCallback\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 371,
    "column": 1,
    "nodeType": "Identifier",
    "endLine": 371,
    "endColumn": 12
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 371,
    "column": 25,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 371,
    "endColumn": 27
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 371,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 371,
    "endColumn": 33,
    "fix": {
      "range": [
        18491,
        18492
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 379,
    "column": 28,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 379,
    "endColumn": 36,
    "fix": {
      "range": [
        18794,
        18802
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 381,
    "column": 34,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 381,
    "endColumn": 35,
    "fix": {
      "range": [
        18837,
        18838
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··|·{·type:·\\"increment\\";·payload:·number·}⏎··|·{·type:·\\"decrement\\";·payload:·string·};\` with \`·{·type:·'increment';·payload:·number·}·|·{·type:·'decrement';·payload:·string·}\`",
    "line": 383,
    "column": 18,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 385,
    "endColumn": 44,
    "fix": {
      "range": [
        18857,
        18944
      ],
      "text": " { type: 'increment'; payload: number } | { type: 'decrement'; payload: string }"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"payload\\" to come before \\"type\\".",
    "line": 384,
    "column": 26,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 384,
    "endColumn": 41,
    "fix": {
      "range": [
        18864,
        18898
      ],
      "text": "payload: number; type: \\"increment\\";"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"{ type: \\"decrement\\"; payload: string }\\" to come before \\"{ type: \\"increment\\"; payload: number }\\".",
    "line": 385,
    "column": 5,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 385,
    "endColumn": 43,
    "fix": {
      "range": [
        18862,
        18943
      ],
      "text": "{ type: \\"decrement\\"; payload: string }\\n  | { type: \\"increment\\"; payload: number }"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"payload\\" to come before \\"type\\".",
    "line": 385,
    "column": 26,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 385,
    "endColumn": 41,
    "fix": {
      "range": [
        18907,
        18941
      ],
      "text": "payload: string; type: \\"decrement\\";"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"increment\\"\` with \`'increment'\`",
    "line": 389,
    "column": 10,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 389,
    "endColumn": 21,
    "fix": {
      "range": [
        19047,
        19058
      ],
      "text": "'increment'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 390,
    "column": 53,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 390,
    "endColumn": 54,
    "fix": {
      "range": [
        19112,
        19113
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-switch-case",
    "severity": 2,
    "message": "Expected \\"decrement\\" to come before \\"increment\\".",
    "line": 391,
    "column": 5,
    "nodeType": "SwitchCase",
    "messageId": "unexpectedSwitchCaseOrder",
    "endLine": 392,
    "endColumn": 62,
    "fix": {
      "range": [
        19042,
        19197
      ],
      "text": "case \\"decrement\\":\\n      return { count: state.count - Number(action.payload) };\\n    case \\"increment\\":\\n      return { count: state.count + action.payload };"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"decrement\\"\` with \`'decrement'\`",
    "line": 391,
    "column": 10,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 391,
    "endColumn": 21,
    "fix": {
      "range": [
        19123,
        19134
      ],
      "text": "'decrement'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 392,
    "column": 61,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 392,
    "endColumn": 62,
    "fix": {
      "range": [
        19196,
        19197
      ],
      "text": ""
    }
  },
  {
    "ruleId": "unicorn/error-message",
    "severity": 2,
    "message": "Pass a message to the \`Error\` constructor.",
    "line": 394,
    "column": 13,
    "nodeType": "NewExpression",
    "messageId": "missing-message",
    "endLine": 394,
    "endColumn": 24
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 394,
    "column": 24,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 394,
    "endColumn": 25,
    "fix": {
      "range": [
        19234,
        19235
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 398,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 398,
    "endColumn": 17
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 399,
    "column": 62,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 399,
    "endColumn": 63,
    "fix": {
      "range": [
        19325,
        19326
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide an explicit type prop for the button element. The default type of a button is submit, which causes the submission of a form when placed inside a \`form\` element. This is likely not the behaviour that you want inside a React application. Allowed button types are: submit, button or reset See https://biomejs.dev/linter/rules/use-button-type for more explanation.",
    "line": 403,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 403,
    "endColumn": 77
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 403,
    "column": 7,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 405,
    "endColumn": 16
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"decrement\\",·payload:·\\"5\\"·})}>⏎········-⏎······\` with \`'decrement',·payload:·'5'·})}>-\`",
    "line": 403,
    "column": 47,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 405,
    "endColumn": 7,
    "fix": {
      "range": [
        19418,
        19465
      ],
      "text": "'decrement', payload: '5' })}>-"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"payload\\" to come before \\"type\\".",
    "line": 403,
    "column": 60,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 403,
    "endColumn": 72,
    "fix": {
      "range": [
        19412,
        19443
      ],
      "text": "payload: \\"5\\", type: \\"decrement\\""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide an explicit type prop for the button element. The default type of a button is submit, which causes the submission of a form when placed inside a \`form\` element. This is likely not the behaviour that you want inside a React application. Allowed button types are: submit, button or reset See https://biomejs.dev/linter/rules/use-button-type for more explanation.",
    "line": 406,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 406,
    "endColumn": 75
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 406,
    "column": 7,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 408,
    "endColumn": 16
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"increment\\",·payload:·5·})}>⏎········+⏎······\` with \`'increment',·payload:·5·})}>+\`",
    "line": 406,
    "column": 47,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 408,
    "endColumn": 7,
    "fix": {
      "range": [
        19521,
        19566
      ],
      "text": "'increment', payload: 5 })}>+"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"payload\\" to come before \\"type\\".",
    "line": 406,
    "column": 60,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 406,
    "endColumn": 70,
    "fix": {
      "range": [
        19515,
        19544
      ],
      "text": "payload: 5, type: \\"increment\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 410,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 410,
    "endColumn": 5,
    "fix": {
      "range": [
        19587,
        19588
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '(' expected.",
    "line": 427,
    "column": 23
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 438,
    "column": 28,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 438,
    "endColumn": 29,
    "fix": {
      "range": [
        21359,
        21360
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/web-api/no-leaked-timeout",
    "severity": 1,
    "message": "A 'setTimeout' must be assigned to a variable for proper cleanup.",
    "line": 442,
    "column": 7,
    "nodeType": "CallExpression",
    "messageId": "noLeakedTimeoutNoTimeoutId",
    "endLine": 444,
    "endColumn": 18
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Insert \`,\`",
    "line": 445,
    "column": 14,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 445,
    "endColumn": 14,
    "fix": {
      "range": [
        21465,
        21465
      ],
      "text": ","
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 446,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 446,
    "endColumn": 5,
    "fix": {
      "range": [
        21469,
        21470
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 449,
    "column": 14,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 449,
    "endColumn": 15,
    "fix": {
      "range": [
        21608,
        21609
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 457,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 468,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 457,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 457,
    "endColumn": 23
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 458,
    "column": 28,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 458,
    "endColumn": 29,
    "fix": {
      "range": [
        21771,
        21772
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/web-api/no-leaked-timeout",
    "severity": 1,
    "message": "A 'setTimeout' must be assigned to a variable for proper cleanup.",
    "line": 461,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "noLeakedTimeoutNoTimeoutId",
    "endLine": 463,
    "endColumn": 16
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 463,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 463,
    "endColumn": 17,
    "fix": {
      "range": [
        21853,
        21854
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 464,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 464,
    "endColumn": 17,
    "fix": {
      "range": [
        21870,
        21871
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 466,
    "column": 14,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 466,
    "endColumn": 15,
    "fix": {
      "range": [
        21953,
        21954
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 481,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 481,
    "endColumn": 13
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 485,
    "column": 46,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 485,
    "endColumn": 47,
    "fix": {
      "range": [
        23088,
        23089
      ],
      "text": ""
    }
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 490,
    "column": 26,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 490,
    "endColumn": 64,
    "fix": {
      "range": [
        23291,
        23329
      ],
      "text": "{throw Error(\\"divRef is not assigned\\");}"
    }
  },
  {
    "ruleId": "unicorn/throw-new-error",
    "severity": 2,
    "message": "Use \`new\` when creating an error.",
    "line": 490,
    "column": 32,
    "nodeType": "CallExpression",
    "messageId": "throw-new-error",
    "endLine": 490,
    "endColumn": 63,
    "fix": {
      "range": [
        23297,
        23297
      ],
      "text": "new "
    }
  },
  {
    "ruleId": "unicorn/new-for-builtins",
    "severity": 2,
    "message": "Use \`new Error()\` instead of \`Error()\`.",
    "line": 490,
    "column": 32,
    "nodeType": "CallExpression",
    "messageId": "enforce",
    "endLine": 490,
    "endColumn": 63,
    "fix": {
      "range": [
        23297,
        23297
      ],
      "text": "new "
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"divRef·is·not·assigned\\");\` with \`'divRef·is·not·assigned')\`",
    "line": 490,
    "column": 38,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 490,
    "endColumn": 64,
    "fix": {
      "range": [
        23303,
        23329
      ],
      "text": "'divRef is not assigned')"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 493,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 493,
    "endColumn": 37,
    "fix": {
      "range": [
        23421,
        23422
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 494,
    "column": 5,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 494,
    "endColumn": 6,
    "fix": {
      "range": [
        23427,
        23428
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 497,
    "column": 37,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 497,
    "endColumn": 38,
    "fix": {
      "range": [
        23529,
        23530
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 504,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 507,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useRef\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 504,
    "column": 16,
    "nodeType": "Identifier",
    "endLine": 504,
    "endColumn": 22
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion.  See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 504,
    "column": 39,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 504,
    "endColumn": 44
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 504,
    "column": 45,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 504,
    "endColumn": 46,
    "fix": {
      "range": [
        23712,
        23713
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 506,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 506,
    "endColumn": 33,
    "fix": {
      "range": [
        23788,
        23789
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Expression expected.",
    "line": 531,
    "column": 41
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 553,
    "column": 13,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 553,
    "endColumn": 28,
    "fix": {
      "range": [
        27580,
        27628
      ],
      "text": "interface CountdownHandle {\\n  start: () => void;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 554,
    "column": 20,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 554,
    "endColumn": 21,
    "fix": {
      "range": [
        27624,
        27625
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 555,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 555,
    "endColumn": 3,
    "fix": {
      "range": [
        27627,
        27628
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 557,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 557,
    "endColumn": 20,
    "fix": {
      "range": [
        27630,
        27655
      ],
      "text": "interface CountdownProps {}"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Don't use '{}' as a type. Prefer explicitly define the object shape. '{}' means \\"any non-nullable value\\". See https://biomejs.dev/linter/rules/no-banned-types for more explanation.",
    "line": 557,
    "column": 23,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 557,
    "endColumn": 25
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "The \`{}\` (\\"empty object\\") type allows any non-nullish value, including literals like \`0\` and \`\\"\\"\`.\\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\\n- If you want a type meaning \\"any object\\", you probably want \`object\` instead.\\n- If you want a type meaning \\"any value\\", you probably want \`unknown\` instead.",
    "line": 557,
    "column": 23,
    "nodeType": "TSTypeLiteral",
    "messageId": "noEmptyObject",
    "endLine": 557,
    "endColumn": 25,
    "suggestions": [
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            163,
            165
          ],
          "text": "object"
        },
        "desc": "Replace \`{}\` with \`object\`."
      },
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            163,
            165
          ],
          "text": "unknown"
        },
        "desc": "Replace \`{}\` with \`unknown\`."
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 557,
    "column": 25,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 557,
    "endColumn": 26,
    "fix": {
      "range": [
        27654,
        27655
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 559,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 559,
    "endColumn": 16
  },
  {
    "ruleId": "@eslint-react/no-forward-ref",
    "severity": 1,
    "message": "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.",
    "line": 559,
    "column": 19,
    "nodeType": "CallExpression",
    "messageId": "noForwardRef",
    "endLine": 568,
    "endColumn": 3,
    "fix": {
      "range": [
        27675,
        27896
      ],
      "text": "({ ref, ...props }: CountdownProps & { ref: React.RefObject<CountdownHandle> }) => {\\n  useImperativeHandle(ref, () => ({\\n    // start() has type inference here\\n    start() {\\n      alert(\\"Start\\");\\n    },\\n  }));\\n\\n  return <div>Countdown</div>;\\n}"
    }
  },
  {
    "ruleId": "@eslint-react/no-missing-component-display-name",
    "severity": 2,
    "message": "Add missing 'displayName' for component.",
    "line": 559,
    "column": 63,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noMissingComponentDisplayName",
    "endLine": 568,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"Start\\");\` with \`'Start')\`",
    "line": 563,
    "column": 13,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 563,
    "endColumn": 22,
    "fix": {
      "range": [
        27838,
        27847
      ],
      "text": "'Start')"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 565,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 565,
    "endColumn": 7,
    "fix": {
      "range": [
        27860,
        27861
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 567,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 567,
    "endColumn": 31,
    "fix": {
      "range": [
        27892,
        27893
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 568,
    "column": 3,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 568,
    "endColumn": 4,
    "fix": {
      "range": [
        27896,
        27897
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \\"CountdownHandle\\" are only used as type.",
    "line": 574,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 574,
    "endColumn": 62,
    "fix": {
      "range": [
        27977,
        27992
      ],
      "text": "type CountdownHandle"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Some named imports are only used as types. This import is only used as a type. Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules. Safe fix: Add inline type keywords. See https://biomejs.dev/linter/rules/use-import-type for more explanation.",
    "line": 574,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 574,
    "endColumn": 61
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"./Countdown.tsx\\";\` with \`'./Countdown.tsx'\`",
    "line": 574,
    "column": 44,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 574,
    "endColumn": 62,
    "fix": {
      "range": [
        28000,
        28018
      ],
      "text": "'./Countdown.tsx'"
    }
  },
  {
    "ruleId": "import-x/extensions",
    "severity": 2,
    "message": "Unexpected use of file extension \\"tsx\\" for \\"./Countdown.tsx\\"",
    "line": 574,
    "column": 44,
    "nodeType": "Literal",
    "messageId": "unexpected",
    "endLine": 574,
    "endColumn": 61
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 576,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 576,
    "endColumn": 13
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 577,
    "column": 52,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 577,
    "endColumn": 53,
    "fix": {
      "range": [
        28088,
        28089
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 582,
    "column": 34,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 582,
    "endColumn": 35,
    "fix": {
      "range": [
        28224,
        28225
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 584,
    "column": 9,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 584,
    "endColumn": 10,
    "fix": {
      "range": [
        28240,
        28241
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 586,
    "column": 41,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 586,
    "endColumn": 42,
    "fix": {
      "range": [
        28283,
        28284
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 599,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 609,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 599,
    "column": 26,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 599,
    "endColumn": 34,
    "fix": {
      "range": [
        28769,
        28777
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 602,
    "column": 48,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 602,
    "endColumn": 49,
    "fix": {
      "range": [
        28857,
        28858
      ],
      "text": ""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 603,
    "column": 9,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 606,
    "endColumn": 4
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 604,
    "column": 19,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 604,
    "endColumn": 20,
    "fix": {
      "range": [
        28922,
        28923
      ],
      "text": ""
    }
  },
  {
    "ruleId": "promise/prefer-await-to-then",
    "severity": 2,
    "message": "Prefer await to then()/catch()/finally().",
    "line": 605,
    "column": 21,
    "nodeType": "Identifier",
    "messageId": "preferAwaitToCallback",
    "endLine": 605,
    "endColumn": 28
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 605,
    "column": 51,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 605,
    "endColumn": 52,
    "fix": {
      "range": [
        28974,
        28975
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 606,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 606,
    "endColumn": 5,
    "fix": {
      "range": [
        28979,
        28980
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 607,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 607,
    "endColumn": 37,
    "fix": {
      "range": [
        29016,
        29017
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 621,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 634,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 621,
    "column": 26,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 621,
    "endColumn": 34,
    "fix": {
      "range": [
        29898,
        29906
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 624,
    "column": 48,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 624,
    "endColumn": 49,
    "fix": {
      "range": [
        29986,
        29987
      ],
      "text": ""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 625,
    "column": 9,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 628,
    "endColumn": 4
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 626,
    "column": 19,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 626,
    "endColumn": 20,
    "fix": {
      "range": [
        30051,
        30052
      ],
      "text": ""
    }
  },
  {
    "ruleId": "promise/prefer-await-to-then",
    "severity": 2,
    "message": "Prefer await to then()/catch()/finally().",
    "line": 627,
    "column": 21,
    "nodeType": "Identifier",
    "messageId": "preferAwaitToCallback",
    "endLine": 627,
    "endColumn": 28
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 627,
    "column": 51,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 627,
    "endColumn": 52,
    "fix": {
      "range": [
        30103,
        30104
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 628,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 628,
    "endColumn": 5,
    "fix": {
      "range": [
        30108,
        30109
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎····boolean,⏎····(aPromise:·Promise<any>)·=>·Promise<any>⏎··];\` with \`boolean,·(aPromise:·Promise<any>)·=>·Promise<any>]\`",
    "line": 629,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 632,
    "endColumn": 5,
    "fix": {
      "range": [
        30141,
        30204
      ],
      "text": "boolean, (aPromise: Promise<any>) => Promise<any>]"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 639,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 654,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 640,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 640,
    "endColumn": 19,
    "fix": {
      "range": [
        30395,
        30396
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 644,
    "column": 40,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 644,
    "endColumn": 41,
    "fix": {
      "range": [
        30461,
        30462
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 645,
    "column": 38,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 645,
    "endColumn": 40
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 645,
    "column": 49,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 645,
    "endColumn": 50,
    "fix": {
      "range": [
        30511,
        30512
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 646,
    "column": 38,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 646,
    "endColumn": 39,
    "fix": {
      "range": [
        30550,
        30551
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 650,
    "column": 40,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 650,
    "endColumn": 41,
    "fix": {
      "range": [
        30653,
        30654
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty arrow function.",
    "line": 651,
    "column": 38,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "unexpected",
    "endLine": 651,
    "endColumn": 40
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 651,
    "column": 49,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 651,
    "endColumn": 50,
    "fix": {
      "range": [
        30703,
        30704
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 652,
    "column": 45,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 652,
    "endColumn": 46,
    "fix": {
      "range": [
        30749,
        30750
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 684,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 684,
    "endColumn": 13,
    "fix": {
      "range": [
        31755,
        31827
      ],
      "text": "interface MyProps {\\n  // using \`interface\` is also ok\\n  message: string;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 686,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 686,
    "endColumn": 19,
    "fix": {
      "range": [
        31823,
        31824
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 687,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 687,
    "endColumn": 3,
    "fix": {
      "range": [
        31826,
        31827
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 688,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 688,
    "endColumn": 13,
    "fix": {
      "range": [
        31828,
        31877
      ],
      "text": "interface MyState {\\n  count: number; // like this\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 689,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 689,
    "endColumn": 17,
    "fix": {
      "range": [
        31860,
        31861
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 690,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 690,
    "endColumn": 3,
    "fix": {
      "range": [
        31876,
        31877
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 691,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 703,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 695,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 695,
    "endColumn": 5,
    "fix": {
      "range": [
        32030,
        32031
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 701,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 701,
    "endColumn": 7,
    "fix": {
      "range": [
        32136,
        32137
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 727,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 733,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 727,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 727,
    "endColumn": 13,
    "fix": {
      "range": [
        33610,
        33657
      ],
      "text": "interface MyProps {\\n  readonly message: string;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 728,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 728,
    "endColumn": 28,
    "fix": {
      "range": [
        33653,
        33654
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 729,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 729,
    "endColumn": 3,
    "fix": {
      "range": [
        33656,
        33657
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 730,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 730,
    "endColumn": 13,
    "fix": {
      "range": [
        33658,
        33703
      ],
      "text": "interface MyState {\\n  readonly count: number;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 731,
    "column": 25,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 731,
    "endColumn": 26,
    "fix": {
      "range": [
        33699,
        33700
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 732,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 732,
    "endColumn": 3,
    "fix": {
      "range": [
        33702,
        33703
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 742,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 757,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 743,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 743,
    "endColumn": 24,
    "fix": {
      "range": [
        34111,
        34112
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event. Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation. See https://biomejs.dev/linter/rules/use-key-with-click-events for more explanation.",
    "line": 746,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 746,
    "endColumn": 46
  },
  {
    "ruleId": "jsx-a11y/click-events-have-key-events",
    "severity": 2,
    "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
    "line": 746,
    "column": 7,
    "nodeType": "JSXOpeningElement",
    "endLine": 746,
    "endColumn": 46
  },
  {
    "ruleId": "jsx-a11y/no-static-element-interactions",
    "severity": 2,
    "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
    "line": 746,
    "column": 7,
    "nodeType": "JSXOpeningElement",
    "endLine": 746,
    "endColumn": 46
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 749,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 749,
    "endColumn": 7,
    "fix": {
      "range": [
        34251,
        34252
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-classes",
    "severity": 2,
    "message": "Expected \\"increment\\" to come before \\"render\\".",
    "line": 751,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "unexpectedClassesOrder",
    "endLine": 756,
    "endColumn": 5,
    "fix": {
      "range": [
        34115,
        34384
      ],
      "text": "increment = (amt: number) => {\\n    // like this\\n    this.setState((state) => ({\\n      count: state.count + amt,\\n    }));\\n  };\\n  render() {\\n    return (\\n      <div onClick={() => this.increment(1)}>\\n        {this.props.message} {this.state.count}\\n      </div>\\n    );\\n  }"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 755,
    "column": 8,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 755,
    "endColumn": 9,
    "fix": {
      "range": [
        34378,
        34379
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 756,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 756,
    "endColumn": 5,
    "fix": {
      "range": [
        34383,
        34384
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 765,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 779,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 766,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 766,
    "endColumn": 19,
    "fix": {
      "range": [
        35055,
        35056
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 768,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 768,
    "endColumn": 19,
    "fix": {
      "range": [
        35079,
        35080
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 770,
    "column": 21,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 770,
    "endColumn": 22,
    "fix": {
      "range": [
        35138,
        35139
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 777,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 777,
    "endColumn": 7,
    "fix": {
      "range": [
        35248,
        35249
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 795,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 803,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 795,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 802,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎····props:·Props,⏎····state:·State⏎··\` with \`props:·Props,·state:·State\`",
    "line": 796,
    "column": 35,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 799,
    "endColumn": 3,
    "fix": {
      "range": [
        36461,
        36499
      ],
      "text": "props: Props, state: State"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"null\\" to come before \\"Partial<State>\\".",
    "line": 799,
    "column": 23,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 799,
    "endColumn": 27,
    "fix": {
      "range": [
        36502,
        36523
      ],
      "text": "null | Partial<State>"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 808,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 814,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 808,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 813,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··Props,⏎··ReturnType<typeof·Comp[\\"getDerivedStateFromProps\\"]>⏎\` with \`Props,·ReturnType<(typeof·Comp)['getDerivedStateFromProps']>\`",
    "line": 808,
    "column": 36,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 811,
    "endColumn": 1,
    "fix": {
      "range": [
        36657,
        36721
      ],
      "text": "Props, ReturnType<(typeof Comp)['getDerivedStateFromProps']>"
    }
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty static method 'getDerivedStateFromProps'.",
    "line": 812,
    "column": 49,
    "nodeType": "FunctionExpression",
    "messageId": "unexpected",
    "endLine": 812,
    "endColumn": 51
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 819,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 846,
    "endColumn": 1
  },
  {
    "ruleId": "sonarjs/redundant-type-aliases",
    "severity": 2,
    "message": "Remove this redundant type alias and replace its occurrences with \\"any\\".",
    "line": 819,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "redundantTypeAlias",
    "endLine": 819,
    "endColumn": 17
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 819,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 819,
    "endColumn": 24,
    "fix": {
      "range": [
        36884,
        36885
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 821,
    "column": 21,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 821,
    "endColumn": 22,
    "fix": {
      "range": [
        36924,
        36925
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 824,
    "column": 26,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 824,
    "endColumn": 27,
    "fix": {
      "range": [
        36978,
        36979
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 826,
    "column": 69,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 826,
    "endColumn": 70,
    "fix": {
      "range": [
        37050,
        37051
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"derivedState\\" to come before \\"savedPropA\\".",
    "line": 830,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 830,
    "endColumn": 30,
    "fix": {
      "range": [
        37114,
        37193
      ],
      "text": "derivedState: props.propA,\\n    savedPropA: props.propA, // save for memoization"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 831,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 831,
    "endColumn": 5,
    "fix": {
      "range": [
        37197,
        37198
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 833,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 845,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 835,
    "column": 17,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 835,
    "endColumn": 18,
    "fix": {
      "range": [
        37302,
        37303
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"123\\"\` with \`'123'\`",
    "line": 837,
    "column": 24,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 837,
    "endColumn": 29,
    "fix": {
      "range": [
        37346,
        37351
      ],
      "text": "'123'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 839,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 839,
    "endColumn": 7,
    "fix": {
      "range": [
        37397,
        37398
      ],
      "text": ""
    }
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 842,
    "column": 49,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 842,
    "endColumn": 61,
    "fix": {
      "range": [
        37515,
        37527
      ],
      "text": "{return null;}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 842,
    "column": 60,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 842,
    "endColumn": 61,
    "fix": {
      "range": [
        37526,
        37527
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 843,
    "column": 40,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 843,
    "endColumn": 41,
    "fix": {
      "range": [
        37567,
        37568
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Expression expected.",
    "line": 868,
    "column": 43
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 874,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 874,
    "endColumn": 16,
    "fix": {
      "range": [
        39012,
        39050
      ],
      "text": "interface GreetProps {\\n  age?: number;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 875,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 875,
    "endColumn": 16,
    "fix": {
      "range": [
        39046,
        39047
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 876,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 876,
    "endColumn": 3,
    "fix": {
      "range": [
        39049,
        39050
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 878,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 883,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 880,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 880,
    "endColumn": 37,
    "fix": {
      "range": [
        39150,
        39151
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This let declares a variable that is only assigned once. 'el' is never reassigned. Safe fix: Use const instead. See https://biomejs.dev/linter/rules/use-const for more explanation.",
    "line": 885,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 885,
    "endColumn": 4
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'el' is never reassigned. Use 'const' instead.",
    "line": 885,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 885,
    "endColumn": 7,
    "fix": {
      "range": [
        39171,
        39198
      ],
      "text": "const el = <Greet age={3} />;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 885,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 885,
    "endColumn": 28,
    "fix": {
      "range": [
        39197,
        39198
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 898,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 908,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 898,
    "column": 56,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 898,
    "endColumn": 57,
    "fix": {
      "range": [
        39787,
        39788
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 902,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 902,
    "endColumn": 3,
    "fix": {
      "range": [
        39825,
        39826
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 904,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 904,
    "endColumn": 12
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 904,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 906,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 906,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 906,
    "endColumn": 3,
    "fix": {
      "range": [
        39877,
        39878
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 907,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noDefaultProps",
    "endLine": 907,
    "endColumn": 19
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 907,
    "column": 34,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 907,
    "endColumn": 35,
    "fix": {
      "range": [
        39912,
        39913
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \\"{ age: number;\\n}\\" to come before \\"typeof Greet.defaultProps\\".",
    "line": 915,
    "column": 47,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 917,
    "endColumn": 2,
    "fix": {
      "range": [
        40523,
        40569
      ],
      "text": "{\\n  age: number;\\n} & typeof Greet.defaultProps"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 916,
    "column": 14,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 916,
    "endColumn": 15,
    "fix": {
      "range": [
        40566,
        40567
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 917,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 917,
    "endColumn": 3,
    "fix": {
      "range": [
        40569,
        40570
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 919,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 924,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 920,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 922,
    "endColumn": 5
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 920,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 920,
    "endColumn": 22,
    "suggestions": [
      {
        "fix": {
          "range": [
            125,
            125
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \\"readonly\\" keyword"
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 922,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 922,
    "endColumn": 5,
    "fix": {
      "range": [
        40664,
        40665
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This let declares a variable that is only assigned once. 'el' is never reassigned. Safe fix: Use const instead. See https://biomejs.dev/linter/rules/use-const for more explanation.",
    "line": 927,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 927,
    "endColumn": 4
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'el' is never reassigned. Use 'const' instead.",
    "line": 927,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 927,
    "endColumn": 7,
    "fix": {
      "range": [
        40722,
        40749
      ],
      "text": "const el = <Greet age={3} />;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 927,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 927,
    "endColumn": 28,
    "fix": {
      "range": [
        40748,
        40749
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 939,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 952,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 939,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 939,
    "endColumn": 16,
    "fix": {
      "range": [
        41547,
        41584
      ],
      "text": "interface GreetProps {\\n  age: number;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 940,
    "column": 14,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 940,
    "endColumn": 15,
    "fix": {
      "range": [
        41580,
        41581
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 941,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 941,
    "endColumn": 3,
    "fix": {
      "range": [
        41583,
        41584
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 943,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 945,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 944,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 944,
    "endColumn": 37
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 944,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 944,
    "endColumn": 22,
    "suggestions": [
      {
        "fix": {
          "range": [
            140,
            140
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \\"readonly\\" keyword"
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 944,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 944,
    "endColumn": 37,
    "fix": {
      "range": [
        41665,
        41666
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··typeof·Greet,⏎··GreetProps⏎>;\` with \`typeof·Greet,·GreetProps>\`",
    "line": 948,
    "column": 69,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 951,
    "endColumn": 3,
    "fix": {
      "range": [
        41759,
        41791
      ],
      "text": "typeof Greet, GreetProps>"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 968,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 968,
    "endColumn": 16,
    "fix": {
      "range": [
        42229,
        42230
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 972,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 972,
    "endColumn": 3,
    "fix": {
      "range": [
        42268,
        42269
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 973,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 973,
    "endColumn": 21
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 973,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 975,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"age\\" to come before \\"name\\".",
    "line": 973,
    "column": 33,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 973,
    "endColumn": 36,
    "fix": {
      "range": [
        42296,
        42305
      ],
      "text": "age, name"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`(⏎··<div>{\`Hello,·my·name·is·\${name},·\${age}\`}</div>⏎);\` with \`<div>{\`Hello,·my·name·is·\${name},·\${age}\`}</div>\`",
    "line": 973,
    "column": 73,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 975,
    "endColumn": 3,
    "fix": {
      "range": [
        42342,
        42397
      ],
      "text": "<div>{\`Hello, my name is \${name}, \${age}\`}</div>"
    }
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 976,
    "column": 16,
    "nodeType": "Identifier",
    "messageId": "noDefaultProps",
    "endLine": 976,
    "endColumn": 28
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 976,
    "column": 43,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 976,
    "endColumn": 44,
    "fix": {
      "range": [
        42440,
        42441
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 978,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 978,
    "endColumn": 20
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 978,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 980,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide screen reader accessible content when using heading  elements. All headings on a page should have content that is accessible to screen readers. See https://biomejs.dev/linter/rules/use-heading-content for more explanation.",
    "line": 979,
    "column": 10,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 979,
    "endColumn": 16
  },
  {
    "ruleId": "jsx-a11y/heading-has-content",
    "severity": 2,
    "message": "Headings must have content and the content must be accessible by a screen reader.",
    "line": 979,
    "column": 10,
    "nodeType": "JSXOpeningElement",
    "endLine": 979,
    "endColumn": 16
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 979,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 979,
    "endColumn": 17,
    "fix": {
      "range": [
        42538,
        42539
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 980,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 980,
    "endColumn": 3,
    "fix": {
      "range": [
        42541,
        42542
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"foo\\"·/>;\` with \`'foo'·/>\`",
    "line": 983,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 983,
    "endColumn": 41,
    "fix": {
      "range": [
        42672,
        42681
      ],
      "text": "'foo' />"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··|·React.ComponentType<infer·P>⏎·\` with \`·React.ComponentType<infer·P>\`",
    "line": 991,
    "column": 35,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 993,
    "endColumn": 2,
    "fix": {
      "range": [
        42813,
        42848
      ],
      "text": " React.ComponentType<infer P>"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"React.Component<infer P>\\" to come before \\"React.ComponentType<infer P>\\".",
    "line": 993,
    "column": 5,
    "nodeType": "TSTypeReference",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 993,
    "endColumn": 29,
    "fix": {
      "range": [
        42818,
        42875
      ],
      "text": "React.Component<infer P>\\n  | React.ComponentType<infer P>"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Shouldn't redeclare 'P'. Consider to delete it or rename it. 'P' is defined here: See https://biomejs.dev/linter/rules/no-redeclare for more explanation.",
    "line": 993,
    "column": 27,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 993,
    "endColumn": 28
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 995,
    "column": 10,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 995,
    "endColumn": 11,
    "fix": {
      "range": [
        42930,
        42931
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 997,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 997,
    "endColumn": 20
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 997,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 999,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide screen reader accessible content when using heading  elements. All headings on a page should have content that is accessible to screen readers. See https://biomejs.dev/linter/rules/use-heading-content for more explanation.",
    "line": 998,
    "column": 10,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 998,
    "endColumn": 16
  },
  {
    "ruleId": "jsx-a11y/heading-has-content",
    "severity": 2,
    "message": "Headings must have content and the content must be accessible by a screen reader.",
    "line": 998,
    "column": 10,
    "nodeType": "JSXOpeningElement",
    "endLine": 998,
    "endColumn": 16
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 998,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 998,
    "endColumn": 17,
    "fix": {
      "range": [
        43022,
        43023
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 999,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 999,
    "endColumn": 3,
    "fix": {
      "range": [
        43025,
        43026
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"foo\\"·/>;\` with \`'foo'·/>\`",
    "line": 1002,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1002,
    "endColumn": 41,
    "fix": {
      "range": [
        43071,
        43080
      ],
      "text": "'foo' />"
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \\"{ /* additional props here */\\n}\\" to come before \\"Required<typeof MyComponent.defaultProps>\\".",
    "line": 1028,
    "column": 58,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 1030,
    "endColumn": 2,
    "fix": {
      "range": [
        44399,
        44476
      ],
      "text": "{\\n  /* additional props here */\\n} & Required<typeof MyComponent.defaultProps>"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1030,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1030,
    "endColumn": 3,
    "fix": {
      "range": [
        44476,
        44477
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1032,
    "column": 8,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1036,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 1033,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 1035,
    "endColumn": 5
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 1033,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 1033,
    "endColumn": 22,
    "suggestions": [
      {
        "fix": {
          "range": [
            159,
            159
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \\"readonly\\" keyword"
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"foo\\"\` with \`'foo'\`",
    "line": 1034,
    "column": 10,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1034,
    "endColumn": 15,
    "fix": {
      "range": [
        44572,
        44577
      ],
      "text": "'foo'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1035,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1035,
    "endColumn": 5,
    "fix": {
      "range": [
        44582,
        44583
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1043,
    "column": 21,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1043,
    "endColumn": 22,
    "fix": {
      "range": [
        44890,
        44891
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1044,
    "column": 24,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1044,
    "endColumn": 25,
    "fix": {
      "range": [
        44915,
        44916
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1047,
    "column": 8,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1051,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/no-default-props",
    "severity": 2,
    "message": "[Deprecated] Use ES6 default parameters instead.",
    "line": 1048,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "noDefaultProps",
    "endLine": 1050,
    "endColumn": 5
  },
  {
    "ruleId": "sonarjs/public-static-readonly",
    "severity": 2,
    "message": "Make this public static property readonly.",
    "line": 1048,
    "column": 17,
    "nodeType": "Identifier",
    "messageId": "message",
    "endLine": 1048,
    "endColumn": 29,
    "suggestions": [
      {
        "fix": {
          "range": [
            165,
            165
          ],
          "text": " readonly"
        },
        "messageId": "fix",
        "desc": "Add \\"readonly\\" keyword"
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"default\\"\` with \`'default'\`",
    "line": 1049,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1049,
    "endColumn": 25,
    "fix": {
      "range": [
        45066,
        45075
      ],
      "text": "'default'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1050,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1050,
    "endColumn": 5,
    "fix": {
      "range": [
        45080,
        45081
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1075,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1117,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 1075,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1075,
    "endColumn": 14,
    "fix": {
      "range": [
        45959,
        47680
      ],
      "text": "interface AppProps {\\n  message: string;\\n  count: number;\\n  disabled: boolean;\\n  /** array of a type! */\\n  names: string[];\\n  /** string literals to specify exact string values, with a union type to join them together */\\n  status: \\"waiting\\" | \\"success\\";\\n  /** an object with known properties (but could have more at runtime) */\\n  obj: {\\n    id: string;\\n    title: string;\\n  };\\n  /** array of objects! (common) */\\n  objArr: {\\n    id: string;\\n    title: string;\\n  }[];\\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\\n  obj2: object;\\n  /** an interface with no required properties - (NOT COMMON, except for things like \`React.Component<{}, State>\`) */\\n  obj3: {};\\n  /** a dict object with any number of properties of the same type */\\n  dict1: {\\n    [key: string]: MyTypeHere;\\n  };\\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\\n  /** function that doesn't take or return anything (VERY COMMON) */\\n  onClick: () => void;\\n  /** function with named prop (VERY COMMON) */\\n  onChange: (id: number) => void;\\n  /** function type syntax that takes an event (VERY COMMON) */\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n  /** alternative function type syntax that takes an event (VERY COMMON) */\\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\\n  /** any function as long as you don't invoke it (not recommended) */\\n  onSomething: Function;\\n  /** an optional prop (VERY COMMON!) */\\n  optional?: OptionalType;\\n  /** when passing down the state setter function returned by \`useState\` to a child component. \`number\` is an example, swap out with whatever the type of your state */\\n  setState: React.Dispatch<React.SetStateAction<number>>;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1076,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1076,
    "endColumn": 19,
    "fix": {
      "range": [
        45994,
        45995
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"count\\" to come before \\"message\\".",
    "line": 1077,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1077,
    "endColumn": 17,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\\n  /** a dict object with any number of properties of the same type */\\n  dict1: {\\n    [key: string]: MyTypeHere;\\n  };\\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\\n  disabled: boolean;\\n  message: string;\\n  /** array of a type! */\\n  names: string[];\\n  /** an object with known properties (but could have more at runtime) */\\n  obj: {\\n    id: string;\\n    title: string;\\n  };\\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\\n  obj2: object;\\n  /** an interface with no required properties - (NOT COMMON, except for things like \`React.Component<{}, State>\`) */\\n  obj3: {};\\n  /** array of objects! (common) */\\n  objArr: {\\n    id: string;\\n    title: string;\\n  }[];\\n  /** function with named prop (VERY COMMON) */\\n  onChange: (id: number) => void;\\n  /** function type syntax that takes an event (VERY COMMON) */\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n  /** function that doesn't take or return anything (VERY COMMON) */\\n  onClick: () => void;\\n  /** alternative function type syntax that takes an event (VERY COMMON) */\\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\\n  /** any function as long as you don't invoke it (not recommended) */\\n  onSomething: Function;\\n  /** an optional prop (VERY COMMON!) */\\n  optional?: OptionalType;\\n  /** when passing down the state setter function returned by \`useState\` to a child component. \`number\` is an example, swap out with whatever the type of your state */\\n  setState: React.Dispatch<React.SetStateAction<number>>;\\n  /** string literals to specify exact string values, with a union type to join them together */\\n  status: \\"waiting\\" | \\"success\\";"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1077,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1077,
    "endColumn": 17,
    "fix": {
      "range": [
        46011,
        46012
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1078,
    "column": 20,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1078,
    "endColumn": 21,
    "fix": {
      "range": [
        46032,
        46033
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1080,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1080,
    "endColumn": 19,
    "fix": {
      "range": [
        46077,
        46078
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"waiting\\"·|·\\"success\\";\` with \`'waiting'·|·'success'\`",
    "line": 1082,
    "column": 11,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1082,
    "endColumn": 33,
    "fix": {
      "range": [
        46186,
        46208
      ],
      "text": "'waiting' | 'success'"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"\\"success\\"\\" to come before \\"\\"waiting\\"\\".",
    "line": 1082,
    "column": 23,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1082,
    "endColumn": 32,
    "fix": {
      "range": [
        46186,
        46207
      ],
      "text": "\\"success\\" | \\"waiting\\""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"obj\\" to come before \\"status\\".",
    "line": 1084,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1087,
    "endColumn": 5,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\\n  /** a dict object with any number of properties of the same type */\\n  dict1: {\\n    [key: string]: MyTypeHere;\\n  };\\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\\n  disabled: boolean;\\n  message: string;\\n  /** array of a type! */\\n  names: string[];\\n  /** an object with known properties (but could have more at runtime) */\\n  obj: {\\n    id: string;\\n    title: string;\\n  };\\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\\n  obj2: object;\\n  /** an interface with no required properties - (NOT COMMON, except for things like \`React.Component<{}, State>\`) */\\n  obj3: {};\\n  /** array of objects! (common) */\\n  objArr: {\\n    id: string;\\n    title: string;\\n  }[];\\n  /** function with named prop (VERY COMMON) */\\n  onChange: (id: number) => void;\\n  /** function type syntax that takes an event (VERY COMMON) */\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n  /** function that doesn't take or return anything (VERY COMMON) */\\n  onClick: () => void;\\n  /** alternative function type syntax that takes an event (VERY COMMON) */\\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\\n  /** any function as long as you don't invoke it (not recommended) */\\n  onSomething: Function;\\n  /** an optional prop (VERY COMMON!) */\\n  optional?: OptionalType;\\n  /** when passing down the state setter function returned by \`useState\` to a child component. \`number\` is an example, swap out with whatever the type of your state */\\n  setState: React.Dispatch<React.SetStateAction<number>>;\\n  /** string literals to specify exact string values, with a union type to join them together */\\n  status: \\"waiting\\" | \\"success\\";"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1085,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1085,
    "endColumn": 16,
    "fix": {
      "range": [
        46306,
        46307
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1086,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1086,
    "endColumn": 19,
    "fix": {
      "range": [
        46325,
        46326
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1087,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1087,
    "endColumn": 5,
    "fix": {
      "range": [
        46330,
        46331
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1090,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1090,
    "endColumn": 16,
    "fix": {
      "range": [
        46394,
        46395
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1091,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1091,
    "endColumn": 19,
    "fix": {
      "range": [
        46413,
        46414
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1092,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1092,
    "endColumn": 7,
    "fix": {
      "range": [
        46420,
        46421
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"obj2\\" to come before \\"objArr\\".",
    "line": 1094,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1094,
    "endColumn": 16,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\\n  /** a dict object with any number of properties of the same type */\\n  dict1: {\\n    [key: string]: MyTypeHere;\\n  };\\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\\n  disabled: boolean;\\n  message: string;\\n  /** array of a type! */\\n  names: string[];\\n  /** an object with known properties (but could have more at runtime) */\\n  obj: {\\n    id: string;\\n    title: string;\\n  };\\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\\n  obj2: object;\\n  /** an interface with no required properties - (NOT COMMON, except for things like \`React.Component<{}, State>\`) */\\n  obj3: {};\\n  /** array of objects! (common) */\\n  objArr: {\\n    id: string;\\n    title: string;\\n  }[];\\n  /** function with named prop (VERY COMMON) */\\n  onChange: (id: number) => void;\\n  /** function type syntax that takes an event (VERY COMMON) */\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n  /** function that doesn't take or return anything (VERY COMMON) */\\n  onClick: () => void;\\n  /** alternative function type syntax that takes an event (VERY COMMON) */\\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\\n  /** any function as long as you don't invoke it (not recommended) */\\n  onSomething: Function;\\n  /** an optional prop (VERY COMMON!) */\\n  optional?: OptionalType;\\n  /** when passing down the state setter function returned by \`useState\` to a child component. \`number\` is an example, swap out with whatever the type of your state */\\n  setState: React.Dispatch<React.SetStateAction<number>>;\\n  /** string literals to specify exact string values, with a union type to join them together */\\n  status: \\"waiting\\" | \\"success\\";"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1094,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1094,
    "endColumn": 16,
    "fix": {
      "range": [
        46538,
        46539
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Don't use '{}' as a type. Prefer explicitly define the object shape. '{}' means \\"any non-nullable value\\". See https://biomejs.dev/linter/rules/no-banned-types for more explanation.",
    "line": 1096,
    "column": 9,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1096,
    "endColumn": 11
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "The \`{}\` (\\"empty object\\") type allows any non-nullish value, including literals like \`0\` and \`\\"\\"\`.\\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\\n- If you want a type meaning \\"any object\\", you probably want \`object\` instead.\\n- If you want a type meaning \\"any value\\", you probably want \`unknown\` instead.",
    "line": 1096,
    "column": 9,
    "nodeType": "TSTypeLiteral",
    "messageId": "noEmptyObject",
    "endLine": 1096,
    "endColumn": 11,
    "suggestions": [
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            707,
            709
          ],
          "text": "object"
        },
        "desc": "Replace \`{}\` with \`object\`."
      },
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            707,
            709
          ],
          "text": "unknown"
        },
        "desc": "Replace \`{}\` with \`unknown\`."
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1096,
    "column": 11,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1096,
    "endColumn": 12,
    "fix": {
      "range": [
        46668,
        46669
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"dict1\\" to come before \\"obj3\\".",
    "line": 1098,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1100,
    "endColumn": 5,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\\n  /** a dict object with any number of properties of the same type */\\n  dict1: {\\n    [key: string]: MyTypeHere;\\n  };\\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\\n  disabled: boolean;\\n  message: string;\\n  /** array of a type! */\\n  names: string[];\\n  /** an object with known properties (but could have more at runtime) */\\n  obj: {\\n    id: string;\\n    title: string;\\n  };\\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\\n  obj2: object;\\n  /** an interface with no required properties - (NOT COMMON, except for things like \`React.Component<{}, State>\`) */\\n  obj3: {};\\n  /** array of objects! (common) */\\n  objArr: {\\n    id: string;\\n    title: string;\\n  }[];\\n  /** function with named prop (VERY COMMON) */\\n  onChange: (id: number) => void;\\n  /** function type syntax that takes an event (VERY COMMON) */\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n  /** function that doesn't take or return anything (VERY COMMON) */\\n  onClick: () => void;\\n  /** alternative function type syntax that takes an event (VERY COMMON) */\\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\\n  /** any function as long as you don't invoke it (not recommended) */\\n  onSomething: Function;\\n  /** an optional prop (VERY COMMON!) */\\n  optional?: OptionalType;\\n  /** when passing down the state setter function returned by \`useState\` to a child component. \`number\` is an example, swap out with whatever the type of your state */\\n  setState: React.Dispatch<React.SetStateAction<number>>;\\n  /** string literals to specify exact string values, with a union type to join them together */\\n  status: \\"waiting\\" | \\"success\\";"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-indexed-object-style",
    "severity": 2,
    "message": "A record is preferred over an index signature.",
    "line": 1098,
    "column": 10,
    "nodeType": "TSTypeLiteral",
    "messageId": "preferRecord",
    "endLine": 1100,
    "endColumn": 4,
    "fix": {
      "range": [
        46749,
        46785
      ],
      "text": "Record<string, MyTypeHere>"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1099,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1099,
    "endColumn": 31,
    "fix": {
      "range": [
        46780,
        46781
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1100,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1100,
    "endColumn": 5,
    "fix": {
      "range": [
        46785,
        46786
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1101,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1101,
    "endColumn": 37,
    "fix": {
      "range": [
        46822,
        46823
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1103,
    "column": 22,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1103,
    "endColumn": 23,
    "fix": {
      "range": [
        46937,
        46938
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"onChange\\" to come before \\"onClick\\".",
    "line": 1105,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 1105,
    "endColumn": 34,
    "fix": {
      "range": [
        45979,
        47677
      ],
      "text": "count: number;\\n  /** a dict object with any number of properties of the same type */\\n  dict1: {\\n    [key: string]: MyTypeHere;\\n  };\\n  dict2: Record<string, MyTypeHere>; // equivalent to dict1\\n  disabled: boolean;\\n  message: string;\\n  /** array of a type! */\\n  names: string[];\\n  /** an object with known properties (but could have more at runtime) */\\n  obj: {\\n    id: string;\\n    title: string;\\n  };\\n  /** any non-primitive value - can't access any properties (NOT COMMON but useful as placeholder) */\\n  obj2: object;\\n  /** an interface with no required properties - (NOT COMMON, except for things like \`React.Component<{}, State>\`) */\\n  obj3: {};\\n  /** array of objects! (common) */\\n  objArr: {\\n    id: string;\\n    title: string;\\n  }[];\\n  /** function with named prop (VERY COMMON) */\\n  onChange: (id: number) => void;\\n  /** function type syntax that takes an event (VERY COMMON) */\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\\n  /** function that doesn't take or return anything (VERY COMMON) */\\n  onClick: () => void;\\n  /** alternative function type syntax that takes an event (VERY COMMON) */\\n  onClick(event: React.MouseEvent<HTMLButtonElement>): void;\\n  /** any function as long as you don't invoke it (not recommended) */\\n  onSomething: Function;\\n  /** an optional prop (VERY COMMON!) */\\n  optional?: OptionalType;\\n  /** when passing down the state setter function returned by \`useState\` to a child component. \`number\` is an example, swap out with whatever the type of your state */\\n  setState: React.Dispatch<React.SetStateAction<number>>;\\n  /** string literals to specify exact string values, with a union type to join them together */\\n  status: \\"waiting\\" | \\"success\\";"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1105,
    "column": 33,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1105,
    "endColumn": 34,
    "fix": {
      "range": [
        47019,
        47020
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1107,
    "column": 65,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1107,
    "endColumn": 66,
    "fix": {
      "range": [
        47149,
        47150
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/method-signature-style",
    "severity": 2,
    "message": "Shorthand method signature is forbidden. Use a function property instead.",
    "line": 1109,
    "column": 3,
    "nodeType": "TSMethodSignature",
    "messageId": "errorMethod",
    "endLine": 1109,
    "endColumn": 61,
    "fix": {
      "range": [
        47229,
        47287
      ],
      "text": "onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1109,
    "column": 60,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1109,
    "endColumn": 61,
    "fix": {
      "range": [
        47286,
        47287
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Don't use 'Function' as a type. Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs. See https://biomejs.dev/linter/rules/no-banned-types for more explanation.",
    "line": 1111,
    "column": 16,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1111,
    "endColumn": 24
  },
  {
    "ruleId": "@typescript-eslint/no-unsafe-function-type",
    "severity": 2,
    "message": "The \`Function\` type accepts any function-like value.\\nPrefer explicitly defining any function parameters and return type.",
    "line": 1111,
    "column": 16,
    "nodeType": "Identifier",
    "messageId": "bannedFunctionType",
    "endLine": 1111,
    "endColumn": 24
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1111,
    "column": 24,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1111,
    "endColumn": 25,
    "fix": {
      "range": [
        47382,
        47383
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1113,
    "column": 26,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1113,
    "endColumn": 27,
    "fix": {
      "range": [
        47450,
        47451
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1115,
    "column": 57,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1115,
    "endColumn": 58,
    "fix": {
      "range": [
        47676,
        47677
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1116,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1116,
    "endColumn": 3,
    "fix": {
      "range": [
        47679,
        47680
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "An empty interface is equivalent to {}. Safe fix: Use a type alias instead. See https://biomejs.dev/linter/rules/no-empty-interface for more explanation.",
    "line": 1130,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1130,
    "endColumn": 32
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "An empty interface declaration allows any non-nullish value, including literals like \`0\` and \`\\"\\"\`.\\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\\n- If you want a type meaning \\"any object\\", you probably want \`object\` instead.\\n- If you want a type meaning \\"any value\\", you probably want \`unknown\` instead.",
    "line": 1130,
    "column": 11,
    "nodeType": "Identifier",
    "messageId": "noEmptyInterface",
    "endLine": 1130,
    "endColumn": 29,
    "suggestions": [
      {
        "messageId": "replaceEmptyInterface",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            0,
            31
          ],
          "text": "type AnyNonNullishValue = object"
        },
        "desc": "Replace empty interface with \`object\`."
      },
      {
        "messageId": "replaceEmptyInterface",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            0,
            31
          ],
          "text": "type AnyNonNullishValue = unknown"
        },
        "desc": "Replace empty interface with \`unknown\`."
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1132,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1132,
    "endColumn": 31,
    "fix": {
      "range": [
        48574,
        48575
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1135,
    "column": 10,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1135,
    "endColumn": 11,
    "fix": {
      "range": [
        48635,
        48636
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"foo\\";\` with \`'foo'\`",
    "line": 1136,
    "column": 9,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1136,
    "endColumn": 15,
    "fix": {
      "range": [
        48645,
        48651
      ],
      "text": "'foo'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"foo\\");\` with \`'foo')\`",
    "line": 1137,
    "column": 21,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1137,
    "endColumn": 28,
    "fix": {
      "range": [
        48672,
        48679
      ],
      "text": "'foo')"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1138,
    "column": 11,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1138,
    "endColumn": 12,
    "fix": {
      "range": [
        48690,
        48691
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"bar\\"·};\` with \`'bar'·}\`",
    "line": 1139,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1139,
    "endColumn": 24,
    "fix": {
      "range": [
        48707,
        48715
      ],
      "text": "'bar' }"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1142,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1142,
    "endColumn": 19,
    "fix": {
      "range": [
        48754,
        48755
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1143,
    "column": 13,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1143,
    "endColumn": 14,
    "fix": {
      "range": [
        48768,
        48769
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1151,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1160,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1152,
    "column": 29,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1152,
    "endColumn": 30,
    "fix": {
      "range": [
        48954,
        48955
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1153,
    "column": 37,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1153,
    "endColumn": 38,
    "fix": {
      "range": [
        49037,
        49038
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1154,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1154,
    "endColumn": 31,
    "fix": {
      "range": [
        49094,
        49095
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \\"onChange\\" to come before \\"style\\".",
    "line": 1155,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 1155,
    "endColumn": 55,
    "fix": {
      "range": [
        49067,
        49675
      ],
      "text": "onChange?: React.FormEventHandler<HTMLInputElement>; // form events! the generic parameter is the type of event.target\\n  //  more info: https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase/#wrappingmirroring\\n  props: Props & React.ComponentPropsWithoutRef<\\"button\\">; // to impersonate all the props of a button element and explicitly not forwarding its ref\\n  props2: Props & React.ComponentPropsWithRef<MyButtonWithForwardRef>; // to impersonate all the props of MyButtonForwardedRef and explicitly forwarding its ref\\n  style?: React.CSSProperties; // to pass through style props"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1155,
    "column": 54,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1155,
    "endColumn": 55,
    "fix": {
      "range": [
        49180,
        49181
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"button\\">;\` with \`'button'>\`",
    "line": 1157,
    "column": 49,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1157,
    "endColumn": 59,
    "fix": {
      "range": [
        49414,
        49424
      ],
      "text": "'button'>"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1158,
    "column": 70,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1158,
    "endColumn": 71,
    "fix": {
      "range": [
        49584,
        49585
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 1168,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1168,
    "endColumn": 11,
    "fix": {
      "range": [
        49935,
        49982
      ],
      "text": "interface Props {\\n  children?: React.ReactNode;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1169,
    "column": 29,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1169,
    "endColumn": 30,
    "fix": {
      "range": [
        49978,
        49979
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1170,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1170,
    "endColumn": 3,
    "fix": {
      "range": [
        49981,
        49982
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1172,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1172,
    "endColumn": 14
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1173,
    "column": 31,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1173,
    "endColumn": 32,
    "fix": {
      "range": [
        50051,
        50052
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1175,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1175,
    "endColumn": 13
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1178,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1178,
    "endColumn": 28,
    "fix": {
      "range": [
        50262,
        50263
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1265,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1273,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1265,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1272,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎····props:·Props,⏎····state:·State⏎··\` with \`props:·Props,·state:·State\`",
    "line": 1266,
    "column": 35,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1269,
    "endColumn": 3,
    "fix": {
      "range": [
        55070,
        55108
      ],
      "text": "props: Props, state: State"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"null\\" to come before \\"Partial<State>\\".",
    "line": 1269,
    "column": 23,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1269,
    "endColumn": 27,
    "fix": {
      "range": [
        55111,
        55132
      ],
      "text": "null | Partial<State>"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1278,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1284,
    "endColumn": 1
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1278,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1283,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··Props,⏎··ReturnType<typeof·Comp[\\"getDerivedStateFromProps\\"]>⏎\` with \`Props,·ReturnType<(typeof·Comp)['getDerivedStateFromProps']>\`",
    "line": 1278,
    "column": 36,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1281,
    "endColumn": 1,
    "fix": {
      "range": [
        55266,
        55330
      ],
      "text": "Props, ReturnType<(typeof Comp)['getDerivedStateFromProps']>"
    }
  },
  {
    "ruleId": "@typescript-eslint/no-empty-function",
    "severity": 2,
    "message": "Unexpected empty static method 'getDerivedStateFromProps'.",
    "line": 1282,
    "column": 49,
    "nodeType": "FunctionExpression",
    "messageId": "unexpected",
    "endLine": 1282,
    "endColumn": 51
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1289,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1316,
    "endColumn": 1
  },
  {
    "ruleId": "sonarjs/redundant-type-aliases",
    "severity": 2,
    "message": "Remove this redundant type alias and replace its occurrences with \\"any\\".",
    "line": 1289,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "redundantTypeAlias",
    "endLine": 1289,
    "endColumn": 17
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1289,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1289,
    "endColumn": 24,
    "fix": {
      "range": [
        55493,
        55494
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1291,
    "column": 21,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1291,
    "endColumn": 22,
    "fix": {
      "range": [
        55533,
        55534
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1294,
    "column": 26,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1294,
    "endColumn": 27,
    "fix": {
      "range": [
        55587,
        55588
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1296,
    "column": 69,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1296,
    "endColumn": 70,
    "fix": {
      "range": [
        55659,
        55660
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"derivedState\\" to come before \\"savedPropA\\".",
    "line": 1300,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 1300,
    "endColumn": 30,
    "fix": {
      "range": [
        55723,
        55802
      ],
      "text": "derivedState: props.propA,\\n    savedPropA: props.propA, // save for memoization"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1301,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1301,
    "endColumn": 5,
    "fix": {
      "range": [
        55806,
        55807
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1303,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1315,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1305,
    "column": 17,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1305,
    "endColumn": 18,
    "fix": {
      "range": [
        55911,
        55912
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"123\\"\` with \`'123'\`",
    "line": 1307,
    "column": 24,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1307,
    "endColumn": 29,
    "fix": {
      "range": [
        55955,
        55960
      ],
      "text": "'123'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1309,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1309,
    "endColumn": 7,
    "fix": {
      "range": [
        56006,
        56007
      ],
      "text": ""
    }
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 1312,
    "column": 49,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 1312,
    "endColumn": 61,
    "fix": {
      "range": [
        56124,
        56136
      ],
      "text": "{return null;}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1312,
    "column": 60,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1312,
    "endColumn": 61,
    "fix": {
      "range": [
        56135,
        56136
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1313,
    "column": 40,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1313,
    "endColumn": 41,
    "fix": {
      "range": [
        56176,
        56177
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide an explicit type prop for the button element. The default type of a button is submit, which causes the submission of a form when placed inside a \`form\` element. This is likely not the behaviour that you want inside a React application. Allowed button types are: submit, button or reset See https://biomejs.dev/linter/rules/use-button-type for more explanation.",
    "line": 1330,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1334,
    "endColumn": 5
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 1330,
    "column": 3,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 1334,
    "endColumn": 5
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1335,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1335,
    "endColumn": 3,
    "fix": {
      "range": [
        57404,
        57405
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 1341,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1341,
    "endColumn": 11,
    "fix": {
      "range": [
        57712,
        57745
      ],
      "text": "interface State {\\n  text: string;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1342,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1342,
    "endColumn": 16,
    "fix": {
      "range": [
        57741,
        57742
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1343,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1343,
    "endColumn": 3,
    "fix": {
      "range": [
        57744,
        57745
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1344,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1360,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"\\"\` with \`''\`",
    "line": 1346,
    "column": 11,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1346,
    "endColumn": 13,
    "fix": {
      "range": [
        57818,
        57820
      ],
      "text": "''"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1347,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1347,
    "endColumn": 5,
    "fix": {
      "range": [
        57825,
        57826
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1351,
    "column": 51,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1351,
    "endColumn": 52,
    "fix": {
      "range": [
        57977,
        57978
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1352,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1352,
    "endColumn": 5,
    "fix": {
      "range": [
        57982,
        57983
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"text\\"\` with \`'text'\`",
    "line": 1356,
    "column": 21,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1356,
    "endColumn": 27,
    "fix": {
      "range": [
        58042,
        58048
      ],
      "text": "'text'"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"onChange\\" to come before \\"value\\".",
    "line": 1356,
    "column": 52,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1356,
    "endColumn": 76,
    "fix": {
      "range": [
        58037,
        58097
      ],
      "text": "onChange={this.onChange} type=\\"text\\" value={this.state.text}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1358,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1358,
    "endColumn": 7,
    "fix": {
      "range": [
        58119,
        58120
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Unexpected label. Only loops should be labeled.\\nThe use of labels for other statements is suspicious and unfamiliar. See https://biomejs.dev/linter/rules/no-confusing-labels for more explanation.",
    "line": 1369,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1369,
    "endColumn": 11
  },
  {
    "ruleId": "sonarjs/no-labels",
    "severity": 2,
    "message": "Refactor the code to remove this label and the need for it.",
    "line": 1369,
    "column": 3,
    "nodeType": null,
    "messageId": "removeLabel",
    "endLine": 1369,
    "endColumn": 11
  },
  {
    "ruleId": "sonarjs/label-position",
    "severity": 2,
    "message": "Remove this \\"onChange\\" label.",
    "line": 1369,
    "column": 3,
    "nodeType": "Identifier",
    "messageId": "removeLabel",
    "endLine": 1369,
    "endColumn": 11
  },
  {
    "ruleId": "no-unused-labels",
    "severity": 2,
    "message": "'onChange:' is defined but never used.",
    "line": 1369,
    "column": 3,
    "nodeType": "Identifier",
    "messageId": "unused",
    "endLine": 1369,
    "endColumn": 11,
    "fix": {
      "range": [
        58897,
        58907
      ],
      "text": ""
    }
  },
  {
    "ruleId": "no-labels",
    "severity": 2,
    "message": "Unexpected labeled statement.",
    "line": 1369,
    "column": 3,
    "nodeType": "LabeledStatement",
    "messageId": "unexpectedLabel",
    "endLine": 1371,
    "endColumn": 4
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1369,
    "column": 3,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1372,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Invalid assignment to \`React.ChangeEventHandler<HTMLInputElement>\` This expression cannot be assigned to See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1369,
    "column": 13,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1369,
    "endColumn": 55
  },
  {
    "ruleId": "no-invalid-this",
    "severity": 2,
    "message": "Unexpected 'this'.",
    "line": 1370,
    "column": 5,
    "nodeType": "ThisExpression",
    "messageId": "unexpectedThis",
    "endLine": 1370,
    "endColumn": 9
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Insert \`;\`",
    "line": 1387,
    "column": 1,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 1387,
    "endColumn": 1,
    "fix": {
      "range": [
        59839,
        59839
      ],
      "text": ";"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"onSubmit\\" to come before \\"ref\\".",
    "line": 1389,
    "column": 3,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1398,
    "endColumn": 5,
    "fix": {
      "range": [
        59847,
        60183
      ],
      "text": "onSubmit={(e: React.SyntheticEvent) => {\\n    e.preventDefault();\\n    const target = e.target as typeof e.target & {\\n      email: { value: string };\\n      password: { value: string };\\n    };\\n    const email = target.email.value; // typechecks!\\n    const password = target.password.value; // typechecks!\\n    // etc...\\n  }}\\n  ref={formRef}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1390,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1390,
    "endColumn": 24,
    "fix": {
      "range": [
        59926,
        59927
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \\"{ email: { value: string }; password: { value: string }; }\\" to come before \\"typeof e.target\\".",
    "line": 1391,
    "column": 50,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 1394,
    "endColumn": 6,
    "fix": {
      "range": [
        59959,
        60051
      ],
      "text": "{\\n      email: { value: string };\\n      password: { value: string };\\n    } & typeof e.target"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1392,
    "column": 31,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1392,
    "endColumn": 32,
    "fix": {
      "range": [
        60009,
        60010
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1393,
    "column": 34,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1393,
    "endColumn": 35,
    "fix": {
      "range": [
        60044,
        60045
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1394,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1394,
    "endColumn": 7,
    "fix": {
      "range": [
        60051,
        60052
      ],
      "text": ""
    }
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'email' variable.",
    "line": 1395,
    "column": 11,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1395,
    "endColumn": 16
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \\"email\\".",
    "line": 1395,
    "column": 11,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1395,
    "endColumn": 16
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1395,
    "column": 37,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1395,
    "endColumn": 38,
    "fix": {
      "range": [
        60089,
        60090
      ],
      "text": ""
    }
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'password' variable.",
    "line": 1396,
    "column": 11,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1396,
    "endColumn": 19
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \\"password\\".",
    "line": 1396,
    "column": 11,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1396,
    "endColumn": 19
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1396,
    "column": 43,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1396,
    "endColumn": 44,
    "fix": {
      "range": [
        60148,
        60149
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"email\\"·name=\\"email\\"\` with \`'email'·name='email'\`",
    "line": 1403,
    "column": 19,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1403,
    "endColumn": 39,
    "fix": {
      "range": [
        60237,
        60257
      ],
      "text": "'email' name='email'"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"name\\" to come before \\"type\\".",
    "line": 1403,
    "column": 27,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1403,
    "endColumn": 39,
    "fix": {
      "range": [
        60232,
        60257
      ],
      "text": "name=\\"email\\" type=\\"email\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"password\\"·name=\\"password\\"\` with \`'password'·name='password'\`",
    "line": 1409,
    "column": 19,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1409,
    "endColumn": 45,
    "fix": {
      "range": [
        60337,
        60363
      ],
      "text": "'password' name='password'"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"name\\" to come before \\"type\\".",
    "line": 1409,
    "column": 30,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1409,
    "endColumn": 45,
    "fix": {
      "range": [
        60332,
        60363
      ],
      "text": "name=\\"password\\" type=\\"password\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"submit\\"·value=\\"Log·in\\"\` with \`'submit'·value='Log·in'\`",
    "line": 1413,
    "column": 17,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1413,
    "endColumn": 40,
    "fix": {
      "range": [
        60413,
        60436
      ],
      "text": "'submit' value='Log in'"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1467,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1472,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1467,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1467,
    "endColumn": 39,
    "fix": {
      "range": [
        67250,
        67258
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"light\\"·|·\\"dark\\";\` with \`'light'·|·'dark'\`",
    "line": 1469,
    "column": 25,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1469,
    "endColumn": 42,
    "fix": {
      "range": [
        67284,
        67301
      ],
      "text": "'light' | 'dark'"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"\\"dark\\"\\" to come before \\"\\"light\\"\\".",
    "line": 1469,
    "column": 35,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1469,
    "endColumn": 41,
    "fix": {
      "range": [
        67284,
        67300
      ],
      "text": "\\"dark\\" | \\"light\\""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1471,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1471,
    "endColumn": 19
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"light\\");\` with \`'light')\`",
    "line": 1471,
    "column": 54,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1471,
    "endColumn": 63,
    "fix": {
      "range": [
        67356,
        67365
      ],
      "text": "'light')"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1477,
    "column": 26,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1477,
    "endColumn": 34,
    "fix": {
      "range": [
        67471,
        67479
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1479,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1479,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1479,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1487,
    "endColumn": 2
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'setTheme' variable.",
    "line": 1480,
    "column": 17,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1480,
    "endColumn": 25
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \\"setTheme\\".",
    "line": 1480,
    "column": 17,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1480,
    "endColumn": 25
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"light\\");\` with \`'light')\`",
    "line": 1480,
    "column": 56,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1480,
    "endColumn": 65,
    "fix": {
      "range": [
        67556,
        67565
      ],
      "text": "'light')"
    }
  },
  {
    "ruleId": "@eslint-react/no-context-provider",
    "severity": 1,
    "message": "In React 19, you can render '<Context>' as a provider instead of '<Context.Provider>'.",
    "line": 1483,
    "column": 5,
    "nodeType": "JSXElement",
    "messageId": "noContextProvider",
    "endLine": 1485,
    "endColumn": 29,
    "fix": {
      "range": [
        67583,
        67669
      ],
      "text": "ThemeContext value={theme}>\\n      <MyComponent />\\n    </ThemeContext"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1486,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1486,
    "endColumn": 5,
    "fix": {
      "range": [
        67674,
        67675
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1487,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1487,
    "endColumn": 3,
    "fix": {
      "range": [
        67677,
        67678
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1493,
    "column": 28,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1493,
    "endColumn": 36,
    "fix": {
      "range": [
        67775,
        67783
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1495,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1495,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1495,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1499,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1496,
    "column": 41,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1496,
    "endColumn": 42,
    "fix": {
      "range": [
        67853,
        67854
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1498,
    "column": 46,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1498,
    "endColumn": 47,
    "fix": {
      "range": [
        67901,
        67902
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1499,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1499,
    "endColumn": 3,
    "fix": {
      "range": [
        67904,
        67905
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1507,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1514,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1507,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1507,
    "endColumn": 39,
    "fix": {
      "range": [
        68049,
        68057
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1510,
    "column": 19,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1510,
    "endColumn": 20,
    "fix": {
      "range": [
        68112,
        68113
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1513,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1513,
    "endColumn": 25
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1513,
    "column": 78,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1513,
    "endColumn": 79,
    "fix": {
      "range": [
        68194,
        68195
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1517,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1517,
    "endColumn": 10
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1517,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1527,
    "endColumn": 2
  },
  {
    "ruleId": "sonarjs/no-unused-vars",
    "severity": 2,
    "message": "Remove the declaration of the unused 'setCurrentUser' variable.",
    "line": 1518,
    "column": 23,
    "nodeType": "Identifier",
    "messageId": "unusedVariable",
    "endLine": 1518,
    "endColumn": 37
  },
  {
    "ruleId": "sonarjs/no-dead-store",
    "severity": 2,
    "message": "Remove this useless assignment to variable \\"setCurrentUser\\".",
    "line": 1518,
    "column": 23,
    "nodeType": null,
    "messageId": "removeAssignment",
    "endLine": 1518,
    "endColumn": 37
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"filiptammergard\\"\` with \`'filiptammergard'\`",
    "line": 1519,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1519,
    "endColumn": 32,
    "fix": {
      "range": [
        68317,
        68334
      ],
      "text": "'filiptammergard'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1520,
    "column": 5,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1520,
    "endColumn": 6,
    "fix": {
      "range": [
        68340,
        68341
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-context-provider",
    "severity": 1,
    "message": "In React 19, you can render '<Context>' as a provider instead of '<Context.Provider>'.",
    "line": 1523,
    "column": 5,
    "nodeType": "JSXElement",
    "messageId": "noContextProvider",
    "endLine": 1525,
    "endColumn": 35,
    "fix": {
      "range": [
        68359,
        68463
      ],
      "text": "CurrentUserContext value={currentUser}>\\n      <MyComponent />\\n    </CurrentUserContext"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1526,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1526,
    "endColumn": 5,
    "fix": {
      "range": [
        68468,
        68469
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1527,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1527,
    "endColumn": 3,
    "fix": {
      "range": [
        68471,
        68472
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1533,
    "column": 28,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1533,
    "endColumn": 36,
    "fix": {
      "range": [
        68743,
        68751
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1535,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1535,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1535,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1539,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1536,
    "column": 53,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1536,
    "endColumn": 54,
    "fix": {
      "range": [
        68833,
        68834
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1538,
    "column": 47,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1538,
    "endColumn": 48,
    "fix": {
      "range": [
        68882,
        68883
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1539,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1539,
    "endColumn": 3,
    "fix": {
      "range": [
        68885,
        68886
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1545,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1564,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1545,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1545,
    "endColumn": 39,
    "fix": {
      "range": [
        69167,
        69175
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1548,
    "column": 19,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1548,
    "endColumn": 20,
    "fix": {
      "range": [
        69230,
        69231
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1551,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1551,
    "endColumn": 25
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1551,
    "column": 78,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1551,
    "endColumn": 79,
    "fix": {
      "range": [
        69312,
        69313
      ],
      "text": ""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1553,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1563,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1554,
    "column": 60,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1554,
    "endColumn": 61,
    "fix": {
      "range": [
        69405,
        69406
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎······\\"useCurrentUser·has·to·be·used·within·<CurrentUserContext.Provider>\\"⏎····);\` with \`'useCurrentUser·has·to·be·used·within·<CurrentUserContext.Provider>')\`",
    "line": 1557,
    "column": 21,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1559,
    "endColumn": 7,
    "fix": {
      "range": [
        69457,
        69539
      ],
      "text": "'useCurrentUser has to be used within <CurrentUserContext.Provider>')"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1562,
    "column": 28,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1562,
    "endColumn": 29,
    "fix": {
      "range": [
        69572,
        69573
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1563,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1563,
    "endColumn": 3,
    "fix": {
      "range": [
        69575,
        69576
      ],
      "text": ""
    }
  },
  {
    "ruleId": "sonarjs/unused-import",
    "severity": 2,
    "message": "Remove this unused import of 'useContext'.",
    "line": 1569,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "removeUnusedImport",
    "endLine": 1569,
    "endColumn": 20,
    "suggestions": [
      {
        "messageId": "suggestRemoveWholeStatement",
        "fix": {
          "range": [
            0,
            35
          ],
          "text": ""
        },
        "desc": "Remove this import statement"
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1569,
    "column": 28,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1569,
    "endColumn": 36,
    "fix": {
      "range": [
        69859,
        69867
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1571,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1571,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1571,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1575,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1572,
    "column": 39,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1572,
    "endColumn": 40,
    "fix": {
      "range": [
        69935,
        69936
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1574,
    "column": 50,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1574,
    "endColumn": 51,
    "fix": {
      "range": [
        69987,
        69988
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1575,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1575,
    "endColumn": 3,
    "fix": {
      "range": [
        69990,
        69991
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1583,
    "column": 28,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1583,
    "endColumn": 36,
    "fix": {
      "range": [
        70200,
        70208
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1585,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1585,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 1585,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 1589,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1586,
    "column": 53,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1586,
    "endColumn": 54,
    "fix": {
      "range": [
        70290,
        70291
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion. Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 1588,
    "column": 20,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1588,
    "endColumn": 32
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1588,
    "column": 47,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1588,
    "endColumn": 48,
    "fix": {
      "range": [
        70339,
        70340
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1589,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1589,
    "endColumn": 3,
    "fix": {
      "range": [
        70342,
        70343
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1595,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1598,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1595,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1595,
    "endColumn": 25
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··{}·as·CurrentUserContextType⏎);\` with \`{}·as·CurrentUserContextType)\`",
    "line": 1595,
    "column": 66,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1597,
    "endColumn": 3,
    "fix": {
      "range": [
        70522,
        70556
      ],
      "text": "{} as CurrentUserContextType)"
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1603,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1604,
    "endColumn": 1
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1603,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1603,
    "endColumn": 25
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion.  See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 1603,
    "column": 66,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1603,
    "endColumn": 71
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1603,
    "column": 72,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1603,
    "endColumn": 73,
    "fix": {
      "range": [
        70701,
        70702
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1619,
    "column": 42,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1619,
    "endColumn": 50,
    "fix": {
      "range": [
        71077,
        71085
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1621,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1626,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1622,
    "column": 48,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1622,
    "endColumn": 49,
    "fix": {
      "range": [
        71188,
        71189
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1624,
    "column": 63,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1624,
    "endColumn": 64,
    "fix": {
      "range": [
        71278,
        71279
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \\"ReactNode\\" are only used as type.",
    "line": 1632,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1632,
    "endColumn": 47,
    "fix": {
      "range": [
        71334,
        71343
      ],
      "text": "type ReactNode"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Some named imports are only used as types. This import is only used as a type. Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules. Safe fix: Add inline type keywords. See https://biomejs.dev/linter/rules/use-import-type for more explanation.",
    "line": 1632,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1632,
    "endColumn": 46
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1632,
    "column": 39,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1632,
    "endColumn": 47,
    "fix": {
      "range": [
        71351,
        71359
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1635,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1635,
    "endColumn": 24,
    "fix": {
      "range": [
        71401,
        71402
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"submit\\"·|·\\"button\\";\` with \`'submit'·|·'button'\`",
    "line": 1636,
    "column": 9,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1636,
    "endColumn": 29,
    "fix": {
      "range": [
        71411,
        71431
      ],
      "text": "'submit' | 'button'"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"\\"button\\"\\" to come before \\"\\"submit\\"\\".",
    "line": 1636,
    "column": 20,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1636,
    "endColumn": 28,
    "fix": {
      "range": [
        71411,
        71430
      ],
      "text": "\\"button\\" | \\"submit\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1638,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1638,
    "endColumn": 37,
    "fix": {
      "range": [
        71469,
        71470
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-forward-ref",
    "severity": 1,
    "message": "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.",
    "line": 1640,
    "column": 28,
    "nodeType": "CallExpression",
    "messageId": "noForwardRef",
    "endLine": 1644,
    "endColumn": 3,
    "fix": {
      "range": [
        71499,
        71638
      ],
      "text": "({ ref, ...props }: Props & { ref: React.RefObject<Ref> }) => (\\n  <button ref={ref} className=\\"MyClassName\\" type={props.type}>\\n    {props.children}\\n  </button>\\n)"
    }
  },
  {
    "ruleId": "@eslint-react/no-missing-component-display-name",
    "severity": 2,
    "message": "Add missing 'displayName' for component.",
    "line": 1640,
    "column": 51,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noMissingComponentDisplayName",
    "endLine": 1644,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"className\\" to come before \\"ref\\".",
    "line": 1641,
    "column": 21,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1641,
    "endColumn": 44,
    "fix": {
      "range": [
        71550,
        71583
      ],
      "text": "className=\\"MyClassName\\" ref={ref}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"MyClassName\\"\` with \`'MyClassName'\`",
    "line": 1641,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1641,
    "endColumn": 44,
    "fix": {
      "range": [
        71570,
        71583
      ],
      "text": "'MyClassName'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1644,
    "column": 3,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1644,
    "endColumn": 4,
    "fix": {
      "range": [
        71638,
        71639
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \\"ReactNode\\" and \\"Ref\\" are only used as type.",
    "line": 1653,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1653,
    "endColumn": 52,
    "fix": {
      "range": [
        72023,
        72037
      ],
      "text": "type ReactNode, type Ref"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Some named imports are only used as types. This import is only used as a type. This import is only used as a type. Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules. Safe fix: Add inline type keywords. See https://biomejs.dev/linter/rules/use-import-type for more explanation.",
    "line": 1653,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1653,
    "endColumn": 51
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1653,
    "column": 44,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1653,
    "endColumn": 52,
    "fix": {
      "range": [
        72045,
        72053
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1656,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1656,
    "endColumn": 24,
    "fix": {
      "range": [
        72095,
        72096
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"submit\\"·|·\\"button\\";\` with \`'submit'·|·'button'\`",
    "line": 1657,
    "column": 9,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1657,
    "endColumn": 29,
    "fix": {
      "range": [
        72105,
        72125
      ],
      "text": "'submit' | 'button'"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"\\"button\\"\\" to come before \\"\\"submit\\"\\".",
    "line": 1657,
    "column": 20,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1657,
    "endColumn": 28,
    "fix": {
      "range": [
        72105,
        72124
      ],
      "text": "\\"button\\" | \\"submit\\""
    }
  },
  {
    "ruleId": "@eslint-react/no-forward-ref",
    "severity": 1,
    "message": "In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.",
    "line": 1660,
    "column": 28,
    "nodeType": "CallExpression",
    "messageId": "noForwardRef",
    "endLine": 1669,
    "endColumn": 2,
    "fix": {
      "range": [
        72156,
        72351
      ],
      "text": "(\\n    { ref, ...props } // <-- here!\\n  ) => (\\n    <button ref={ref} className=\\"MyClassName\\" type={props.type}>\\n      {props.children}\\n    </button>\\n  )"
    }
  },
  {
    "ruleId": "@eslint-react/no-missing-component-display-name",
    "severity": 2,
    "message": "Add missing 'displayName' for component.",
    "line": 1661,
    "column": 3,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noMissingComponentDisplayName",
    "endLine": 1668,
    "endColumn": 4
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Insert \`,\`",
    "line": 1663,
    "column": 32,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 1663,
    "endColumn": 32,
    "fix": {
      "range": [
        72221,
        72221
      ],
      "text": ","
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"className\\" to come before \\"ref\\".",
    "line": 1665,
    "column": 23,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1665,
    "endColumn": 46,
    "fix": {
      "range": [
        72256,
        72289
      ],
      "text": "className=\\"MyClassName\\" ref={ref}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"MyClassName\\"\` with \`'MyClassName'\`",
    "line": 1665,
    "column": 33,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1665,
    "endColumn": 46,
    "fix": {
      "range": [
        72276,
        72289
      ],
      "text": "'MyClassName'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Insert \`,\`",
    "line": 1668,
    "column": 4,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 1668,
    "endColumn": 4,
    "fix": {
      "range": [
        72349,
        72349
      ],
      "text": ","
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1669,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1669,
    "endColumn": 3,
    "fix": {
      "range": [
        72351,
        72352
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '>' expected.",
    "line": 1691,
    "column": 8
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '>' expected.",
    "line": 1726,
    "column": 8
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1757,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1775,
    "endColumn": 1
  },
  {
    "ruleId": "unicorn/prefer-query-selector",
    "severity": 2,
    "message": "Prefer \`.querySelector()\` over \`.getElementById()\`.",
    "line": 1757,
    "column": 28,
    "nodeType": "Identifier",
    "messageId": "prefer-query-selector",
    "endLine": 1757,
    "endColumn": 42,
    "fix": {
      "range": [
        74481,
        74508
      ],
      "text": "querySelector(\\"#modal-root\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"modal-root\\")·as·HTMLElement;\` with \`'modal-root')·as·HTMLElement\`",
    "line": 1757,
    "column": 43,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1757,
    "endColumn": 72,
    "fix": {
      "range": [
        74496,
        74525
      ],
      "text": "'modal-root') as HTMLElement"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1760,
    "column": 8,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1774,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"div\\");\` with \`'div')\`",
    "line": 1761,
    "column": 44,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1761,
    "endColumn": 51,
    "fix": {
      "range": [
        74709,
        74716
      ],
      "text": "'div')"
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-append",
    "severity": 2,
    "message": "Prefer \`Node#append()\` over \`Node#appendChild()\`.",
    "line": 1764,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "prefer-dom-node-append",
    "endLine": 1764,
    "endColumn": 35,
    "fix": {
      "range": [
        74756,
        74767
      ],
      "text": "append"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1764,
    "column": 35,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1764,
    "endColumn": 36,
    "fix": {
      "range": [
        74776,
        74777
      ],
      "text": ""
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-remove",
    "severity": 2,
    "message": "Prefer \`childNode.remove()\` over \`parentNode.removeChild(childNode)\`.",
    "line": 1768,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "error",
    "endLine": 1768,
    "endColumn": 35,
    "fix": {
      "range": [
        74814,
        74844
      ],
      "text": "this.el.remove()"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1768,
    "column": 35,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1768,
    "endColumn": 36,
    "fix": {
      "range": [
        74844,
        74845
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1772,
    "column": 63,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1772,
    "endColumn": 64,
    "fix": {
      "range": [
        74926,
        74927
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 1785,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 1809,
    "endColumn": 1
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \\"ReactNode\\" are only used as type.",
    "line": 1785,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1785,
    "endColumn": 54,
    "fix": {
      "range": [
        75642,
        75651
      ],
      "text": "type ReactNode"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Some named imports are only used as types. This import is only used as a type. Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules. Safe fix: Add inline type keywords. See https://biomejs.dev/linter/rules/use-import-type for more explanation.",
    "line": 1785,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1785,
    "endColumn": 53
  },
  {
    "ruleId": "perfectionist/sort-named-imports",
    "severity": 2,
    "message": "Expected \\"ReactNode\\" to come before \\"useRef\\".",
    "line": 1785,
    "column": 29,
    "nodeType": "ImportSpecifier",
    "messageId": "unexpectedNamedImportsOrder",
    "endLine": 1785,
    "endColumn": 38,
    "fix": {
      "range": [
        75623,
        75651
      ],
      "text": "ReactNode, useEffect, useRef"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1785,
    "column": 46,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1785,
    "endColumn": 54,
    "fix": {
      "range": [
        75659,
        75667
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react-dom\\";\` with \`'react-dom'\`",
    "line": 1786,
    "column": 30,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1786,
    "endColumn": 42,
    "fix": {
      "range": [
        75697,
        75709
      ],
      "text": "'react-dom'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"#modal-root\\")·as·HTMLElement;\` with \`'#modal-root')·as·HTMLElement\`",
    "line": 1788,
    "column": 42,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1788,
    "endColumn": 72,
    "fix": {
      "range": [
        75752,
        75782
      ],
      "text": "'#modal-root') as HTMLElement"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 1790,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 1790,
    "endColumn": 16,
    "fix": {
      "range": [
        75784,
        75829
      ],
      "text": "interface ModalProps {\\n  children: ReactNode;\\n}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1791,
    "column": 22,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1791,
    "endColumn": 23,
    "fix": {
      "range": [
        75825,
        75826
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1792,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1792,
    "endColumn": 3,
    "fix": {
      "range": [
        75828,
        75829
      ],
      "text": ""
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1794,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1794,
    "endColumn": 15
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1796,
    "column": 52,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1796,
    "endColumn": 53,
    "fix": {
      "range": [
        75969,
        75970
      ],
      "text": ""
    }
  },
  {
    "ruleId": "curly",
    "severity": 2,
    "message": "Expected { after 'if' condition.",
    "line": 1797,
    "column": 23,
    "nodeType": "IfStatement",
    "messageId": "missingCurlyAfterCondition",
    "endLine": 1797,
    "endColumn": 69,
    "fix": {
      "range": [
        75993,
        76039
      ],
      "text": "{elRef.current = document.createElement(\\"div\\");}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"div\\");\` with \`'div')\`",
    "line": 1797,
    "column": 62,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1797,
    "endColumn": 69,
    "fix": {
      "range": [
        76032,
        76039
      ],
      "text": "'div')"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion.  See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 1800,
    "column": 16,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1800,
    "endColumn": 30
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1800,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1800,
    "endColumn": 31,
    "fix": {
      "range": [
        76090,
        76091
      ],
      "text": ""
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-append",
    "severity": 2,
    "message": "Prefer \`Node#append()\` over \`Node#appendChild()\`.",
    "line": 1801,
    "column": 5,
    "nodeType": "CallExpression",
    "messageId": "prefer-dom-node-append",
    "endLine": 1801,
    "endColumn": 30,
    "fix": {
      "range": [
        76158,
        76169
      ],
      "text": "append"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1801,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1801,
    "endColumn": 31,
    "fix": {
      "range": [
        76173,
        76174
      ],
      "text": ""
    }
  },
  {
    "ruleId": "unicorn/prefer-dom-node-remove",
    "severity": 2,
    "message": "Prefer \`childNode.remove()\` over \`parentNode.removeChild(childNode)\`.",
    "line": 1803,
    "column": 7,
    "nodeType": "CallExpression",
    "messageId": "error",
    "endLine": 1803,
    "endColumn": 32,
    "fix": {
      "range": [
        76200,
        76225
      ],
      "text": "el.remove()"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1803,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1803,
    "endColumn": 33,
    "fix": {
      "range": [
        76225,
        76226
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1804,
    "column": 6,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1804,
    "endColumn": 7,
    "fix": {
      "range": [
        76232,
        76233
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1805,
    "column": 9,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1805,
    "endColumn": 10,
    "fix": {
      "range": [
        76242,
        76243
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1807,
    "column": 47,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1807,
    "endColumn": 48,
    "fix": {
      "range": [
        76291,
        76292
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"react\\";\` with \`'react'\`",
    "line": 1818,
    "column": 26,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1818,
    "endColumn": 34,
    "fix": {
      "range": [
        77740,
        77748
      ],
      "text": "'react'"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 1820,
    "column": 10,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 1820,
    "endColumn": 13
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1821,
    "column": 52,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1821,
    "endColumn": 53,
    "fix": {
      "range": [
        77818,
        77819
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-comment-textnodes",
    "severity": 1,
    "message": "Possible misused comment in text node. Comments inside children section of tag should be placed inside braces.",
    "line": 1824,
    "column": 10,
    "nodeType": "JSXText",
    "messageId": "noCommentTextnodes",
    "endLine": 1826,
    "endColumn": 7
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Wrap comments inside children within braces. Unsafe fix: Wrap the comments with braces See https://biomejs.dev/linter/rules/no-comment-text for more explanation.",
    "line": 1825,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1825,
    "endColumn": 56
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing. Unsafe fix: Use a SelfClosingElement instead See https://biomejs.dev/linter/rules/use-self-closing-elements for more explanation.",
    "line": 1826,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1826,
    "endColumn": 34
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"modal-root\\"\` with \`'modal-root'\`",
    "line": 1826,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1826,
    "endColumn": 27,
    "fix": {
      "range": [
        77912,
        77924
      ],
      "text": "'modal-root'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"grid\\"\` with \`'grid'\`",
    "line": 1831,
    "column": 24,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1831,
    "endColumn": 30,
    "fix": {
      "range": [
        78029,
        78035
      ],
      "text": "'grid'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"center\\"\` with \`'center'\`",
    "line": 1832,
    "column": 27,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1832,
    "endColumn": 35,
    "fix": {
      "range": [
        78063,
        78071
      ],
      "text": "'center'"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"height\\" to come before \\"placeItems\\".",
    "line": 1833,
    "column": 15,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 1833,
    "endColumn": 30,
    "fix": {
      "range": [
        78020,
        78177
      ],
      "text": "background: \\"rgba(0,0,0,0.1)\\",\\n              display: \\"grid\\",\\n              height: \\"100vh\\",\\n              placeItems: \\"center\\",\\n              width: \\"100vh\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"100vh\\"\` with \`'100vh'\`",
    "line": 1833,
    "column": 23,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1833,
    "endColumn": 30,
    "fix": {
      "range": [
        78095,
        78102
      ],
      "text": "'100vh'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"100vh\\"\` with \`'100vh'\`",
    "line": 1834,
    "column": 22,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1834,
    "endColumn": 29,
    "fix": {
      "range": [
        78125,
        78132
      ],
      "text": "'100vh'"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"background\\" to come before \\"width\\".",
    "line": 1835,
    "column": 15,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 1835,
    "endColumn": 44,
    "fix": {
      "range": [
        78020,
        78177
      ],
      "text": "background: \\"rgba(0,0,0,0.1)\\",\\n              display: \\"grid\\",\\n              height: \\"100vh\\",\\n              placeItems: \\"center\\",\\n              width: \\"100vh\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"rgba(0,0,0,0.1)\\"\` with \`'rgba(0,0,0,0.1)'\`",
    "line": 1835,
    "column": 27,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1835,
    "endColumn": 44,
    "fix": {
      "range": [
        78160,
        78177
      ],
      "text": "'rgba(0,0,0,0.1)'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"·\\"\` with \`'·'\`",
    "line": 1839,
    "column": 26,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1839,
    "endColumn": 29,
    "fix": {
      "range": [
        78257,
        78260
      ],
      "text": "' '"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide an explicit type prop for the button element. The default type of a button is submit, which causes the submission of a form when placed inside a \`form\` element. This is likely not the behaviour that you want inside a React application. Allowed button types are: submit, button or reset See https://biomejs.dev/linter/rules/use-button-type for more explanation.",
    "line": 1840,
    "column": 13,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1843,
    "endColumn": 14
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 1840,
    "column": 13,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 1845,
    "endColumn": 22
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··············style={{·background:·\\"papyawhip\\"·}}⏎··············onClick={()·=>·setShowModal(false)}⏎············\` with \`·style={{·background:·'papyawhip'·}}·onClick={()·=>·setShowModal(false)}\`",
    "line": 1840,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1843,
    "endColumn": 13,
    "fix": {
      "range": [
        78281,
        78394
      ],
      "text": " style={{ background: 'papyawhip' }} onClick={() => setShowModal(false)}"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"onClick\\" to come before \\"style\\".",
    "line": 1842,
    "column": 15,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 1842,
    "endColumn": 50,
    "fix": {
      "range": [
        78296,
        78381
      ],
      "text": "onClick={() => setShowModal(false)}\\n              style={{ background: \\"papyawhip\\" }}"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Provide an explicit type prop for the button element. The default type of a button is submit, which causes the submission of a form when placed inside a \`form\` element. This is likely not the behaviour that you want inside a React application. Allowed button types are: submit, button or reset See https://biomejs.dev/linter/rules/use-button-type for more explanation.",
    "line": 1849,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1849,
    "endColumn": 50
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 1849,
    "column": 7,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 1849,
    "endColumn": 69
  },
  {
    "ruleId": "@eslint-react/no-comment-textnodes",
    "severity": 1,
    "message": "Possible misused comment in text node. Comments inside children section of tag should be placed inside braces.",
    "line": 1849,
    "column": 69,
    "nodeType": "JSXText",
    "messageId": "noCommentTextnodes",
    "endLine": 1851,
    "endColumn": 5
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Wrap comments inside children within braces. Unsafe fix: Wrap the comments with braces See https://biomejs.dev/linter/rules/no-comment-text for more explanation.",
    "line": 1850,
    "column": 7,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1850,
    "endColumn": 26
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1852,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1852,
    "endColumn": 5,
    "fix": {
      "range": [
        78590,
        78591
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "Imports \\"ErrorInfo\\" and \\"ReactNode\\" are only used as type.",
    "line": 1880,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "someImportsAreOnlyTypes",
    "endLine": 1880,
    "endColumn": 64,
    "fix": {
      "range": [
        79405,
        79425
      ],
      "text": "type ErrorInfo, type ReactNode"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "interface are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1882,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1884,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "interface are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1886,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1888,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "type arguments are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1890,
    "column": 38,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1890,
    "endColumn": 52
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "'public' modifier can only be used in TypeScript files  See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1891,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1891,
    "endColumn": 9
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "return types can only be used in TypeScript files remove this type annotation See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1891,
    "column": 15,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1891,
    "endColumn": 22
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "'public' modifier can only be used in TypeScript files  See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1895,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1895,
    "endColumn": 9
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Type annotations are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1895,
    "column": 43,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1895,
    "endColumn": 50
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "return type annotation are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1895,
    "column": 51,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1895,
    "endColumn": 58
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "'public' modifier can only be used in TypeScript files  See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1900,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1900,
    "endColumn": 9
  },
  {
    "ruleId": "@typescript-eslint/class-methods-use-this",
    "severity": 2,
    "message": "Expected 'this' to be used by class method 'componentDidCatch'.",
    "line": 1900,
    "column": 3,
    "nodeType": "FunctionExpression",
    "messageId": "missingThis",
    "endLine": 1900,
    "endColumn": 27
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Type annotations are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1900,
    "column": 33,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1900,
    "endColumn": 40
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Type annotations are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax. TypeScript only syntax See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1900,
    "column": 51,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1900,
    "endColumn": 62
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This code is unreachable ... because this statement will return from the function beforehand See https://biomejs.dev/linter/rules/no-unreachable for more explanation.",
    "line": 1901,
    "column": 5,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1901,
    "endColumn": 56
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "'public' modifier can only be used in TypeScript files  See https://biomejs.dev/linter/rules/parse for more explanation.",
    "line": 1904,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1904,
    "endColumn": 9
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This code is unreachable ... because this statement will return from the function beforehand See https://biomejs.dev/linter/rules/no-unreachable for more explanation.",
    "line": 1905,
    "column": 5,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1909,
    "endColumn": 32
  },
  {
    "ruleId": "vue/require-direct-export",
    "severity": 2,
    "message": "Expected the component literal to be directly exported.",
    "line": 1913,
    "column": 1,
    "nodeType": "ExportDefaultDeclaration",
    "messageId": "expectedDirectExport",
    "endLine": 1913,
    "endColumn": 30
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 1946,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 1963,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Don't use '{}' as a type. Prefer explicitly define the object shape. '{}' means \\"any non-nullable value\\". See https://biomejs.dev/linter/rules/no-banned-types for more explanation.",
    "line": 1947,
    "column": 3,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1947,
    "endColumn": 5
  },
  {
    "ruleId": "@typescript-eslint/no-empty-object-type",
    "severity": 2,
    "message": "The \`{}\` (\\"empty object\\") type allows any non-nullish value, including literals like \`0\` and \`\\"\\"\`.\\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\\n- If you want a type meaning \\"any object\\", you probably want \`object\` instead.\\n- If you want a type meaning \\"any value\\", you probably want \`unknown\` instead.",
    "line": 1947,
    "column": 3,
    "nodeType": "TSTypeLiteral",
    "messageId": "noEmptyObject",
    "endLine": 1947,
    "endColumn": 5,
    "suggestions": [
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "object"
        },
        "fix": {
          "range": [
            37,
            39
          ],
          "text": "object"
        },
        "desc": "Replace \`{}\` with \`object\`."
      },
      {
        "messageId": "replaceEmptyObjectType",
        "data": {
          "replacement": "unknown"
        },
        "fix": {
          "range": [
            37,
            39
          ],
          "text": "unknown"
        },
        "desc": "Replace \`{}\` with \`unknown\`."
      }
    ]
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"null\\" to come before \\"number\\".",
    "line": 1949,
    "column": 21,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 1949,
    "endColumn": 25,
    "fix": {
      "range": [
        81401,
        81414
      ],
      "text": "null | number"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1949,
    "column": 25,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1949,
    "endColumn": 26,
    "fix": {
      "range": [
        81414,
        81415
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1954,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1954,
    "endColumn": 5,
    "fix": {
      "range": [
        81469,
        81470
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Enforce to have the onClick mouse event with the onKeyUp, the onKeyDown, or the onKeyPress keyboard event. Actions triggered using mouse events should have corresponding keyboard events to account for keyboard-only navigation. See https://biomejs.dev/linter/rules/use-key-with-click-events for more explanation.",
    "line": 1956,
    "column": 12,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 1956,
    "endColumn": 51
  },
  {
    "ruleId": "jsx-a11y/click-events-have-key-events",
    "severity": 2,
    "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
    "line": 1956,
    "column": 12,
    "nodeType": "JSXOpeningElement",
    "endLine": 1956,
    "endColumn": 51
  },
  {
    "ruleId": "jsx-a11y/no-static-element-interactions",
    "severity": 2,
    "message": "Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.",
    "line": 1956,
    "column": 12,
    "nodeType": "JSXOpeningElement",
    "endLine": 1956,
    "endColumn": 51
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1956,
    "column": 75,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1956,
    "endColumn": 76,
    "fix": {
      "range": [
        81558,
        81559
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-classes",
    "severity": 2,
    "message": "Expected \\"increment\\" to come before \\"render\\".",
    "line": 1958,
    "column": 3,
    "nodeType": "PropertyDefinition",
    "messageId": "unexpectedClassesOrder",
    "endLine": 1962,
    "endColumn": 5,
    "fix": {
      "range": [
        81473,
        81681
      ],
      "text": "increment = (amt: number) => {\\n    this.setState((state) => ({\\n      count: (state.count || 0) + amt,\\n    }));\\n  };\\n  render() {\\n    return <div onClick={() => this.increment(1)}>{this.state.count}</div>;\\n  }"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1961,
    "column": 8,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1961,
    "endColumn": 9,
    "fix": {
      "range": [
        81675,
        81676
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1962,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1962,
    "endColumn": 5,
    "fix": {
      "range": [
        81680,
        81681
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1972,
    "column": 15,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1972,
    "endColumn": 16,
    "fix": {
      "range": [
        82563,
        82564
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1975,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1975,
    "endColumn": 17,
    "fix": {
      "range": [
        82599,
        82600
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"role\\"\` with \`'role'\`",
    "line": 1980,
    "column": 7,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1980,
    "endColumn": 13,
    "fix": {
      "range": [
        82680,
        82686
      ],
      "text": "'role'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1982,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1982,
    "endColumn": 33,
    "fix": {
      "range": [
        82787,
        82788
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1984,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1984,
    "endColumn": 33,
    "fix": {
      "range": [
        82831,
        82832
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 1990,
    "column": 42,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 1990,
    "endColumn": 43,
    "fix": {
      "range": [
        83034,
        83035
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 2005,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 2012,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2006,
    "column": 19,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2006,
    "endColumn": 20,
    "fix": {
      "range": [
        84636,
        84637
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"default\\"·}·=·this.props;\` with \`'default'·}·=·this.props\`",
    "line": 2009,
    "column": 23,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2009,
    "endColumn": 48,
    "fix": {
      "range": [
        84691,
        84716
      ],
      "text": "'default' } = this.props"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2010,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2010,
    "endColumn": 33,
    "fix": {
      "range": [
        84748,
        84749
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2026,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2027,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"left\\"·|·\\"right\\"·|·\\"top\\"·|·\\"bottom\\";\` with \`'left'·|·'right'·|·'top'·|·'bottom'\`",
    "line": 2026,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2026,
    "endColumn": 68,
    "fix": {
      "range": [
        85352,
        85388
      ],
      "text": "'left' | 'right' | 'top' | 'bottom'"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"\\"bottom\\"\\" to come before \\"\\"top\\"\\".",
    "line": 2026,
    "column": 59,
    "nodeType": "TSLiteralType",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 2026,
    "endColumn": 67,
    "fix": {
      "range": [
        85352,
        85387
      ],
      "text": "\\"bottom\\" | \\"left\\" | \\"right\\" | \\"top\\""
    }
  },
  {
    "ruleId": "no-restricted-syntax",
    "severity": 2,
    "message": "Don't declare enums",
    "line": 2032,
    "column": 8,
    "nodeType": "TSEnumDeclaration",
    "messageId": "restrictedSyntax",
    "endLine": 2036,
    "endColumn": 2
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
    "line": 2032,
    "column": 13,
    "nodeType": "Identifier",
    "messageId": "namedExport",
    "endLine": 2032,
    "endColumn": 24
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"default\\"\` with \`'default'\`",
    "line": 2033,
    "column": 13,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2033,
    "endColumn": 22,
    "fix": {
      "range": [
        85571,
        85580
      ],
      "text": "'default'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"small\\"\` with \`'small'\`",
    "line": 2034,
    "column": 11,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2034,
    "endColumn": 18,
    "fix": {
      "range": [
        85592,
        85599
      ],
      "text": "'small'"
    }
  },
  {
    "ruleId": "perfectionist/sort-enums",
    "severity": 2,
    "message": "Expected \\"large\\" to come before \\"small\\".",
    "line": 2035,
    "column": 3,
    "nodeType": "TSEnumMember",
    "messageId": "unexpectedEnumsOrder",
    "endLine": 2035,
    "endColumn": 18,
    "fix": {
      "range": [
        85584,
        85618
      ],
      "text": "large = \\"large\\",\\n  small = \\"small\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"large\\"\` with \`'large'\`",
    "line": 2035,
    "column": 11,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2035,
    "endColumn": 18,
    "fix": {
      "range": [
        85611,
        85618
      ],
      "text": "'large'"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2039,
    "column": 14,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2041,
    "endColumn": 54
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··props:·Props·&·React.HTMLProps<HTMLButtonElement>⏎)·=>·<Button·size={ButtonSizes.default}·{...props}·/>;\` with \`props:·Props·&·React.HTMLProps<HTMLButtonElement>)·=>·(⏎··<Button·size={ButtonSizes.default}·{...props}·/>⏎)\`",
    "line": 2039,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2041,
    "endColumn": 55,
    "fix": {
      "range": [
        85662,
        85769
      ],
      "text": "props: Props & React.HTMLProps<HTMLButtonElement>) => (\\n  <Button size={ButtonSizes.default} {...props} />\\n)"
    }
  },
  {
    "ruleId": "@eslint-react/no-class-component",
    "severity": 2,
    "message": "Do not use class components. Use function components instead.",
    "line": 2049,
    "column": 1,
    "nodeType": "ClassDeclaration",
    "messageId": "noClassComponent",
    "endLine": 2058,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2050,
    "column": 18,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2050,
    "endColumn": 19,
    "fix": {
      "range": [
        86133,
        86134
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2053,
    "column": 35,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2053,
    "endColumn": 36,
    "fix": {
      "range": [
        86187,
        86188
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`(⏎······<Component2·message={message·as·SpecialMessageType}>{message}</Component2>⏎····);\` with \`<Component2·message={message·as·SpecialMessageType}>{message}</Component2>\`",
    "line": 2054,
    "column": 12,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2056,
    "endColumn": 7,
    "fix": {
      "range": [
        86200,
        86289
      ],
      "text": "<Component2 message={message as SpecialMessageType}>{message}</Component2>"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion. Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 2068,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2068,
    "endColumn": 20
  },
  {
    "ruleId": "unicorn/prefer-dom-node-remove",
    "severity": 2,
    "message": "Prefer \`childNode.remove()\` over \`parentNode.removeChild(childNode)\`.",
    "line": 2068,
    "column": 1,
    "nodeType": "CallExpression",
    "messageId": "error",
    "endLine": 2068,
    "endColumn": 41,
    "fix": {
      "range": [
        87018,
        87058
      ],
      "text": "element.remove()"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2068,
    "column": 41,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2068,
    "endColumn": 42,
    "fix": {
      "range": [
        87058,
        87059
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion.  See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 2069,
    "column": 12,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2069,
    "endColumn": 48
  },
  {
    "ruleId": "unicorn/prefer-query-selector",
    "severity": 2,
    "message": "Prefer \`.querySelector()\` over \`.getElementById()\`.",
    "line": 2069,
    "column": 21,
    "nodeType": "Identifier",
    "messageId": "prefer-query-selector",
    "endLine": 2069,
    "endColumn": 35
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Forbidden non-null assertion.  See https://biomejs.dev/linter/rules/no-non-null-assertion for more explanation.",
    "line": 2069,
    "column": 36,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2069,
    "endColumn": 46
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2069,
    "column": 49,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2069,
    "endColumn": 50,
    "fix": {
      "range": [
        87131,
        87132
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2070,
    "column": 20,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2070,
    "endColumn": 21,
    "fix": {
      "range": [
        87186,
        87187
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \\"{ readonly brand: unique symbol }\\" to come before \\"string\\".",
    "line": 2080,
    "column": 25,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 2080,
    "endColumn": 58,
    "fix": {
      "range": [
        87549,
        87591
      ],
      "text": "{ readonly brand: unique symbol } & string"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2080,
    "column": 58,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2080,
    "endColumn": 59,
    "fix": {
      "range": [
        87591,
        87592
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-intersection-types",
    "severity": 2,
    "message": "Expected \\"{ readonly brand: unique symbol }\\" to come before \\"string\\".",
    "line": 2081,
    "column": 24,
    "nodeType": "TSTypeLiteral",
    "messageId": "unexpectedIntersectionTypesOrder",
    "endLine": 2081,
    "endColumn": 57,
    "fix": {
      "range": [
        87607,
        87649
      ],
      "text": "{ readonly brand: unique symbol } & string"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2081,
    "column": 57,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2081,
    "endColumn": 58,
    "fix": {
      "range": [
        87649,
        87650
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2082,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2082,
    "endColumn": 28,
    "fix": {
      "range": [
        87677,
        87678
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2089,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2089,
    "endColumn": 24,
    "fix": {
      "range": [
        87806,
        87807
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2092,
    "column": 22,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2092,
    "endColumn": 23,
    "fix": {
      "range": [
        87861,
        87862
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"foobar\\"));\` with \`'foobar'))\`",
    "line": 2102,
    "column": 22,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2102,
    "endColumn": 33,
    "fix": {
      "range": [
        88022,
        88033
      ],
      "text": "'foobar'))"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2113,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2113,
    "endColumn": 17,
    "fix": {
      "range": [
        88474,
        88475
      ],
      "text": ""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2115,
    "column": 14,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2120,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··props:·PrimaryButtonProps·&·React.ButtonHTMLAttributes<HTMLButtonElement>⏎\` with \`props:·PrimaryButtonProps·&·React.ButtonHTMLAttributes<HTMLButtonElement>\`",
    "line": 2115,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2117,
    "endColumn": 1,
    "fix": {
      "range": [
        88508,
        88585
      ],
      "text": "props: PrimaryButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>"
    }
  },
  {
    "ruleId": "@eslint-react/dom/no-missing-button-type",
    "severity": 1,
    "message": "Add missing 'type' attribute on 'button' component.",
    "line": 2119,
    "column": 10,
    "nodeType": "JSXElement",
    "messageId": "noMissingButtonType",
    "endLine": 2119,
    "endColumn": 53
  },
  {
    "ruleId": "@eslint-react/prefer-destructuring-assignment",
    "severity": 2,
    "message": "Use destructuring assignment for props.",
    "line": 2119,
    "column": 31,
    "nodeType": "MemberExpression",
    "messageId": "preferDestructuringAssignment",
    "endLine": 2119,
    "endColumn": 42
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2119,
    "column": 53,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2119,
    "endColumn": 54,
    "fix": {
      "range": [
        88673,
        88674
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2120,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2120,
    "endColumn": 3,
    "fix": {
      "range": [
        88676,
        88677
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '{' expected.",
    "line": 2140,
    "column": 0
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2158,
    "column": 54,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2158,
    "endColumn": 55,
    "fix": {
      "range": [
        90713,
        90714
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"card\\" to come before \\"suit\\".",
    "line": 2164,
    "column": 38,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2164,
    "endColumn": 50,
    "fix": {
      "range": [
        90888,
        90914
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2164,
    "column": 63,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2164,
    "endColumn": 64,
    "fix": {
      "range": [
        90927,
        90928
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"card\\" to come before \\"suit\\".",
    "line": 2165,
    "column": 47,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2165,
    "endColumn": 59,
    "fix": {
      "range": [
        90961,
        90987
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2165,
    "column": 61,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2165,
    "endColumn": 62,
    "fix": {
      "range": [
        90989,
        90990
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
    "message": "Type Alias name \`pickCard\` must match one of the following formats: PascalCase",
    "line": 2175,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "doesNotMatchFormat",
    "endLine": 2175,
    "endColumn": 14
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "line": 2175,
    "column": 6,
    "nodeType": "Identifier",
    "messageId": "interfaceOverType",
    "endLine": 2175,
    "endColumn": 14,
    "fix": {
      "range": [
        91404,
        91652
      ],
      "text": "interface pickCard {\\n  (x: { suit: string; card: number }[]): number;\\n  (x: number): { suit: string; card: number };\\n  // no need for combined signature in this form\\n  // you can also type static properties of functions here eg \`pickCard.wasCalled\`\\n}"
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"card\\" to come before \\"suit\\".",
    "line": 2176,
    "column": 23,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2176,
    "endColumn": 35,
    "fix": {
      "range": [
        91430,
        91456
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2176,
    "column": 48,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2176,
    "endColumn": 49,
    "fix": {
      "range": [
        91469,
        91470
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-object-types",
    "severity": 2,
    "message": "Expected \\"card\\" to come before \\"suit\\".",
    "line": 2177,
    "column": 32,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedObjectTypesOrder",
    "endLine": 2177,
    "endColumn": 44,
    "fix": {
      "range": [
        91488,
        91514
      ],
      "text": "card: number; suit: string;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2177,
    "column": 46,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2177,
    "endColumn": 47,
    "fix": {
      "range": [
        91516,
        91517
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2180,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2180,
    "endColumn": 3,
    "fix": {
      "range": [
        91651,
        91652
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2194,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2204,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useState\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 2194,
    "column": 27,
    "nodeType": "Identifier",
    "endLine": 2194,
    "endColumn": 35
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"bar\\" to come before \\"foo\\".",
    "line": 2196,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2196,
    "endColumn": 9,
    "fix": {
      "range": [
        92393,
        92409
      ],
      "text": "bar: 2,\\n  foo: 1"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2197,
    "column": 3,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2197,
    "endColumn": 4,
    "fix": {
      "range": [
        92413,
        92414
      ],
      "text": ""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2199,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2203,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2202,
    "column": 16,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2202,
    "endColumn": 17,
    "fix": {
      "range": [
        92618,
        92619
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2203,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2203,
    "endColumn": 3,
    "fix": {
      "range": [
        92635,
        92636
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2211,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2223,
    "endColumn": 1
  },
  {
    "ruleId": "react-hooks/rules-of-hooks",
    "severity": 2,
    "message": "React Hook \\"useState\\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.",
    "line": 2211,
    "column": 27,
    "nodeType": "Identifier",
    "endLine": 2211,
    "endColumn": 35
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"bar\\" to come before \\"foo\\".",
    "line": 2213,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2213,
    "endColumn": 9,
    "fix": {
      "range": [
        92881,
        92897
      ],
      "text": "bar: 2,\\n  foo: 1"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2214,
    "column": 3,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2214,
    "endColumn": 4,
    "fix": {
      "range": [
        92901,
        92902
      ],
      "text": ""
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2218,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2219,
    "endColumn": 33
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··setState({·...state,·...obj·});\` with \`·setState({·...state,·...obj·})\`",
    "line": 2218,
    "column": 59,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2219,
    "endColumn": 34,
    "fix": {
      "range": [
        93141,
        93175
      ],
      "text": " setState({ ...state, ...obj })"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2222,
    "column": 31,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2222,
    "endColumn": 32,
    "fix": {
      "range": [
        93222,
        93223
      ],
      "text": ""
    }
  },
  {
    "ruleId": "import-x/newline-after-import",
    "severity": 2,
    "message": "Expected 1 empty line after import statement not followed by another import.",
    "line": 2239,
    "column": 1,
    "nodeType": null,
    "messageId": "newline",
    "fix": {
      "range": [
        93955,
        93955
      ],
      "text": "\\n"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"library\\";\` with \`'library'\`",
    "line": 2239,
    "column": 24,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2239,
    "endColumn": 34,
    "fix": {
      "range": [
        93945,
        93955
      ],
      "text": "'library'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2240,
    "column": 55,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2240,
    "endColumn": 56,
    "fix": {
      "range": [
        94052,
        94053
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"onClick\\">;\` with \`'onClick'>\`",
    "line": 2241,
    "column": 43,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2241,
    "endColumn": 54,
    "fix": {
      "range": [
        94126,
        94137
      ],
      "text": "'onClick'>"
    }
  },
  {
    "ruleId": "react-refresh/only-export-components",
    "severity": 2,
    "message": "Fast refresh only works when a file has exports. Move your component(s) to a separate file.",
    "line": 2242,
    "column": 7,
    "nodeType": "Identifier",
    "messageId": "noExport",
    "endLine": 2242,
    "endColumn": 18
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2242,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2244,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`(⏎··<Button·onClick={()·=>·alert(\\"hello\\"\` with \`<Button·onClick={()·=>·alert('hello'\`",
    "line": 2242,
    "column": 50,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2243,
    "endColumn": 39,
    "fix": {
      "range": [
        94197,
        94237
      ],
      "text": "<Button onClick={() => alert('hello'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`);⏎\`",
    "line": 2244,
    "column": 1,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2245,
    "endColumn": 1,
    "fix": {
      "range": [
        94254,
        94257
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2253,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2259,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2254,
    "column": 20,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2254,
    "endColumn": 21,
    "fix": {
      "range": [
        94863,
        94864
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2258,
    "column": 40,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2258,
    "endColumn": 41,
    "fix": {
      "range": [
        94956,
        94957
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2274,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2274,
    "endColumn": 5,
    "fix": {
      "range": [
        95303,
        95304
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2277,
    "column": 39,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2277,
    "endColumn": 40,
    "fix": {
      "range": [
        95346,
        95347
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"subInstArr\\"];\` with \`'subInstArr']\`",
    "line": 2278,
    "column": 28,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2278,
    "endColumn": 42,
    "fix": {
      "range": [
        95375,
        95389
      ],
      "text": "'subInstArr']"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2279,
    "column": 33,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2279,
    "endColumn": 34,
    "fix": {
      "range": [
        95422,
        95423
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This let declares a variable that is only assigned once. 'baz' is never reassigned. Safe fix: Use const instead. See https://biomejs.dev/linter/rules/use-const for more explanation.",
    "line": 2281,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2281,
    "endColumn": 4
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'baz' is never reassigned. Use 'const' instead.",
    "line": 2281,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 2281,
    "endColumn": 21,
    "fix": {
      "range": [
        95425,
        95487
      ],
      "text": "const baz: SubInstType = {\\n  c: 5,\\n  d: 6, // type checks ok!\\n};"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2284,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2284,
    "endColumn": 3,
    "fix": {
      "range": [
        95486,
        95487
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"subInstArr\\"][0];\` with \`'subInstArr'][0]\`",
    "line": 2289,
    "column": 44,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2289,
    "endColumn": 61,
    "fix": {
      "range": [
        95686,
        95703
      ],
      "text": "'subInstArr'][0]"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This let declares a variable that is only assigned once. 'baz2' is never reassigned. Safe fix: Use const instead. See https://biomejs.dev/linter/rules/use-const for more explanation.",
    "line": 2290,
    "column": 1,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2290,
    "endColumn": 4
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'baz2' is never reassigned. Use 'const' instead.",
    "line": 2290,
    "column": 5,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 2290,
    "endColumn": 23,
    "fix": {
      "range": [
        95704,
        95768
      ],
      "text": "const baz2: SubInstType2 = {\\n  c: 5,\\n  d: 6, // type checks ok!\\n};"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2293,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2293,
    "endColumn": 3,
    "fix": {
      "range": [
        95767,
        95768
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Unexpected character '/' found.",
    "line": 2312,
    "column": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"my-untyped-module\\";\` with \`'my-untyped-module'\`",
    "line": 2326,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2326,
    "endColumn": 36,
    "fix": {
      "range": [
        97322,
        97342
      ],
      "text": "'my-untyped-module'"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2358,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2363,
    "endColumn": 2
  },
  {
    "ruleId": "@eslint-react/hooks-extra/no-useless-custom-hooks",
    "severity": 1,
    "message": "A custom Hook 'useUntypedHook' should use at least one other hook.",
    "line": 2358,
    "column": 24,
    "nodeType": "ArrowFunctionExpression",
    "messageId": "noUselessCustomHooks",
    "endLine": 2363,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2362,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2362,
    "endColumn": 5,
    "fix": {
      "range": [
        99290,
        99291
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2363,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2363,
    "endColumn": 3,
    "fix": {
      "range": [
        99293,
        99294
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2364,
    "column": 30,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2364,
    "endColumn": 31,
    "fix": {
      "range": [
        99324,
        99325
      ],
      "text": ""
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Property or signature expected.",
    "line": 2371,
    "column": 32
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2385,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2406,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"classNameDark\\" to come before \\"element\\".",
    "line": 2390,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2390,
    "endColumn": 18,
    "fix": {
      "range": [
        100008,
        100182
      ],
      "text": "classNameDark,\\n    classNameLight,\\n    // -> input props / config props to be exported\\n    element,\\n    global,\\n    onChange,\\n    storageKey = \\"darkMode\\",\\n    storageProvider"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"darkMode\\"\` with \`'darkMode'\`",
    "line": 2393,
    "column": 18,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2393,
    "endColumn": 28,
    "fix": {
      "range": [
        100139,
        100149
      ],
      "text": "'darkMode'"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"global\\" to come before \\"storageProvider\\".",
    "line": 2395,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2395,
    "endColumn": 11,
    "fix": {
      "range": [
        100008,
        100182
      ],
      "text": "classNameDark,\\n    classNameLight,\\n    // -> input props / config props to be exported\\n    element,\\n    global,\\n    onChange,\\n    storageKey = \\"darkMode\\",\\n    storageProvider"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Insert \`,\`",
    "line": 2396,
    "column": 9,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 2396,
    "endColumn": 9,
    "fix": {
      "range": [
        100192,
        100192
      ],
      "text": ","
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"enable\\" to come before \\"value\\".",
    "line": 2402,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2402,
    "endColumn": 58,
    "fix": {
      "range": [
        100224,
        100470
      ],
      "text": "disable: useCallback(() => setState(false), [setState]),\\n    enable: useCallback(() => setState(true), [setState]),\\n    toggle: useCallback(() => setState((current) => !current), [setState]),\\n    // -> return props to be exported\\n    value: state"
    }
  },
  {
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 1,
    "message": "React Hook useCallback has an unnecessary dependency: 'setState'. Either exclude it or remove the dependency array. Outer scope values like 'setState' aren't valid dependencies because mutating them doesn't re-render the component.",
    "line": 2402,
    "column": 47,
    "nodeType": "ArrayExpression",
    "endLine": 2402,
    "endColumn": 57,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: []",
        "fix": {
          "range": [
            439,
            449
          ],
          "text": "[]"
        }
      }
    ]
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"disable\\" to come before \\"enable\\".",
    "line": 2403,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2403,
    "endColumn": 60,
    "fix": {
      "range": [
        100224,
        100470
      ],
      "text": "disable: useCallback(() => setState(false), [setState]),\\n    enable: useCallback(() => setState(true), [setState]),\\n    toggle: useCallback(() => setState((current) => !current), [setState]),\\n    // -> return props to be exported\\n    value: state"
    }
  },
  {
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 1,
    "message": "React Hook useCallback has an unnecessary dependency: 'setState'. Either exclude it or remove the dependency array. Outer scope values like 'setState' aren't valid dependencies because mutating them doesn't re-render the component.",
    "line": 2403,
    "column": 49,
    "nodeType": "ArrayExpression",
    "endLine": 2403,
    "endColumn": 59,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: []",
        "fix": {
          "range": [
            500,
            510
          ],
          "text": "[]"
        }
      }
    ]
  },
  {
    "ruleId": "react-hooks/exhaustive-deps",
    "severity": 1,
    "message": "React Hook useCallback has an unnecessary dependency: 'setState'. Either exclude it or remove the dependency array. Outer scope values like 'setState' aren't valid dependencies because mutating them doesn't re-render the component.",
    "line": 2404,
    "column": 64,
    "nodeType": "ArrayExpression",
    "endLine": 2404,
    "endColumn": 74,
    "suggestions": [
      {
        "desc": "Update the dependencies array to be: []",
        "fix": {
          "range": [
            576,
            586
          ],
          "text": "[]"
        }
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2405,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2405,
    "endColumn": 5,
    "fix": {
      "range": [
        100475,
        100476
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2406,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2406,
    "endColumn": 3,
    "fix": {
      "range": [
        100478,
        100479
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2407,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2407,
    "endColumn": 28,
    "fix": {
      "range": [
        100506,
        100507
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"use-dark-mode\\"\` with \`'use-dark-mode'\`",
    "line": 2413,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2413,
    "endColumn": 31,
    "fix": {
      "range": [
        100687,
        100702
      ],
      "text": "'use-dark-mode'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2418,
    "column": 27,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2418,
    "endColumn": 28,
    "fix": {
      "range": [
        100857,
        100858
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2419,
    "column": 28,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2419,
    "endColumn": 29,
    "fix": {
      "range": [
        100944,
        100945
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2420,
    "column": 26,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2420,
    "endColumn": 27,
    "fix": {
      "range": [
        101031,
        101032
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2421,
    "column": 39,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2421,
    "endColumn": 40,
    "fix": {
      "range": [
        101136,
        101137
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2422,
    "column": 24,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2422,
    "endColumn": 25,
    "fix": {
      "range": [
        101227,
        101228
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2423,
    "column": 41,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2423,
    "endColumn": 42,
    "fix": {
      "range": [
        101371,
        101372
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \\"global\\" to come before \\"storageProvider\\".",
    "line": 2424,
    "column": 5,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 2424,
    "endColumn": 21,
    "fix": {
      "range": [
        101102,
        101484
      ],
      "text": "global?: Window; // The global object. Default = \`window\`.\\n    onChange?: (val?: boolean) => void; // Override the default className handler with a custom callback.\\n    storageKey?: string; // Specify the \`localStorage\` key. Default = \\"darkMode\\". Set to \`null\` to disable persistent storage.\\n    storageProvider?: WindowLocalStorage; // A storage provider. Default = \`localStorage\`."
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2424,
    "column": 20,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2424,
    "endColumn": 21,
    "fix": {
      "range": [
        101441,
        101442
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2430,
    "column": 28,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2430,
    "endColumn": 29,
    "fix": {
      "range": [
        101612,
        101613
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \\"enable\\" to come before \\"value\\".",
    "line": 2431,
    "column": 5,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 2431,
    "endColumn": 24,
    "fix": {
      "range": [
        101589,
        101686
      ],
      "text": "disable: () => void;\\n    enable: () => void;\\n    toggle: () => void;\\n    readonly value: boolean;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2431,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2431,
    "endColumn": 24,
    "fix": {
      "range": [
        101636,
        101637
      ],
      "text": ""
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \\"disable\\" to come before \\"enable\\".",
    "line": 2432,
    "column": 5,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 2432,
    "endColumn": 25,
    "fix": {
      "range": [
        101589,
        101686
      ],
      "text": "disable: () => void;\\n    enable: () => void;\\n    toggle: () => void;\\n    readonly value: boolean;"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2432,
    "column": 24,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2432,
    "endColumn": 25,
    "fix": {
      "range": [
        101661,
        101662
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2433,
    "column": 23,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2433,
    "endColumn": 24,
    "fix": {
      "range": [
        101685,
        101686
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎····initialState?:·boolean,⏎····config?:·DarkModeConfig⏎··):·DarkMode;\` with \`initialState?:·boolean,·config?:·DarkModeConfig):·DarkMode\`",
    "line": 2438,
    "column": 39,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2441,
    "endColumn": 15,
    "fix": {
      "range": [
        101834,
        101905
      ],
      "text": "initialState?: boolean, config?: DarkModeConfig): DarkMode"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: '}' expected.",
    "line": 2465,
    "column": 0
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: JSX element 'div' has no corresponding closing tag.",
    "line": 2487,
    "column": 3
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2625,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2637,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"plotly.js\\"\` with \`'plotly.js'\`",
    "line": 2625,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2625,
    "endColumn": 27,
    "fix": {
      "range": [
        110015,
        110026
      ],
      "text": "'plotly.js'"
    }
  },
  {
    "ruleId": "@typescript-eslint/method-signature-style",
    "severity": 2,
    "message": "Shorthand method signature is forbidden. Use a function property instead.",
    "line": 2627,
    "column": 5,
    "nodeType": "TSMethodSignature",
    "messageId": "errorMethod",
    "endLine": 2627,
    "endColumn": 32
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2627,
    "column": 31,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2627,
    "endColumn": 32,
    "fix": {
      "range": [
        110091,
        110092
      ],
      "text": ""
    }
  },
  {
    "ruleId": "import-x/first",
    "severity": 2,
    "message": "Import in body of module; reorder to top.",
    "line": 2632,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "order",
    "endLine": 2632,
    "endColumn": 47,
    "fix": {
      "range": [
        109983,
        110165
      ],
      "text": "// my-typings.ts\\n// MyComponent.tsx\\nimport { PlotlyHTMLElement } from \\"plotly.js\\";\\n\\ndeclare module \\"plotly.js\\" {\\n  interface PlotlyHTMLElement {\\n    removeAllListeners(): void;\\n  }\\n}"
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "All imports in the declaration are only used as types. Use \`import type\`.",
    "line": 2632,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "typeOverValue",
    "endLine": 2632,
    "endColumn": 47,
    "fix": {
      "range": [
        110128,
        110145
      ],
      "text": "type PlotlyHTMLElement"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "All these imports are only used as types. Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules. Safe fix: Use import type. See https://biomejs.dev/linter/rules/use-import-type for more explanation.",
    "line": 2632,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2632,
    "endColumn": 46
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"plotly.js\\";\` with \`'plotly.js'\`",
    "line": 2632,
    "column": 35,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2632,
    "endColumn": 47,
    "fix": {
      "range": [
        110153,
        110165
      ],
      "text": "'plotly.js'"
    }
  },
  {
    "ruleId": "func-style",
    "severity": 2,
    "message": "Expected a function declaration.",
    "line": 2634,
    "column": 7,
    "nodeType": "VariableDeclarator",
    "messageId": "declaration",
    "endLine": 2636,
    "endColumn": 2
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2635,
    "column": 25,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2635,
    "endColumn": 26,
    "fix": {
      "range": [
        110229,
        110230
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2636,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2636,
    "endColumn": 3,
    "fix": {
      "range": [
        110232,
        110233
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@eslint-react/naming-convention/filename-extension",
    "severity": 2,
    "message": "Use JSX file extension as needed.",
    "line": 2643,
    "column": 1,
    "nodeType": "Program",
    "messageId": "filenameExtensionUnexpected",
    "endLine": 2644,
    "endColumn": 1
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"plotly.js\\";\` with \`'plotly.js'\`",
    "line": 2643,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2643,
    "endColumn": 28,
    "fix": {
      "range": [
        110386,
        110398
      ],
      "text": "'plotly.js'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2652,
    "column": 48,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2652,
    "endColumn": 49,
    "fix": {
      "range": [
        110904,
        110905
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "This let declares a variable that is only assigned once. 'process' is only assigned here. See https://biomejs.dev/linter/rules/use-const for more explanation.",
    "line": 2654,
    "column": 9,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 2654,
    "endColumn": 12
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"development\\"·|·\\"production\\";\` with \`'development'·|·'production'\`",
    "line": 2656,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2656,
    "endColumn": 44,
    "fix": {
      "range": [
        110972,
        111001
      ],
      "text": "'development' | 'production'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2657,
    "column": 4,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2657,
    "endColumn": 5,
    "fix": {
      "range": [
        111005,
        111006
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2658,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2658,
    "endColumn": 3,
    "fix": {
      "range": [
        111008,
        111009
      ],
      "text": ""
    }
  },
  {
    "ruleId": "prefer-const",
    "severity": 2,
    "message": "'process' is never reassigned. Use 'const' instead.",
    "line": 2659,
    "column": 1,
    "nodeType": "Identifier",
    "messageId": "useConst",
    "endLine": 2659,
    "endColumn": 8
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"production\\"\` with \`'production'\`",
    "line": 2661,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2661,
    "endColumn": 27,
    "fix": {
      "range": [
        111045,
        111057
      ],
      "text": "'production'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2663,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2663,
    "endColumn": 3,
    "fix": {
      "range": [
        111065,
        111066
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2681,
    "column": 32,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2681,
    "endColumn": 33,
    "fix": {
      "range": [
        111619,
        111620
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"*.png\\";\` with \`'*.png'\`",
    "line": 2691,
    "column": 16,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2691,
    "endColumn": 24,
    "fix": {
      "range": [
        111818,
        111826
      ],
      "text": "'*.png'"
    }
  },
  {
    "ruleId": "import-x/first",
    "severity": 2,
    "message": "Import in body of module; reorder to top.",
    "line": 2694,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "order",
    "endLine": 2694,
    "endColumn": 36,
    "fix": {
      "range": [
        111707,
        111890
      ],
      "text": "// declaration.d.ts\\n// anywhere in your project, NOT the same name as any of your .ts/tsx files\\n// importing in a tsx file\\nimport * as logo from \\"./logo.png\\";\\n\\ndeclare module \\"*.png\\";"
    }
  },
  {
    "ruleId": "sonarjs/unused-import",
    "severity": 2,
    "message": "Remove this unused import of 'logo'.",
    "line": 2694,
    "column": 13,
    "nodeType": "Identifier",
    "messageId": "removeUnusedImport",
    "endLine": 2694,
    "endColumn": 17,
    "suggestions": [
      {
        "messageId": "suggestRemoveWholeStatement",
        "fix": {
          "range": [
            147,
            183
          ],
          "text": ""
        },
        "desc": "Remove this import statement"
      }
    ]
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"./logo.png\\";\` with \`'./logo.png'\`",
    "line": 2694,
    "column": 23,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2694,
    "endColumn": 36,
    "fix": {
      "range": [
        111877,
        111890
      ],
      "text": "'./logo.png'"
    }
  },
  {
    "ruleId": null,
    "nodeType": null,
    "fatal": true,
    "severity": 2,
    "message": "Parsing error: Unexpected token Colon found.",
    "line": 2745,
    "column": 12
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"jest\\" to come before \\"node\\".",
    "line": 2757,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2757,
    "endColumn": 15,
    "fix": {
      "range": [
        114551,
        114577
      ],
      "text": "jest: true,\\n    node: true"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"eslint:recommended\\"\` with \`'eslint:recommended'\`",
    "line": 2759,
    "column": 12,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2759,
    "endColumn": 32,
    "fix": {
      "range": [
        114595,
        114615
      ],
      "text": "'eslint:recommended'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"@typescript-eslint/parser\\"\` with \`'@typescript-eslint/parser'\`",
    "line": 2760,
    "column": 11,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2760,
    "endColumn": 38,
    "fix": {
      "range": [
        114627,
        114654
      ],
      "text": "'@typescript-eslint/parser'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"@typescript-eslint\\"\` with \`'@typescript-eslint'\`",
    "line": 2761,
    "column": 13,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2761,
    "endColumn": 33,
    "fix": {
      "range": [
        114668,
        114688
      ],
      "text": "'@typescript-eslint'"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"parserOptions\\" to come before \\"plugins\\".",
    "line": 2762,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2765,
    "endColumn": 4,
    "fix": {
      "range": [
        114658,
        114762
      ],
      "text": "parserOptions: {\\n    ecmaVersion: 2017,\\n    sourceType: \\"module\\",\\n  },\\n  plugins: [\\"@typescript-eslint\\"]"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"module\\"\` with \`'module'\`",
    "line": 2764,
    "column": 17,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2764,
    "endColumn": 25,
    "fix": {
      "range": [
        114749,
        114757
      ],
      "text": "'module'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"error\\"\` with \`'error'\`",
    "line": 2767,
    "column": 14,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2767,
    "endColumn": 21,
    "fix": {
      "range": [
        114788,
        114795
      ],
      "text": "'error'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"linebreak-style\\":·[\\"error\\",·\\"unix\\"\` with \`'linebreak-style':·['error',·'unix'\`",
    "line": 2768,
    "column": 5,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2768,
    "endColumn": 40,
    "fix": {
      "range": [
        114805,
        114840
      ],
      "text": "'linebreak-style': ['error', 'unix'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"error\\",·\\"single\\"\` with \`'error',·'single'\`",
    "line": 2769,
    "column": 14,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2769,
    "endColumn": 31,
    "fix": {
      "range": [
        114856,
        114873
      ],
      "text": "'error', 'single'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"no-console\\":·\\"warn\\"\` with \`'no-console':·'warn'\`",
    "line": 2770,
    "column": 5,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2770,
    "endColumn": 25,
    "fix": {
      "range": [
        114880,
        114900
      ],
      "text": "'no-console': 'warn'"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"no-console\\" to come before \\"quotes\\".",
    "line": 2770,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2770,
    "endColumn": 25,
    "fix": {
      "range": [
        114779,
        115269
      ],
      "text": "\\"@typescript-eslint/explicit-function-return-type\\": \\"warn\\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\\n    \\"@typescript-eslint/no-unused-vars\\": [\\n      \\"error\\",\\n      { vars: \\"all\\", args: \\"after-used\\", ignoreRestSiblings: false },\\n    ],\\n    indent: [\\"error\\", 2],\\n    \\"linebreak-style\\": [\\"error\\", \\"unix\\"],\\n    \\"no-console\\": \\"warn\\",\\n    \\"no-empty\\": \\"warn\\",\\n    \\"no-unused-vars\\": \\"off\\",\\n    quotes: [\\"error\\", \\"single\\"]"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"no-unused-vars\\":·\\"off\\"\` with \`'no-unused-vars':·'off'\`",
    "line": 2771,
    "column": 5,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2771,
    "endColumn": 28,
    "fix": {
      "range": [
        114906,
        114929
      ],
      "text": "'no-unused-vars': 'off'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"@typescript-eslint/no-unused-vars\\":·[⏎······\\"error\\",⏎······{·vars:·\\"all\\",·args:·\\"after-used\\",·ignoreRestSiblings:·false·},⏎····\` with \`'@typescript-eslint/no-unused-vars':·['error',·{·vars:·'all',·args:·'after-used',·ignoreRestSiblings:·false·}\`",
    "line": 2772,
    "column": 5,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2775,
    "endColumn": 5,
    "fix": {
      "range": [
        114935,
        115063
      ],
      "text": "'@typescript-eslint/no-unused-vars': ['error', { vars: 'all', args: 'after-used', ignoreRestSiblings: false }"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"@typescript-eslint/no-unused-vars\\" to come before \\"no-unused-vars\\".",
    "line": 2772,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2775,
    "endColumn": 6,
    "fix": {
      "range": [
        114779,
        115269
      ],
      "text": "\\"@typescript-eslint/explicit-function-return-type\\": \\"warn\\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\\n    \\"@typescript-eslint/no-unused-vars\\": [\\n      \\"error\\",\\n      { vars: \\"all\\", args: \\"after-used\\", ignoreRestSiblings: false },\\n    ],\\n    indent: [\\"error\\", 2],\\n    \\"linebreak-style\\": [\\"error\\", \\"unix\\"],\\n    \\"no-console\\": \\"warn\\",\\n    \\"no-empty\\": \\"warn\\",\\n    \\"no-unused-vars\\": \\"off\\",\\n    quotes: [\\"error\\", \\"single\\"]"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"args\\" to come before \\"vars\\".",
    "line": 2774,
    "column": 22,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2774,
    "endColumn": 40,
    "fix": {
      "range": [
        114997,
        115055
      ],
      "text": "args: \\"after-used\\", ignoreRestSiblings: false, vars: \\"all\\""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"@typescript-eslint/explicit-function-return-type\\":·\\"warn\\"\` with \`'@typescript-eslint/explicit-function-return-type':·'warn'\`",
    "line": 2776,
    "column": 5,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2776,
    "endColumn": 63,
    "fix": {
      "range": [
        115070,
        115128
      ],
      "text": "'@typescript-eslint/explicit-function-return-type': 'warn'"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"@typescript-eslint/explicit-function-return-type\\" to come before \\"@typescript-eslint/no-unused-vars\\".",
    "line": 2776,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 2776,
    "endColumn": 63,
    "fix": {
      "range": [
        114779,
        115269
      ],
      "text": "\\"@typescript-eslint/explicit-function-return-type\\": \\"warn\\", // Consider using explicit annotations for object literals and function return types even when they can be inferred.\\n    \\"@typescript-eslint/no-unused-vars\\": [\\n      \\"error\\",\\n      { vars: \\"all\\", args: \\"after-used\\", ignoreRestSiblings: false },\\n    ],\\n    indent: [\\"error\\", 2],\\n    \\"linebreak-style\\": [\\"error\\", \\"unix\\"],\\n    \\"no-console\\": \\"warn\\",\\n    \\"no-empty\\": \\"warn\\",\\n    \\"no-unused-vars\\": \\"off\\",\\n    quotes: [\\"error\\", \\"single\\"]"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"no-empty\\":·\\"warn\\"\` with \`'no-empty':·'warn'\`",
    "line": 2777,
    "column": 5,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2777,
    "endColumn": 23,
    "fix": {
      "range": [
        115251,
        115269
      ],
      "text": "'no-empty': 'warn'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 2779,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2779,
    "endColumn": 3,
    "fix": {
      "range": [
        115277,
        115278
      ],
      "text": ""
    }
  }
]
`;

exports[`ESLint config > test-ts.ts 1`] = `
[
  {
    "ruleId": "import-x/no-duplicates",
    "severity": 2,
    "message": "'@typescript-eslint/utils' imported multiple times.",
    "line": 1,
    "column": 41,
    "nodeType": "Literal",
    "messageId": "duplicate",
    "endLine": 1,
    "endColumn": 67,
    "fix": {
      "range": [
        7,
        138
      ],
      "text": "{ type TSESLint, type TSESTree, AST_NODE_TYPES, ESLintUtils  } from '@typescript-eslint/utils'\\n"
    }
  },
  {
    "ruleId": "n/no-extraneous-import",
    "severity": 2,
    "message": "\\"@typescript-eslint/utils\\" is extraneous.",
    "line": 1,
    "column": 41,
    "nodeType": "Literal",
    "messageId": "extraneous",
    "endLine": 1,
    "endColumn": 67
  },
  {
    "ruleId": "import-x/order",
    "severity": 2,
    "message": "There should be no empty line between import groups",
    "line": 2,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "noLineBetweenGroups",
    "endLine": 2,
    "endColumn": 71,
    "fix": {
      "range": [
        138,
        139
      ],
      "text": ""
    }
  },
  {
    "ruleId": "import-x/no-duplicates",
    "severity": 2,
    "message": "'@typescript-eslint/utils' imported multiple times.",
    "line": 2,
    "column": 45,
    "nodeType": "Literal",
    "messageId": "duplicate",
    "endLine": 2,
    "endColumn": 71
  },
  {
    "ruleId": "n/no-extraneous-import",
    "severity": 2,
    "message": "\\"@typescript-eslint/utils\\" is extraneous.",
    "line": 2,
    "column": 45,
    "nodeType": "Literal",
    "messageId": "extraneous",
    "endLine": 2,
    "endColumn": 71
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Boolean(node.id.typeAnnotation)\` instead.",
    "line": 17,
    "column": 61,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 17,
    "endColumn": 85,
    "fix": {
      "range": [
        709,
        733
      ],
      "text": "Boolean(node.id.typeAnnotation)"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Boolean(node.typeAnnotation)\` instead.",
    "line": 27,
    "column": 61,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 27,
    "endColumn": 82,
    "fix": {
      "range": [
        1014,
        1035
      ],
      "text": "Boolean(node.typeAnnotation)"
    }
  },
  {
    "ruleId": "prefer-destructuring",
    "severity": 2,
    "message": "Use object destructuring.",
    "line": 95,
    "column": 9,
    "nodeType": "VariableDeclarator",
    "messageId": "preferDestructuring",
    "endLine": 95,
    "endColumn": 35,
    "fix": {
      "range": [
        2827,
        2853
      ],
      "text": "{parent} = objectExpr"
    }
  },
  {
    "ruleId": "no-implicit-coercion",
    "severity": 2,
    "message": "Unexpected implicit coercion encountered. Use \`Boolean(statement.argument)\` instead.",
    "line": 117,
    "column": 62,
    "nodeType": "UnaryExpression",
    "messageId": "implicitCoercion",
    "endLine": 117,
    "endColumn": 82,
    "fix": {
      "range": [
        3571,
        3591
      ],
      "text": "Boolean(statement.argument)"
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \\"allowHigherOrderFunctions\\" to come before \\"allowTypedFunctionExpressions\\".",
    "line": 151,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 151,
    "endColumn": 38,
    "fix": {
      "range": [
        4420,
        4580
      ],
      "text": "allowDirectConstAssertionInArrowFunctions?: boolean\\n  allowExpressions?: boolean\\n  allowHigherOrderFunctions?: boolean\\n  allowTypedFunctionExpressions?: boolean"
    }
  },
  {
    "ruleId": "perfectionist/sort-interfaces",
    "severity": 2,
    "message": "Expected \\"allowDirectConstAssertionInArrowFunctions\\" to come before \\"allowHigherOrderFunctions\\".",
    "line": 152,
    "column": 3,
    "nodeType": "TSPropertySignature",
    "messageId": "unexpectedInterfacePropertiesOrder",
    "endLine": 152,
    "endColumn": 54,
    "fix": {
      "range": [
        4420,
        4580
      ],
      "text": "allowDirectConstAssertionInArrowFunctions?: boolean\\n  allowExpressions?: boolean\\n  allowHigherOrderFunctions?: boolean\\n  allowTypedFunctionExpressions?: boolean"
    }
  },
  {
    "ruleId": "max-params",
    "severity": 2,
    "message": "Function 'checkFunctionReturnType' has too many parameters (4). Maximum allowed is 3.",
    "line": 210,
    "column": 1,
    "nodeType": "FunctionDeclaration",
    "messageId": "exceed",
    "endLine": 210,
    "endColumn": 33
  },
  {
    "ruleId": "max-params",
    "severity": 2,
    "message": "Function 'checkFunctionExpressionReturnType' has too many parameters (4). Maximum allowed is 3.",
    "line": 226,
    "column": 1,
    "nodeType": "FunctionDeclaration",
    "messageId": "exceed",
    "endLine": 226,
    "endColumn": 43
  },
  {
    "ruleId": "sonarjs/cognitive-complexity",
    "severity": 2,
    "message": "Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.",
    "line": 242,
    "column": 10,
    "nodeType": null,
    "messageId": "refactorFunction",
    "endLine": 242,
    "endColumn": 31
  },
  {
    "ruleId": "perfectionist/sort-switch-case",
    "severity": 2,
    "message": "Expected \\"AST_NODE_TYPES.FunctionDeclaration\\" to come before \\"AST_NODE_TYPES.FunctionExpression\\".",
    "line": 261,
    "column": 12,
    "nodeType": "MemberExpression",
    "messageId": "unexpectedSwitchCaseOrder",
    "endLine": 261,
    "endColumn": 46,
    "fix": {
      "range": [
        7872,
        7952
      ],
      "text": "AST_NODE_TYPES.FunctionDeclaration:\\n      case AST_NODE_TYPES.FunctionExpression"
    }
  },
  {
    "ruleId": "perfectionist/sort-switch-case",
    "severity": 2,
    "message": "Expected \\"AST_NODE_TYPES.PropertyDefinition\\" to come before \\"AST_NODE_TYPES.VariableDeclarator\\".",
    "line": 274,
    "column": 7,
    "nodeType": "SwitchCase",
    "messageId": "unexpectedSwitchCaseOrder",
    "endLine": 278,
    "endColumn": 14
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Some exports are only types. This export is a type. This export is a type. Using export type allows compilers to safely drop exports of types without looking for their definition. Safe fix: Add inline type keywords. See https://biomejs.dev/linter/rules/use-export-type for more explanation.",
    "line": 287,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 296,
    "endColumn": 2
  },
  {
    "ruleId": "perfectionist/sort-named-exports",
    "severity": 2,
    "message": "Expected \\"ancestorHasReturnType\\" to come before \\"isValidFunctionExpressionReturnType\\".",
    "line": 295,
    "column": 3,
    "nodeType": "ExportSpecifier",
    "messageId": "unexpectedNamedExportsOrder",
    "endLine": 295,
    "endColumn": 24,
    "fix": {
      "range": [
        8475,
        8709
      ],
      "text": "ancestorHasReturnType,\\n  checkFunctionExpressionReturnType,\\n  checkFunctionReturnType,\\n  doesImmediatelyReturnFunctionExpression,\\n  FunctionExpression,\\n  FunctionNode,\\n  isTypedFunctionExpression,\\n  isValidFunctionExpressionReturnType"
    }
  }
]
`;

exports[`ESLint config > test-tsx.tsx 1`] = `
[
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"use·client\\"\` with \`'use·client'\`",
    "line": 1,
    "column": 1,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1,
    "endColumn": 13,
    "fix": {
      "range": [
        0,
        12
      ],
      "text": "'use client'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"use·client\\"\` with \`'use·client'\`",
    "line": 1,
    "column": 1,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 1,
    "endColumn": 13,
    "fix": {
      "range": [
        0,
        12
      ],
      "text": "'use client'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"next/link\\"\` with \`'next/link'\`",
    "line": 3,
    "column": 18,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 3,
    "endColumn": 29,
    "fix": {
      "range": [
        31,
        42
      ],
      "text": "'next/link'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"next/link\\"\` with \`'next/link'\`",
    "line": 3,
    "column": 18,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 3,
    "endColumn": 29,
    "fix": {
      "range": [
        31,
        42
      ],
      "text": "'next/link'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"next/navigation\\"\` with \`'next/navigation'\`",
    "line": 4,
    "column": 29,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 4,
    "endColumn": 46,
    "fix": {
      "range": [
        71,
        88
      ],
      "text": "'next/navigation'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"next/navigation\\"\` with \`'next/navigation'\`",
    "line": 4,
    "column": 29,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 4,
    "endColumn": 46,
    "fix": {
      "range": [
        71,
        88
      ],
      "text": "'next/navigation'"
    }
  },
  {
    "ruleId": "import-x/order",
    "severity": 2,
    "message": "There should be no empty line between import groups",
    "line": 5,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "noLineBetweenGroups",
    "endLine": 5,
    "endColumn": 43,
    "fix": {
      "range": [
        132,
        133
      ],
      "text": ""
    }
  },
  {
    "ruleId": "@typescript-eslint/consistent-type-imports",
    "severity": 2,
    "message": "All imports in the declaration are only used as types. Use \`import type\`.",
    "line": 5,
    "column": 1,
    "nodeType": "ImportDeclaration",
    "messageId": "typeOverValue",
    "endLine": 5,
    "endColumn": 43,
    "fix": {
      "range": [
        98,
        112
      ],
      "text": "type SidebarNavItem"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "All these imports are only used as types. Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules. Safe fix: Use import type. See https://biomejs.dev/linter/rules/use-import-type for more explanation.",
    "line": 5,
    "column": 8,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 5,
    "endColumn": 43
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"types/nav\\"\` with \`'types/nav'\`",
    "line": 5,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 5,
    "endColumn": 43,
    "fix": {
      "range": [
        120,
        131
      ],
      "text": "'types/nav'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"types/nav\\"\` with \`'types/nav'\`",
    "line": 5,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 5,
    "endColumn": 43,
    "fix": {
      "range": [
        120,
        131
      ],
      "text": "'types/nav'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"@/lib/utils\\"\` with \`'@/lib/utils'\`",
    "line": 7,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 7,
    "endColumn": 33,
    "fix": {
      "range": [
        152,
        165
      ],
      "text": "'@/lib/utils'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"@/lib/utils\\"\` with \`'@/lib/utils'\`",
    "line": 7,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 7,
    "endColumn": 33,
    "fix": {
      "range": [
        152,
        165
      ],
      "text": "'@/lib/utils'"
    }
  },
  {
    "ruleId": "unicorn/explicit-length-check",
    "severity": 2,
    "message": "Use \`.length > 0\` when checking length is not zero.",
    "line": 16,
    "column": 10,
    "nodeType": "MemberExpression",
    "messageId": "non-zero",
    "endLine": 16,
    "endColumn": 22,
    "fix": {
      "range": [
        343,
        355
      ],
      "text": "items.length > 0"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"w-full\\"\` with \`'w-full'\`",
    "line": 17,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 17,
    "endColumn": 28,
    "fix": {
      "range": [
        379,
        387
      ],
      "text": "'w-full'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"w-full\\"\` with \`'w-full'\`",
    "line": 17,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 17,
    "endColumn": 28,
    "fix": {
      "range": [
        379,
        387
      ],
      "text": "'w-full'"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Avoid using the index of an array as key property in an element. This is the source of the key value. The order of the items may change, and this also affects performances and component state. Check the React documentation.  See https://biomejs.dev/linter/rules/no-array-index-key for more explanation.",
    "line": 19,
    "column": 19,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 19,
    "endColumn": 24
  },
  {
    "ruleId": "@eslint-react/no-array-index-key",
    "severity": 1,
    "message": "Do not use Array index as 'key'.",
    "line": 19,
    "column": 19,
    "nodeType": "Identifier",
    "messageId": "noArrayIndexKey",
    "endLine": 19,
    "endColumn": 24
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"className\\" to come before \\"key\\".",
    "line": 19,
    "column": 26,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 19,
    "endColumn": 48,
    "fix": {
      "range": [
        438,
        472
      ],
      "text": "className={cn(\\"pb-4\\")} key={index}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"pb-4\\"\` with \`'pb-4'\`",
    "line": 19,
    "column": 40,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 19,
    "endColumn": 46,
    "fix": {
      "range": [
        464,
        470
      ],
      "text": "'pb-4'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"pb-4\\"\` with \`'pb-4'\`",
    "line": 19,
    "column": 40,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 19,
    "endColumn": 46,
    "fix": {
      "range": [
        464,
        470
      ],
      "text": "'pb-4'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"mb-1·rounded-md·px-2·py-1·text-sm·font-semibold\\">⏎············{item.title}⏎··········\` with \`'mb-1·rounded-md·px-2·py-1·text-sm·font-semibold'>{item.title}\`",
    "line": 20,
    "column": 25,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 22,
    "endColumn": 11,
    "fix": {
      "range": [
        498,
        584
      ],
      "text": "'mb-1 rounded-md px-2 py-1 text-sm font-semibold'>{item.title}"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"mb-1·rounded-md·px-2·py-1·text-sm·font-semibold\\">⏎············{item.title}⏎··········\` with \`'mb-1·rounded-md·px-2·py-1·text-sm·font-semibold'>{item.title}\`",
    "line": 20,
    "column": 25,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 22,
    "endColumn": 11,
    "fix": {
      "range": [
        498,
        584
      ],
      "text": "'mb-1 rounded-md px-2 py-1 text-sm font-semibold'>{item.title}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`(⏎············<DocsSidebarNavItems·items={item.items}·pathname={pathname}·/>⏎··········)\` with \`<DocsSidebarNavItems·items={item.items}·pathname={pathname}·/>\`",
    "line": 23,
    "column": 35,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 25,
    "endColumn": 12,
    "fix": {
      "range": [
        624,
        712
      ],
      "text": "<DocsSidebarNavItems items={item.items} pathname={pathname} />"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`(⏎············<DocsSidebarNavItems·items={item.items}·pathname={pathname}·/>⏎··········)\` with \`<DocsSidebarNavItems·items={item.items}·pathname={pathname}·/>\`",
    "line": 23,
    "column": 35,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 25,
    "endColumn": 12,
    "fix": {
      "range": [
        624,
        712
      ],
      "text": "<DocsSidebarNavItems items={item.items} pathname={pathname} />"
    }
  },
  {
    "ruleId": "perfectionist/sort-union-types",
    "severity": 2,
    "message": "Expected \\"null\\" to come before \\"string\\".",
    "line": 34,
    "column": 22,
    "nodeType": "TSNullKeyword",
    "messageId": "unexpectedUnionTypesOrder",
    "endLine": 34,
    "endColumn": 26,
    "fix": {
      "range": [
        839,
        852
      ],
      "text": "null | string"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎··items,⏎··pathname,⏎\` with \`·items,·pathname·\`",
    "line": 37,
    "column": 38,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 40,
    "endColumn": 1,
    "fix": {
      "range": [
        893,
        915
      ],
      "text": " items, pathname "
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`⏎··items,⏎··pathname,⏎\` with \`·items,·pathname·\`",
    "line": 37,
    "column": 38,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 40,
    "endColumn": 1,
    "fix": {
      "range": [
        893,
        915
      ],
      "text": " items, pathname "
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"grid·grid-flow-row·auto-rows-max·text-sm\\"\` with \`'grid·grid-flow-row·auto-rows-max·text-sm'\`",
    "line": 42,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 42,
    "endColumn": 62,
    "fix": {
      "range": [
        992,
        1034
      ],
      "text": "'grid grid-flow-row auto-rows-max text-sm'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"grid·grid-flow-row·auto-rows-max·text-sm\\"\` with \`'grid·grid-flow-row·auto-rows-max·text-sm'\`",
    "line": 42,
    "column": 20,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 42,
    "endColumn": 62,
    "fix": {
      "range": [
        992,
        1034
      ],
      "text": "'grid grid-flow-row auto-rows-max text-sm'"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Avoid using the index of an array as key property in an element. This is the source of the key value. The order of the items may change, and this also affects performances and component state. Check the React documentation.  See https://biomejs.dev/linter/rules/no-array-index-key for more explanation.",
    "line": 46,
    "column": 18,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 46,
    "endColumn": 23
  },
  {
    "ruleId": "@eslint-react/no-array-index-key",
    "severity": 1,
    "message": "Do not use Array index as 'key'.",
    "line": 46,
    "column": 18,
    "nodeType": "Identifier",
    "messageId": "noArrayIndexKey",
    "endLine": 46,
    "endColumn": 23
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"href\\" to come before \\"key\\".",
    "line": 47,
    "column": 13,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 47,
    "endColumn": 29,
    "fix": {
      "range": [
        1138,
        1625
      ],
      "text": "className={cn(\\n              \\"group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline\\",\\n              item.disabled && \\"cursor-not-allowed opacity-60\\",\\n              pathname === item.href\\n                ? \\"font-medium text-foreground\\"\\n                : \\"text-muted-foreground\\"\\n            )}\\n            href={item.href}\\n            key={index}\\n            rel={item.external ? \\"noreferrer\\" : \\"\\"}\\n            target={item.external ? \\"_blank\\" : \\"\\"}"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"className\\" to come before \\"href\\".",
    "line": 48,
    "column": 13,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 54,
    "endColumn": 15,
    "fix": {
      "range": [
        1138,
        1625
      ],
      "text": "className={cn(\\n              \\"group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline\\",\\n              item.disabled && \\"cursor-not-allowed opacity-60\\",\\n              pathname === item.href\\n                ? \\"font-medium text-foreground\\"\\n                : \\"text-muted-foreground\\"\\n            )}\\n            href={item.href}\\n            key={index}\\n            rel={item.external ? \\"noreferrer\\" : \\"\\"}\\n            target={item.external ? \\"_blank\\" : \\"\\"}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"group·flex·w-full·items-center·rounded-md·border·border-transparent·px-2·py-1·hover:underline\\"\` with \`'group·flex·w-full·items-center·rounded-md·border·border-transparent·px-2·py-1·hover:underline'\`",
    "line": 49,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 49,
    "endColumn": 110,
    "fix": {
      "range": [
        1220,
        1315
      ],
      "text": "'group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"group·flex·w-full·items-center·rounded-md·border·border-transparent·px-2·py-1·hover:underline\\"\` with \`'group·flex·w-full·items-center·rounded-md·border·border-transparent·px-2·py-1·hover:underline'\`",
    "line": 49,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 49,
    "endColumn": 110,
    "fix": {
      "range": [
        1220,
        1315
      ],
      "text": "'group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"cursor-not-allowed·opacity-60\\"\` with \`'cursor-not-allowed·opacity-60'\`",
    "line": 50,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 50,
    "endColumn": 63,
    "fix": {
      "range": [
        1348,
        1379
      ],
      "text": "'cursor-not-allowed opacity-60'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"cursor-not-allowed·opacity-60\\"\` with \`'cursor-not-allowed·opacity-60'\`",
    "line": 50,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 50,
    "endColumn": 63,
    "fix": {
      "range": [
        1348,
        1379
      ],
      "text": "'cursor-not-allowed opacity-60'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎················?·\\"font-medium·text-foreground\\"⏎················:·\\"text-muted-foreground\\"\` with \`·?·'font-medium·text-foreground'·:·'text-muted-foreground',\`",
    "line": 51,
    "column": 37,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 53,
    "endColumn": 42,
    "fix": {
      "range": [
        1417,
        1507
      ],
      "text": " ? 'font-medium text-foreground' : 'text-muted-foreground',"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`⏎················?·\\"font-medium·text-foreground\\"⏎················:·\\"text-muted-foreground\\"\` with \`·?·'text-foreground·font-medium'·:·'text-muted-foreground',\`",
    "line": 51,
    "column": 37,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 53,
    "endColumn": 42,
    "fix": {
      "range": [
        1417,
        1507
      ],
      "text": " ? 'text-foreground font-medium' : 'text-muted-foreground',"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"_blank\\"·:·\\"\\"\` with \`'_blank'·:·''\`",
    "line": 55,
    "column": 37,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 55,
    "endColumn": 50,
    "fix": {
      "range": [
        1559,
        1572
      ],
      "text": "'_blank' : ''"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"_blank\\"·:·\\"\\"\` with \`'_blank'·:·''\`",
    "line": 55,
    "column": 37,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 55,
    "endColumn": 50,
    "fix": {
      "range": [
        1559,
        1572
      ],
      "text": "'_blank' : ''"
    }
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"rel\\" to come before \\"target\\".",
    "line": 56,
    "column": 13,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 56,
    "endColumn": 52,
    "fix": {
      "range": [
        1138,
        1625
      ],
      "text": "className={cn(\\n              \\"group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline\\",\\n              item.disabled && \\"cursor-not-allowed opacity-60\\",\\n              pathname === item.href\\n                ? \\"font-medium text-foreground\\"\\n                : \\"text-muted-foreground\\"\\n            )}\\n            href={item.href}\\n            key={index}\\n            rel={item.external ? \\"noreferrer\\" : \\"\\"}\\n            target={item.external ? \\"_blank\\" : \\"\\"}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"noreferrer\\"·:·\\"\\"\` with \`'noreferrer'·:·''\`",
    "line": 56,
    "column": 34,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 56,
    "endColumn": 51,
    "fix": {
      "range": [
        1607,
        1624
      ],
      "text": "'noreferrer' : ''"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"noreferrer\\"·:·\\"\\"\` with \`'noreferrer'·:·''\`",
    "line": 56,
    "column": 34,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 56,
    "endColumn": 51,
    "fix": {
      "range": [
        1607,
        1624
      ],
      "text": "'noreferrer' : ''"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"ml-2·rounded-md·bg-[#adfa1d]·px-1.5·py-0.5·text-xs·leading-none·text-[#000000]·no-underline·group-hover:no-underline\\"\` with \`'ml-2·rounded-md·bg-[#adfa1d]·px-1.5·py-0.5·text-xs·leading-none·text-[#000000]·no-underline·group-hover:no-underline'\`",
    "line": 60,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 60,
    "endColumn": 149,
    "fix": {
      "range": [
        1722,
        1840
      ],
      "text": "'ml-2 rounded-md bg-[#adfa1d] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"ml-2·rounded-md·bg-[#adfa1d]·px-1.5·py-0.5·text-xs·leading-none·text-[#000000]·no-underline·group-hover:no-underline\\"\` with \`'ml-2·rounded-md·bg-[#adfa1d]·px-1.5·py-0.5·text-xs·leading-none·text-[#000000]·no-underline·group-hover:no-underline'\`",
    "line": 60,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 60,
    "endColumn": 149,
    "fix": {
      "range": [
        1722,
        1840
      ],
      "text": "'ml-2 rounded-md bg-[#adfa1d] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline'"
    }
  },
  {
    "ruleId": "biome-x/lint",
    "severity": 2,
    "message": "Avoid using the index of an array as key property in an element. This is the source of the key value. The order of the items may change, and this also affects performances and component state. Check the React documentation.  See https://biomejs.dev/linter/rules/no-array-index-key for more explanation.",
    "line": 67,
    "column": 18,
    "nodeType": null,
    "messageId": "lint",
    "endLine": 67,
    "endColumn": 23
  },
  {
    "ruleId": "@eslint-react/no-array-index-key",
    "severity": 1,
    "message": "Do not use Array index as 'key'.",
    "line": 67,
    "column": 18,
    "nodeType": "Identifier",
    "messageId": "noArrayIndexKey",
    "endLine": 67,
    "endColumn": 23
  },
  {
    "ruleId": "perfectionist/sort-jsx-props",
    "severity": 2,
    "message": "Expected \\"className\\" to come before \\"key\\".",
    "line": 68,
    "column": 13,
    "nodeType": "JSXAttribute",
    "messageId": "unexpectedJSXPropsOrder",
    "endLine": 71,
    "endColumn": 15,
    "fix": {
      "range": [
        1968,
        2198
      ],
      "text": "className={cn(\\n              \\"flex w-full cursor-not-allowed items-center rounded-md p-2 text-muted-foreground hover:underline\\",\\n              item.disabled && \\"cursor-not-allowed opacity-60\\"\\n            )}\\n            key={index}"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"flex·w-full·cursor-not-allowed·items-center·rounded-md·p-2·text-muted-foreground·hover:underline\\"\` with \`'flex·w-full·cursor-not-allowed·items-center·rounded-md·p-2·text-muted-foreground·hover:underline'\`",
    "line": 69,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 69,
    "endColumn": 113,
    "fix": {
      "range": [
        2021,
        2119
      ],
      "text": "'flex w-full cursor-not-allowed items-center rounded-md p-2 text-muted-foreground hover:underline'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"flex·w-full·cursor-not-allowed·items-center·rounded-md·p-2·text-muted-foreground·hover:underline\\"\` with \`'text-muted-foreground·flex·w-full·cursor-not-allowed·items-center·rounded-md·p-2·hover:underline'\`",
    "line": 69,
    "column": 15,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 69,
    "endColumn": 113,
    "fix": {
      "range": [
        2021,
        2119
      ],
      "text": "'text-muted-foreground flex w-full cursor-not-allowed items-center rounded-md p-2 hover:underline'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"cursor-not-allowed·opacity-60\\"\` with \`'cursor-not-allowed·opacity-60',\`",
    "line": 70,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 70,
    "endColumn": 63,
    "fix": {
      "range": [
        2152,
        2183
      ],
      "text": "'cursor-not-allowed opacity-60',"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"cursor-not-allowed·opacity-60\\"\` with \`'cursor-not-allowed·opacity-60',\`",
    "line": 70,
    "column": 32,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 70,
    "endColumn": 63,
    "fix": {
      "range": [
        2152,
        2183
      ],
      "text": "'cursor-not-allowed opacity-60',"
    }
  },
  {
    "ruleId": "tailwindcss/classnames-order",
    "severity": 1,
    "message": "Invalid Tailwind CSS classnames order",
    "line": 75,
    "column": 21,
    "nodeType": "JSXAttribute",
    "messageId": "invalidOrder",
    "endLine": 75,
    "endColumn": 152,
    "fix": {
      "range": [
        2296,
        2415
      ],
      "text": "bg-muted text-muted-foreground ml-2 rounded-md px-1.5 py-0.5 text-xs leading-none no-underline group-hover:no-underline"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`\\"ml-2·rounded-md·bg-muted·px-1.5·py-0.5·text-xs·leading-none·text-muted-foreground·no-underline·group-hover:no-underline\\"\` with \`'ml-2·rounded-md·bg-muted·px-1.5·py-0.5·text-xs·leading-none·text-muted-foreground·no-underline·group-hover:no-underline'\`",
    "line": 75,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 75,
    "endColumn": 152,
    "fix": {
      "range": [
        2295,
        2416
      ],
      "text": "'ml-2 rounded-md bg-muted px-1.5 py-0.5 text-xs leading-none text-muted-foreground no-underline group-hover:no-underline'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`\\"ml-2·rounded-md·bg-muted·px-1.5·py-0.5·text-xs·leading-none·text-muted-foreground·no-underline·group-hover:no-underline\\"\` with \`'bg-muted·text-muted-foreground·ml-2·rounded-md·px-1.5·py-0.5·text-xs·leading-none·no-underline·group-hover:no-underline'\`",
    "line": 75,
    "column": 31,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 75,
    "endColumn": 152,
    "fix": {
      "range": [
        2295,
        2416
      ],
      "text": "'bg-muted text-muted-foreground ml-2 rounded-md px-1.5 py-0.5 text-xs leading-none no-underline group-hover:no-underline'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Insert \`,\`",
    "line": 80,
    "column": 10,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 80,
    "endColumn": 10,
    "fix": {
      "range": [
        2511,
        2511
      ],
      "text": ","
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Insert \`,\`",
    "line": 80,
    "column": 10,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 80,
    "endColumn": 10,
    "fix": {
      "range": [
        2511,
        2511
      ],
      "text": ","
    }
  }
]
`;

exports[`ESLint config > test-vue.vue 1`] = `
[
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`<script>⏎import·{·GlIcon·}·from·'@gitlab/ui';\` with \`import·{·GlIcon·}·from·'@gitlab/ui'\`",
    "line": 1,
    "column": 1,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 2,
    "endColumn": 37,
    "fix": {
      "range": [
        0,
        45
      ],
      "text": "import { GlIcon } from '@gitlab/ui'"
    }
  },
  {
    "ruleId": "vue/block-lang",
    "severity": 2,
    "message": "The 'lang' attribute of '<script>' is missing.",
    "line": 1,
    "column": 1,
    "nodeType": "VStartTag",
    "messageId": "missing",
    "endLine": 1,
    "endColumn": 9
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Delete \`;\`",
    "line": 2,
    "column": 36,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 2,
    "endColumn": 37,
    "fix": {
      "range": [
        44,
        45
      ],
      "text": ""
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`·'~/locale';\` with \`'~/locale'\`",
    "line": 3,
    "column": 21,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 3,
    "endColumn": 33,
    "fix": {
      "range": [
        66,
        78
      ],
      "text": "'~/locale'"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`·'~/locale';\` with \`'~/locale'\`",
    "line": 3,
    "column": 21,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 3,
    "endColumn": 33,
    "fix": {
      "range": [
        66,
        78
      ],
      "text": "'~/locale'"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 4,
    "column": 50,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 4,
    "endColumn": 51,
    "fix": {
      "range": [
        128,
        129
      ],
      "text": ""
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Delete \`;\`",
    "line": 4,
    "column": 50,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 4,
    "endColumn": 51,
    "fix": {
      "range": [
        128,
        129
      ],
      "text": ""
    }
  },
  {
    "ruleId": "vue/require-name-property",
    "severity": 2,
    "message": "Required name property is not set.",
    "line": 6,
    "column": 16,
    "nodeType": "ObjectExpression",
    "messageId": "missingName",
    "endLine": 38,
    "endColumn": 2,
    "suggestions": [
      {
        "messageId": "addName",
        "fix": {
          "range": [
            150,
            150
          ],
          "text": "name: 'test-vue',\\n  "
        },
        "desc": "Add name property to component."
      }
    ]
  },
  {
    "ruleId": "vue/new-line-between-multi-line-property",
    "severity": 2,
    "message": "Enforce new lines between multi-line properties in Vue components.",
    "line": 9,
    "column": 4,
    "nodeType": "Property",
    "messageId": "missingEmptyLine",
    "endLine": 10,
    "endColumn": 3,
    "fix": {
      "range": [
        180,
        180
      ],
      "text": "\\n"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"required\\" to come before \\"type\\".",
    "line": 13,
    "column": 7,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 13,
    "endColumn": 22,
    "fix": {
      "range": [
        217,
        279
      ],
      "text": "default: () => ({}),\\n      required: false,\\n      type: Object"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"default\\" to come before \\"required\\".",
    "line": 14,
    "column": 7,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 14,
    "endColumn": 26,
    "fix": {
      "range": [
        217,
        279
      ],
      "text": "default: () => ({}),\\n      required: false,\\n      type: Object"
    }
  },
  {
    "ruleId": "vue/new-line-between-multi-line-property",
    "severity": 2,
    "message": "Enforce new lines between multi-line properties in Vue components.",
    "line": 15,
    "column": 6,
    "nodeType": "Property",
    "messageId": "missingEmptyLine",
    "endLine": 16,
    "endColumn": 5,
    "fix": {
      "range": [
        287,
        287
      ],
      "text": "\\n"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"groups\\" to come before \\"parentGroup\\".",
    "line": 16,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 19,
    "endColumn": 6,
    "fix": {
      "range": [
        196,
        431
      ],
      "text": "action: {\\n      type: String,\\n      required: false,\\n      default: '',\\n    },\\n    groups: {\\n      type: Array,\\n      required: true,\\n    },\\n    parentGroup: {\\n      type: Object,\\n      required: false,\\n      default: () => ({}),\\n    }"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"required\\" to come before \\"type\\".",
    "line": 18,
    "column": 7,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 18,
    "endColumn": 21,
    "fix": {
      "range": [
        308,
        341
      ],
      "text": "required: true,\\n      type: Array"
    }
  },
  {
    "ruleId": "vue/new-line-between-multi-line-property",
    "severity": 2,
    "message": "Enforce new lines between multi-line properties in Vue components.",
    "line": 19,
    "column": 6,
    "nodeType": "Property",
    "messageId": "missingEmptyLine",
    "endLine": 20,
    "endColumn": 5,
    "fix": {
      "range": [
        349,
        349
      ],
      "text": "\\n"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"action\\" to come before \\"groups\\".",
    "line": 20,
    "column": 5,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 24,
    "endColumn": 6,
    "fix": {
      "range": [
        196,
        431
      ],
      "text": "action: {\\n      type: String,\\n      required: false,\\n      default: '',\\n    },\\n    groups: {\\n      type: Array,\\n      required: true,\\n    },\\n    parentGroup: {\\n      type: Object,\\n      required: false,\\n      default: () => ({}),\\n    }"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"required\\" to come before \\"type\\".",
    "line": 22,
    "column": 7,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 22,
    "endColumn": 22,
    "fix": {
      "range": [
        370,
        424
      ],
      "text": "default: '',\\n      required: false,\\n      type: String"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"default\\" to come before \\"required\\".",
    "line": 23,
    "column": 7,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 23,
    "endColumn": 18,
    "fix": {
      "range": [
        370,
        424
      ],
      "text": "default: '',\\n      required: false,\\n      type: String"
    }
  },
  {
    "ruleId": "vue/new-line-between-multi-line-property",
    "severity": 2,
    "message": "Enforce new lines between multi-line properties in Vue components.",
    "line": 25,
    "column": 4,
    "nodeType": "Property",
    "messageId": "missingEmptyLine",
    "endLine": 26,
    "endColumn": 3,
    "fix": {
      "range": [
        437,
        437
      ],
      "text": "\\n"
    }
  },
  {
    "ruleId": "perfectionist/sort-objects",
    "severity": 2,
    "message": "Expected \\"computed\\" to come before \\"props\\".",
    "line": 26,
    "column": 3,
    "nodeType": "Property",
    "messageId": "unexpectedObjectsOrder",
    "endLine": 37,
    "endColumn": 4,
    "fix": {
      "range": [
        183,
        737
      ],
      "text": "computed: {\\n    hasMoreChildren() {\\n      return this.parentGroup.childrenCount > MAX_CHILDREN_COUNT;\\n    },\\n    moreChildrenStats() {\\n      return n__(\\n        'One more item',\\n        '%d more items',\\n        this.parentGroup.childrenCount - this.parentGroup.children.length,\\n      );\\n    },\\n  },\\n  props: {\\n    parentGroup: {\\n      type: Object,\\n      required: false,\\n      default: () => ({}),\\n    },\\n    groups: {\\n      type: Array,\\n      required: true,\\n    },\\n    action: {\\n      type: String,\\n      required: false,\\n      default: '',\\n    },\\n  }"
    }
  },
  {
    "ruleId": "vue/component-api-style",
    "severity": 2,
    "message": "Options API is not allowed in your project. \`computed\` option is part of the Options API. Use \`<script setup>\` or Composition API instead.",
    "line": 26,
    "column": 3,
    "nodeType": "Identifier",
    "messageId": "disallowComponentOption",
    "endLine": 26,
    "endColumn": 11
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;\`",
    "line": 28,
    "column": 65,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 28,
    "endColumn": 66,
    "fix": {
      "range": [
        540,
        541
      ],
      "text": ""
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Delete \`;\`",
    "line": 28,
    "column": 65,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 28,
    "endColumn": 66,
    "fix": {
      "range": [
        540,
        541
      ],
      "text": ""
    }
  },
  {
    "ruleId": "vue/new-line-between-multi-line-property",
    "severity": 2,
    "message": "Enforce new lines between multi-line properties in Vue components.",
    "line": 29,
    "column": 6,
    "nodeType": "Property",
    "messageId": "missingEmptyLine",
    "endLine": 30,
    "endColumn": 5,
    "fix": {
      "range": [
        548,
        548
      ],
      "text": "\\n"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Replace \`⏎········'One·more·item',⏎········'%d·more·items',⏎········this.parentGroup.childrenCount·-·this.parentGroup.children.length,⏎······);\` with \`'One·more·item',·'%d·more·items',·this.parentGroup.childrenCount·-·this.parentGroup.children.length)\`",
    "line": 31,
    "column": 18,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 35,
    "endColumn": 9,
    "fix": {
      "range": [
        592,
        726
      ],
      "text": "'One more item', '%d more items', this.parentGroup.childrenCount - this.parentGroup.children.length)"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Replace \`⏎········'One·more·item',⏎········'%d·more·items',⏎········this.parentGroup.childrenCount·-·this.parentGroup.children.length,⏎······);\` with \`'One·more·item',·'%d·more·items',·this.parentGroup.childrenCount·-·this.parentGroup.children.length)\`",
    "line": 31,
    "column": 18,
    "nodeType": null,
    "messageId": "replace",
    "endLine": 35,
    "endColumn": 9,
    "fix": {
      "range": [
        592,
        726
      ],
      "text": "'One more item', '%d more items', this.parentGroup.childrenCount - this.parentGroup.children.length)"
    }
  },
  {
    "ruleId": "biome-x/format",
    "severity": 1,
    "message": "Delete \`;⏎</script>⏎⏎<template>⏎··<ul·class=\\"groups-list·group-list-tree·gl-m-0·gl-flex·gl-flex-col\\">⏎····<!--·eslint-disable-next-line·vue/no-undef-components·-->⏎····<group-item⏎·······v-for=\\"(group,·index)·in·groups\\"⏎······:key=\\"index\\"⏎······:group=\\"group\\"⏎······:parent-group=\\"parentGroup\\"⏎······:action=\\"action\\"⏎····/>⏎····<li·v-if=\\"hasMoreChildren\\"·class=\\"group-row\\">⏎······<a·:href=\\"parentGroup.relativePath\\"·class=\\"group-row-contents·has-more-items·gl-py-3\\">⏎········<gl-icon·name=\\"external-link\\"·/>·{{·moreChildrenStats·}}⏎······</a>⏎····</li>⏎··</ul>⏎</template>\`",
    "line": 38,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 57,
    "endColumn": 12,
    "fix": {
      "range": [
        740,
        1304
      ],
      "text": ""
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Delete \`;\`",
    "line": 38,
    "column": 2,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 38,
    "endColumn": 3,
    "fix": {
      "range": [
        740,
        741
      ],
      "text": ""
    }
  },
  {
    "ruleId": "vue/component-name-in-template-casing",
    "severity": 2,
    "message": "Component name \\"group-item\\" is not PascalCase.",
    "line": 44,
    "column": 5,
    "nodeType": "HTMLTagOpen",
    "messageId": "incorrectCase",
    "endLine": 44,
    "endColumn": 16,
    "fix": {
      "range": [
        900,
        911
      ],
      "text": "<GroupItem"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Delete \`·\`",
    "line": 45,
    "column": 1,
    "nodeType": null,
    "messageId": "delete",
    "endLine": 45,
    "endColumn": 2,
    "fix": {
      "range": [
        912,
        913
      ],
      "text": ""
    }
  },
  {
    "ruleId": "vue/attributes-order",
    "severity": 2,
    "message": "Attribute \\":action\\" should go before \\":parent-group\\".",
    "line": 49,
    "column": 7,
    "nodeType": "VAttribute",
    "messageId": "expectedOrder",
    "endLine": 49,
    "endColumn": 23,
    "fix": {
      "range": [
        998,
        1048
      ],
      "text": ":action=\\"action\\"\\n      :parent-group=\\"parentGroup\\""
    }
  },
  {
    "ruleId": "vue/attributes-order",
    "severity": 2,
    "message": "Attribute \\"class\\" should go before \\":href\\".",
    "line": 52,
    "column": 43,
    "nodeType": "VAttribute",
    "messageId": "expectedOrder",
    "endLine": 52,
    "endColumn": 92,
    "fix": {
      "range": [
        1115,
        1197
      ],
      "text": "class=\\"group-row-contents has-more-items gl-py-3\\" :href=\\"parentGroup.relativePath\\""
    }
  },
  {
    "ruleId": "vue/component-name-in-template-casing",
    "severity": 2,
    "message": "Component name \\"gl-icon\\" is not PascalCase.",
    "line": 53,
    "column": 9,
    "nodeType": "HTMLTagOpen",
    "messageId": "incorrectCase",
    "endLine": 53,
    "endColumn": 17,
    "fix": {
      "range": [
        1207,
        1215
      ],
      "text": "<GlIcon"
    }
  },
  {
    "ruleId": "prettier/prettier",
    "severity": 2,
    "message": "Insert \`⏎·······\`",
    "line": 53,
    "column": 41,
    "nodeType": null,
    "messageId": "insert",
    "endLine": 53,
    "endColumn": 41,
    "fix": {
      "range": [
        1239,
        1239
      ],
      "text": "\\n       "
    }
  }
]
`;
